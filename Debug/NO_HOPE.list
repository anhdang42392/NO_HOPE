
NO_HOPE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2d0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019c0  0800b3e0  0800b3e0  0000c3e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cda0  0800cda0  0000e200  2**0
                  CONTENTS
  4 .ARM          00000008  0800cda0  0800cda0  0000dda0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cda8  0800cda8  0000e200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cda8  0800cda8  0000dda8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cdac  0800cdac  0000ddac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  0800cdb0  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c00  20000200  0800cfb0  0000e200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e00  0800cfb0  0000ee00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d721  00000000  00000000  0000e229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027e3  00000000  00000000  0001b94a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  0001e130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009af  00000000  00000000  0001edb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f47  00000000  00000000  0001f75f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114fd  00000000  00000000  000386a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008767e  00000000  00000000  00049ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1221  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b0c  00000000  00000000  000d1264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000d5d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b3c8 	.word	0x0800b3c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	0800b3c8 	.word	0x0800b3c8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_d2lz>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	2200      	movs	r2, #0
 8001160:	2300      	movs	r3, #0
 8001162:	4604      	mov	r4, r0
 8001164:	460d      	mov	r5, r1
 8001166:	f7ff fc29 	bl	80009bc <__aeabi_dcmplt>
 800116a:	b928      	cbnz	r0, 8001178 <__aeabi_d2lz+0x1c>
 800116c:	4620      	mov	r0, r4
 800116e:	4629      	mov	r1, r5
 8001170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001174:	f000 b80a 	b.w	800118c <__aeabi_d2ulz>
 8001178:	4620      	mov	r0, r4
 800117a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800117e:	f000 f805 	bl	800118c <__aeabi_d2ulz>
 8001182:	4240      	negs	r0, r0
 8001184:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001188:	bd38      	pop	{r3, r4, r5, pc}
 800118a:	bf00      	nop

0800118c <__aeabi_d2ulz>:
 800118c:	b5d0      	push	{r4, r6, r7, lr}
 800118e:	2200      	movs	r2, #0
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <__aeabi_d2ulz+0x34>)
 8001192:	4606      	mov	r6, r0
 8001194:	460f      	mov	r7, r1
 8001196:	f7ff f99f 	bl	80004d8 <__aeabi_dmul>
 800119a:	f7ff fc75 	bl	8000a88 <__aeabi_d2uiz>
 800119e:	4604      	mov	r4, r0
 80011a0:	f7ff f920 	bl	80003e4 <__aeabi_ui2d>
 80011a4:	2200      	movs	r2, #0
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <__aeabi_d2ulz+0x38>)
 80011a8:	f7ff f996 	bl	80004d8 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4630      	mov	r0, r6
 80011b2:	4639      	mov	r1, r7
 80011b4:	f7fe ffd8 	bl	8000168 <__aeabi_dsub>
 80011b8:	f7ff fc66 	bl	8000a88 <__aeabi_d2uiz>
 80011bc:	4621      	mov	r1, r4
 80011be:	bdd0      	pop	{r4, r6, r7, pc}
 80011c0:	3df00000 	.word	0x3df00000
 80011c4:	41f00000 	.word	0x41f00000

080011c8 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 80011c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011cc:	b08c      	sub	sp, #48	@ 0x30
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	6039      	str	r1, [r7, #0]
	inx = 0;
 80011d4:	4b72      	ldr	r3, [pc, #456]	@ (80013a0 <decodeGGA+0x1d8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 80011de:	e004      	b.n	80011ea <decodeGGA+0x22>
 80011e0:	4b6f      	ldr	r3, [pc, #444]	@ (80013a0 <decodeGGA+0x1d8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	3301      	adds	r3, #1
 80011e6:	4a6e      	ldr	r2, [pc, #440]	@ (80013a0 <decodeGGA+0x1d8>)
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	4b6d      	ldr	r3, [pc, #436]	@ (80013a0 <decodeGGA+0x1d8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4413      	add	r3, r2
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b2c      	cmp	r3, #44	@ 0x2c
 80011f8:	d1f2      	bne.n	80011e0 <decodeGGA+0x18>
	inx++;
 80011fa:	4b69      	ldr	r3, [pc, #420]	@ (80013a0 <decodeGGA+0x1d8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	4a67      	ldr	r2, [pc, #412]	@ (80013a0 <decodeGGA+0x1d8>)
 8001202:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8001204:	e004      	b.n	8001210 <decodeGGA+0x48>
 8001206:	4b66      	ldr	r3, [pc, #408]	@ (80013a0 <decodeGGA+0x1d8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	3301      	adds	r3, #1
 800120c:	4a64      	ldr	r2, [pc, #400]	@ (80013a0 <decodeGGA+0x1d8>)
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b63      	ldr	r3, [pc, #396]	@ (80013a0 <decodeGGA+0x1d8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b2c      	cmp	r3, #44	@ 0x2c
 800121e:	d1f2      	bne.n	8001206 <decodeGGA+0x3e>
	inx++;
 8001220:	4b5f      	ldr	r3, [pc, #380]	@ (80013a0 <decodeGGA+0x1d8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	3301      	adds	r3, #1
 8001226:	4a5e      	ldr	r2, [pc, #376]	@ (80013a0 <decodeGGA+0x1d8>)
 8001228:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 800122a:	e004      	b.n	8001236 <decodeGGA+0x6e>
 800122c:	4b5c      	ldr	r3, [pc, #368]	@ (80013a0 <decodeGGA+0x1d8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	3301      	adds	r3, #1
 8001232:	4a5b      	ldr	r2, [pc, #364]	@ (80013a0 <decodeGGA+0x1d8>)
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	4b5a      	ldr	r3, [pc, #360]	@ (80013a0 <decodeGGA+0x1d8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4413      	add	r3, r2
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b2c      	cmp	r3, #44	@ 0x2c
 8001244:	d1f2      	bne.n	800122c <decodeGGA+0x64>
	inx++;
 8001246:	4b56      	ldr	r3, [pc, #344]	@ (80013a0 <decodeGGA+0x1d8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	3301      	adds	r3, #1
 800124c:	4a54      	ldr	r2, [pc, #336]	@ (80013a0 <decodeGGA+0x1d8>)
 800124e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8001250:	e004      	b.n	800125c <decodeGGA+0x94>
 8001252:	4b53      	ldr	r3, [pc, #332]	@ (80013a0 <decodeGGA+0x1d8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	3301      	adds	r3, #1
 8001258:	4a51      	ldr	r2, [pc, #324]	@ (80013a0 <decodeGGA+0x1d8>)
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	4b50      	ldr	r3, [pc, #320]	@ (80013a0 <decodeGGA+0x1d8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b2c      	cmp	r3, #44	@ 0x2c
 800126a:	d1f2      	bne.n	8001252 <decodeGGA+0x8a>
	inx++;
 800126c:	4b4c      	ldr	r3, [pc, #304]	@ (80013a0 <decodeGGA+0x1d8>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	4a4b      	ldr	r2, [pc, #300]	@ (80013a0 <decodeGGA+0x1d8>)
 8001274:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8001276:	e004      	b.n	8001282 <decodeGGA+0xba>
 8001278:	4b49      	ldr	r3, [pc, #292]	@ (80013a0 <decodeGGA+0x1d8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3301      	adds	r3, #1
 800127e:	4a48      	ldr	r2, [pc, #288]	@ (80013a0 <decodeGGA+0x1d8>)
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	4b47      	ldr	r3, [pc, #284]	@ (80013a0 <decodeGGA+0x1d8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4413      	add	r3, r2
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001290:	d1f2      	bne.n	8001278 <decodeGGA+0xb0>
	inx++;
 8001292:	4b43      	ldr	r3, [pc, #268]	@ (80013a0 <decodeGGA+0x1d8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	4a41      	ldr	r2, [pc, #260]	@ (80013a0 <decodeGGA+0x1d8>)
 800129a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 800129c:	e004      	b.n	80012a8 <decodeGGA+0xe0>
 800129e:	4b40      	ldr	r3, [pc, #256]	@ (80013a0 <decodeGGA+0x1d8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	3301      	adds	r3, #1
 80012a4:	4a3e      	ldr	r2, [pc, #248]	@ (80013a0 <decodeGGA+0x1d8>)
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b3d      	ldr	r3, [pc, #244]	@ (80013a0 <decodeGGA+0x1d8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b2c      	cmp	r3, #44	@ 0x2c
 80012b6:	d1f2      	bne.n	800129e <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 80012b8:	4b39      	ldr	r3, [pc, #228]	@ (80013a0 <decodeGGA+0x1d8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	4a38      	ldr	r2, [pc, #224]	@ (80013a0 <decodeGGA+0x1d8>)
 80012c0:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++; // after position ','
 80012c2:	e004      	b.n	80012ce <decodeGGA+0x106>
 80012c4:	4b36      	ldr	r3, [pc, #216]	@ (80013a0 <decodeGGA+0x1d8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	3301      	adds	r3, #1
 80012ca:	4a35      	ldr	r2, [pc, #212]	@ (80013a0 <decodeGGA+0x1d8>)
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b34      	ldr	r3, [pc, #208]	@ (80013a0 <decodeGGA+0x1d8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b2c      	cmp	r3, #44	@ 0x2c
 80012dc:	d1f2      	bne.n	80012c4 <decodeGGA+0xfc>
	inx++;
 80012de:	4b30      	ldr	r3, [pc, #192]	@ (80013a0 <decodeGGA+0x1d8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	3301      	adds	r3, #1
 80012e4:	4a2e      	ldr	r2, [pc, #184]	@ (80013a0 <decodeGGA+0x1d8>)
 80012e6:	6013      	str	r3, [r2, #0]
	while(GGAbuffer[inx] != ',') inx++;   // after  number of gga->numofggagps->numofsat ','
 80012e8:	e004      	b.n	80012f4 <decodeGGA+0x12c>
 80012ea:	4b2d      	ldr	r3, [pc, #180]	@ (80013a0 <decodeGGA+0x1d8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	3301      	adds	r3, #1
 80012f0:	4a2b      	ldr	r2, [pc, #172]	@ (80013a0 <decodeGGA+0x1d8>)
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b2a      	ldr	r3, [pc, #168]	@ (80013a0 <decodeGGA+0x1d8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b2c      	cmp	r3, #44	@ 0x2c
 8001302:	d1f2      	bne.n	80012ea <decodeGGA+0x122>
	inx++;
 8001304:	4b26      	ldr	r3, [pc, #152]	@ (80013a0 <decodeGGA+0x1d8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	3301      	adds	r3, #1
 800130a:	4a25      	ldr	r2, [pc, #148]	@ (80013a0 <decodeGGA+0x1d8>)
 800130c:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6') ||  (GGAbuffer[inx] == '8'))   // 0 indicates no fix yet
 800130e:	4b24      	ldr	r3, [pc, #144]	@ (80013a0 <decodeGGA+0x1d8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4413      	add	r3, r2
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b31      	cmp	r3, #49	@ 0x31
 800131c:	d017      	beq.n	800134e <decodeGGA+0x186>
 800131e:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <decodeGGA+0x1d8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4413      	add	r3, r2
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b32      	cmp	r3, #50	@ 0x32
 800132c:	d00f      	beq.n	800134e <decodeGGA+0x186>
 800132e:	4b1c      	ldr	r3, [pc, #112]	@ (80013a0 <decodeGGA+0x1d8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4413      	add	r3, r2
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b36      	cmp	r3, #54	@ 0x36
 800133c:	d007      	beq.n	800134e <decodeGGA+0x186>
 800133e:	4b18      	ldr	r3, [pc, #96]	@ (80013a0 <decodeGGA+0x1d8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b38      	cmp	r3, #56	@ 0x38
 800134c:	d106      	bne.n	800135c <decodeGGA+0x194>
	{
		gga->isfixValid = 1;   // fix available
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	2201      	movs	r2, #1
 8001352:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8001354:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <decodeGGA+0x1d8>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 800135a:	e009      	b.n	8001370 <decodeGGA+0x1a8>
		gga->isfixValid = 0;   // If the fix is not available
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8001362:	2301      	movs	r3, #1
 8001364:	e386      	b.n	8001a74 <decodeGGA+0x8ac>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001366:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <decodeGGA+0x1d8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	4a0c      	ldr	r2, [pc, #48]	@ (80013a0 <decodeGGA+0x1d8>)
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <decodeGGA+0x1d8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b2c      	cmp	r3, #44	@ 0x2c
 800137e:	d1f2      	bne.n	8001366 <decodeGGA+0x19e>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8001380:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <decodeGGA+0x1d8>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	4a06      	ldr	r2, [pc, #24]	@ (80013a0 <decodeGGA+0x1d8>)
 8001388:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	220c      	movs	r2, #12
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f006 fbbd 	bl	8007b12 <memset>
	i=0;
 8001398:	2300      	movs	r3, #0
 800139a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 800139c:	e016      	b.n	80013cc <decodeGGA+0x204>
 800139e:	bf00      	nop
 80013a0:	2000021c 	.word	0x2000021c
	{
		buffer[i] = GGAbuffer[inx];
 80013a4:	4b6d      	ldr	r3, [pc, #436]	@ (800155c <decodeGGA+0x394>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	7819      	ldrb	r1, [r3, #0]
 80013b0:	f107 020c 	add.w	r2, r7, #12
 80013b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013b6:	4413      	add	r3, r2
 80013b8:	460a      	mov	r2, r1
 80013ba:	701a      	strb	r2, [r3, #0]
		i++;
 80013bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013be:	3301      	adds	r3, #1
 80013c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 80013c2:	4b66      	ldr	r3, [pc, #408]	@ (800155c <decodeGGA+0x394>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	4a64      	ldr	r2, [pc, #400]	@ (800155c <decodeGGA+0x394>)
 80013ca:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 80013cc:	4b63      	ldr	r3, [pc, #396]	@ (800155c <decodeGGA+0x394>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b2c      	cmp	r3, #44	@ 0x2c
 80013da:	d1e3      	bne.n	80013a4 <decodeGGA+0x1dc>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	4618      	mov	r0, r3
 80013e2:	f004 fd6e 	bl	8005ec2 <atoi>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4a5d      	ldr	r2, [pc, #372]	@ (8001560 <decodeGGA+0x398>)
 80013ea:	fb82 1203 	smull	r1, r2, r2, r3
 80013ee:	1312      	asrs	r2, r2, #12
 80013f0:	17db      	asrs	r3, r3, #31
 80013f2:	1ad2      	subs	r2, r2, r3
 80013f4:	4b5b      	ldr	r3, [pc, #364]	@ (8001564 <decodeGGA+0x39c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	495b      	ldr	r1, [pc, #364]	@ (8001568 <decodeGGA+0x3a0>)
 80013fa:	fb81 0103 	smull	r0, r1, r1, r3
 80013fe:	1149      	asrs	r1, r1, #5
 8001400:	17db      	asrs	r3, r3, #31
 8001402:	1acb      	subs	r3, r1, r3
 8001404:	4413      	add	r3, r2
 8001406:	4a59      	ldr	r2, [pc, #356]	@ (800156c <decodeGGA+0x3a4>)
 8001408:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	4618      	mov	r0, r3
 8001410:	f004 fd57 	bl	8005ec2 <atoi>
 8001414:	4603      	mov	r3, r0
 8001416:	4a54      	ldr	r2, [pc, #336]	@ (8001568 <decodeGGA+0x3a0>)
 8001418:	fb82 1203 	smull	r1, r2, r2, r3
 800141c:	1152      	asrs	r2, r2, #5
 800141e:	17db      	asrs	r3, r3, #31
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	4a51      	ldr	r2, [pc, #324]	@ (8001568 <decodeGGA+0x3a0>)
 8001424:	fb82 1203 	smull	r1, r2, r2, r3
 8001428:	1151      	asrs	r1, r2, #5
 800142a:	17da      	asrs	r2, r3, #31
 800142c:	1a8a      	subs	r2, r1, r2
 800142e:	2164      	movs	r1, #100	@ 0x64
 8001430:	fb01 f202 	mul.w	r2, r1, r2
 8001434:	1a9a      	subs	r2, r3, r2
 8001436:	4b4b      	ldr	r3, [pc, #300]	@ (8001564 <decodeGGA+0x39c>)
 8001438:	6819      	ldr	r1, [r3, #0]
 800143a:	4b4b      	ldr	r3, [pc, #300]	@ (8001568 <decodeGGA+0x3a0>)
 800143c:	fb83 0301 	smull	r0, r3, r3, r1
 8001440:	1158      	asrs	r0, r3, #5
 8001442:	17cb      	asrs	r3, r1, #31
 8001444:	1ac3      	subs	r3, r0, r3
 8001446:	2064      	movs	r0, #100	@ 0x64
 8001448:	fb00 f303 	mul.w	r3, r0, r3
 800144c:	1acb      	subs	r3, r1, r3
 800144e:	4413      	add	r3, r2
 8001450:	4a47      	ldr	r2, [pc, #284]	@ (8001570 <decodeGGA+0x3a8>)
 8001452:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59)
 8001454:	4b46      	ldr	r3, [pc, #280]	@ (8001570 <decodeGGA+0x3a8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b3b      	cmp	r3, #59	@ 0x3b
 800145a:	dd09      	ble.n	8001470 <decodeGGA+0x2a8>
	{
		min = min-60;
 800145c:	4b44      	ldr	r3, [pc, #272]	@ (8001570 <decodeGGA+0x3a8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3b3c      	subs	r3, #60	@ 0x3c
 8001462:	4a43      	ldr	r2, [pc, #268]	@ (8001570 <decodeGGA+0x3a8>)
 8001464:	6013      	str	r3, [r2, #0]
		hr++;
 8001466:	4b41      	ldr	r3, [pc, #260]	@ (800156c <decodeGGA+0x3a4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	4a3f      	ldr	r2, [pc, #252]	@ (800156c <decodeGGA+0x3a4>)
 800146e:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8001470:	4b3e      	ldr	r3, [pc, #248]	@ (800156c <decodeGGA+0x3a4>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	da09      	bge.n	800148c <decodeGGA+0x2c4>
	{
		hr=24+hr;
 8001478:	4b3c      	ldr	r3, [pc, #240]	@ (800156c <decodeGGA+0x3a4>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3318      	adds	r3, #24
 800147e:	4a3b      	ldr	r2, [pc, #236]	@ (800156c <decodeGGA+0x3a4>)
 8001480:	6013      	str	r3, [r2, #0]
		daychange--;
 8001482:	4b3c      	ldr	r3, [pc, #240]	@ (8001574 <decodeGGA+0x3ac>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	3b01      	subs	r3, #1
 8001488:	4a3a      	ldr	r2, [pc, #232]	@ (8001574 <decodeGGA+0x3ac>)
 800148a:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 800148c:	4b37      	ldr	r3, [pc, #220]	@ (800156c <decodeGGA+0x3a4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b17      	cmp	r3, #23
 8001492:	dd09      	ble.n	80014a8 <decodeGGA+0x2e0>
	{
		hr=hr-24;
 8001494:	4b35      	ldr	r3, [pc, #212]	@ (800156c <decodeGGA+0x3a4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	3b18      	subs	r3, #24
 800149a:	4a34      	ldr	r2, [pc, #208]	@ (800156c <decodeGGA+0x3a4>)
 800149c:	6013      	str	r3, [r2, #0]
		daychange++;
 800149e:	4b35      	ldr	r3, [pc, #212]	@ (8001574 <decodeGGA+0x3ac>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	4a33      	ldr	r2, [pc, #204]	@ (8001574 <decodeGGA+0x3ac>)
 80014a6:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 80014a8:	4b30      	ldr	r3, [pc, #192]	@ (800156c <decodeGGA+0x3a4>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 80014b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001570 <decodeGGA+0x3a8>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	4618      	mov	r0, r3
 80014be:	f004 fd00 	bl	8005ec2 <atoi>
 80014c2:	4602      	mov	r2, r0
 80014c4:	4b28      	ldr	r3, [pc, #160]	@ (8001568 <decodeGGA+0x3a0>)
 80014c6:	fb83 1302 	smull	r1, r3, r3, r2
 80014ca:	1159      	asrs	r1, r3, #5
 80014cc:	17d3      	asrs	r3, r2, #31
 80014ce:	1acb      	subs	r3, r1, r3
 80014d0:	2164      	movs	r1, #100	@ 0x64
 80014d2:	fb01 f303 	mul.w	r3, r1, r3
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 80014dc:	4b1f      	ldr	r3, [pc, #124]	@ (800155c <decodeGGA+0x394>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3301      	adds	r3, #1
 80014e2:	4a1e      	ldr	r2, [pc, #120]	@ (800155c <decodeGGA+0x394>)
 80014e4:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80014e6:	f107 030c 	add.w	r3, r7, #12
 80014ea:	220c      	movs	r2, #12
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f006 fb0f 	bl	8007b12 <memset>
	i=0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 80014f8:	e013      	b.n	8001522 <decodeGGA+0x35a>
	{
		buffer[i] = GGAbuffer[inx];
 80014fa:	4b18      	ldr	r3, [pc, #96]	@ (800155c <decodeGGA+0x394>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4413      	add	r3, r2
 8001504:	7819      	ldrb	r1, [r3, #0]
 8001506:	f107 020c 	add.w	r2, r7, #12
 800150a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800150c:	4413      	add	r3, r2
 800150e:	460a      	mov	r2, r1
 8001510:	701a      	strb	r2, [r3, #0]
		i++;
 8001512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001514:	3301      	adds	r3, #1
 8001516:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8001518:	4b10      	ldr	r3, [pc, #64]	@ (800155c <decodeGGA+0x394>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	3301      	adds	r3, #1
 800151e:	4a0f      	ldr	r2, [pc, #60]	@ (800155c <decodeGGA+0x394>)
 8001520:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001522:	4b0e      	ldr	r3, [pc, #56]	@ (800155c <decodeGGA+0x394>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4413      	add	r3, r2
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001530:	d1e3      	bne.n	80014fa <decodeGGA+0x332>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8001532:	f107 030c 	add.w	r3, r7, #12
 8001536:	4618      	mov	r0, r3
 8001538:	f7fe fe0a 	bl	8000150 <strlen>
 800153c:	4603      	mov	r3, r0
 800153e:	2b05      	cmp	r3, #5
 8001540:	d801      	bhi.n	8001546 <decodeGGA+0x37e>
 8001542:	2302      	movs	r3, #2
 8001544:	e296      	b.n	8001a74 <decodeGGA+0x8ac>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8001546:	f107 030c 	add.w	r3, r7, #12
 800154a:	4618      	mov	r0, r3
 800154c:	f004 fcb9 	bl	8005ec2 <atoi>
 8001550:	4603      	mov	r3, r0
 8001552:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int j = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8001558:	e011      	b.n	800157e <decodeGGA+0x3b6>
 800155a:	bf00      	nop
 800155c:	2000021c 	.word	0x2000021c
 8001560:	68db8bad 	.word	0x68db8bad
 8001564:	20000000 	.word	0x20000000
 8001568:	51eb851f 	.word	0x51eb851f
 800156c:	20000220 	.word	0x20000220
 8001570:	20000224 	.word	0x20000224
 8001574:	2000022c 	.word	0x2000022c
 8001578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800157a:	3301      	adds	r3, #1
 800157c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800157e:	f107 020c 	add.w	r2, r7, #12
 8001582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001584:	4413      	add	r3, r2
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b2e      	cmp	r3, #46	@ 0x2e
 800158a:	d1f5      	bne.n	8001578 <decodeGGA+0x3b0>
	j++;
 800158c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800158e:	3301      	adds	r3, #1
 8001590:	62bb      	str	r3, [r7, #40]	@ 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe fdda 	bl	8000150 <strlen>
 800159c:	4602      	mov	r2, r0
 800159e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 80015a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015a6:	f107 020c 	add.w	r2, r7, #12
 80015aa:	4413      	add	r3, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f004 fc88 	bl	8005ec2 <atoi>
 80015b2:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 80015b4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ff23 	bl	8000404 <__aeabi_i2d>
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	4bb0      	ldr	r3, [pc, #704]	@ (8001884 <decodeGGA+0x6bc>)
 80015c4:	f7ff f8b2 	bl	800072c <__aeabi_ddiv>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4690      	mov	r8, r2
 80015ce:	4699      	mov	r9, r3
 80015d0:	69f8      	ldr	r0, [r7, #28]
 80015d2:	f7fe ff17 	bl	8000404 <__aeabi_i2d>
 80015d6:	4604      	mov	r4, r0
 80015d8:	460d      	mov	r5, r1
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	3302      	adds	r3, #2
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ff10 	bl	8000404 <__aeabi_i2d>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	f04f 0000 	mov.w	r0, #0
 80015ec:	49a6      	ldr	r1, [pc, #664]	@ (8001888 <decodeGGA+0x6c0>)
 80015ee:	f008 ffdd 	bl	800a5ac <pow>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4620      	mov	r0, r4
 80015f8:	4629      	mov	r1, r5
 80015fa:	f7ff f897 	bl	800072c <__aeabi_ddiv>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4640      	mov	r0, r8
 8001604:	4649      	mov	r1, r9
 8001606:	f7fe fdb1 	bl	800016c <__adddf3>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f7ff fa59 	bl	8000ac8 <__aeabi_d2f>
 8001616:	4603      	mov	r3, r0
 8001618:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = (int)lat + ((lat - (int)lat)*100)/60;  // save the lattitude data into the strucure
 800161a:	69b8      	ldr	r0, [r7, #24]
 800161c:	f7ff fd78 	bl	8001110 <__aeabi_f2iz>
 8001620:	4603      	mov	r3, r0
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fb5a 	bl	8000cdc <__aeabi_i2f>
 8001628:	4604      	mov	r4, r0
 800162a:	69b8      	ldr	r0, [r7, #24]
 800162c:	f7ff fd70 	bl	8001110 <__aeabi_f2iz>
 8001630:	4603      	mov	r3, r0
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fb52 	bl	8000cdc <__aeabi_i2f>
 8001638:	4603      	mov	r3, r0
 800163a:	4619      	mov	r1, r3
 800163c:	69b8      	ldr	r0, [r7, #24]
 800163e:	f7ff fa97 	bl	8000b70 <__aeabi_fsub>
 8001642:	4603      	mov	r3, r0
 8001644:	4991      	ldr	r1, [pc, #580]	@ (800188c <decodeGGA+0x6c4>)
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fb9c 	bl	8000d84 <__aeabi_fmul>
 800164c:	4603      	mov	r3, r0
 800164e:	4990      	ldr	r1, [pc, #576]	@ (8001890 <decodeGGA+0x6c8>)
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fc4b 	bl	8000eec <__aeabi_fdiv>
 8001656:	4603      	mov	r3, r0
 8001658:	4619      	mov	r1, r3
 800165a:	4620      	mov	r0, r4
 800165c:	f7ff fa8a 	bl	8000b74 <__addsf3>
 8001660:	4603      	mov	r3, r0
 8001662:	461a      	mov	r2, r3
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	601a      	str	r2, [r3, #0]
	inx++;
 8001668:	4b8a      	ldr	r3, [pc, #552]	@ (8001894 <decodeGGA+0x6cc>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	3301      	adds	r3, #1
 800166e:	4a89      	ldr	r2, [pc, #548]	@ (8001894 <decodeGGA+0x6cc>)
 8001670:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8001672:	4b88      	ldr	r3, [pc, #544]	@ (8001894 <decodeGGA+0x6cc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	781a      	ldrb	r2, [r3, #0]
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8001682:	4b84      	ldr	r3, [pc, #528]	@ (8001894 <decodeGGA+0x6cc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	3301      	adds	r3, #1
 8001688:	4a82      	ldr	r2, [pc, #520]	@ (8001894 <decodeGGA+0x6cc>)
 800168a:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 800168c:	4b81      	ldr	r3, [pc, #516]	@ (8001894 <decodeGGA+0x6cc>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	3301      	adds	r3, #1
 8001692:	4a80      	ldr	r2, [pc, #512]	@ (8001894 <decodeGGA+0x6cc>)
 8001694:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	220c      	movs	r2, #12
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f006 fa37 	bl	8007b12 <memset>
	i=0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 80016a8:	e013      	b.n	80016d2 <decodeGGA+0x50a>
	{
		buffer[i] = GGAbuffer[inx];
 80016aa:	4b7a      	ldr	r3, [pc, #488]	@ (8001894 <decodeGGA+0x6cc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4413      	add	r3, r2
 80016b4:	7819      	ldrb	r1, [r3, #0]
 80016b6:	f107 020c 	add.w	r2, r7, #12
 80016ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016bc:	4413      	add	r3, r2
 80016be:	460a      	mov	r2, r1
 80016c0:	701a      	strb	r2, [r3, #0]
		i++;
 80016c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016c4:	3301      	adds	r3, #1
 80016c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 80016c8:	4b72      	ldr	r3, [pc, #456]	@ (8001894 <decodeGGA+0x6cc>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	3301      	adds	r3, #1
 80016ce:	4a71      	ldr	r2, [pc, #452]	@ (8001894 <decodeGGA+0x6cc>)
 80016d0:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 80016d2:	4b70      	ldr	r3, [pc, #448]	@ (8001894 <decodeGGA+0x6cc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4413      	add	r3, r2
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b2c      	cmp	r3, #44	@ 0x2c
 80016e0:	d1e3      	bne.n	80016aa <decodeGGA+0x4e2>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	4618      	mov	r0, r3
 80016e8:	f004 fbeb 	bl	8005ec2 <atoi>
 80016ec:	4603      	mov	r3, r0
 80016ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
	j = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 80016f4:	e002      	b.n	80016fc <decodeGGA+0x534>
 80016f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016f8:	3301      	adds	r3, #1
 80016fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016fc:	f107 020c 	add.w	r2, r7, #12
 8001700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001702:	4413      	add	r3, r2
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b2e      	cmp	r3, #46	@ 0x2e
 8001708:	d1f5      	bne.n	80016f6 <decodeGGA+0x52e>
	j++;
 800170a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800170c:	3301      	adds	r3, #1
 800170e:	62bb      	str	r3, [r7, #40]	@ 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe fd1b 	bl	8000150 <strlen>
 800171a:	4602      	mov	r2, r0
 800171c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001724:	f107 020c 	add.w	r2, r7, #12
 8001728:	4413      	add	r3, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f004 fbc9 	bl	8005ec2 <atoi>
 8001730:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001732:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe fe64 	bl	8000404 <__aeabi_i2d>
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	4b50      	ldr	r3, [pc, #320]	@ (8001884 <decodeGGA+0x6bc>)
 8001742:	f7fe fff3 	bl	800072c <__aeabi_ddiv>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4690      	mov	r8, r2
 800174c:	4699      	mov	r9, r3
 800174e:	69f8      	ldr	r0, [r7, #28]
 8001750:	f7fe fe58 	bl	8000404 <__aeabi_i2d>
 8001754:	4604      	mov	r4, r0
 8001756:	460d      	mov	r5, r1
 8001758:	6a3b      	ldr	r3, [r7, #32]
 800175a:	3302      	adds	r3, #2
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe fe51 	bl	8000404 <__aeabi_i2d>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	f04f 0000 	mov.w	r0, #0
 800176a:	4947      	ldr	r1, [pc, #284]	@ (8001888 <decodeGGA+0x6c0>)
 800176c:	f008 ff1e 	bl	800a5ac <pow>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4620      	mov	r0, r4
 8001776:	4629      	mov	r1, r5
 8001778:	f7fe ffd8 	bl	800072c <__aeabi_ddiv>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4640      	mov	r0, r8
 8001782:	4649      	mov	r1, r9
 8001784:	f7fe fcf2 	bl	800016c <__adddf3>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f7ff f99a 	bl	8000ac8 <__aeabi_d2f>
 8001794:	4603      	mov	r3, r0
 8001796:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = (int)lat + ((lat - (int)lat)*100)/60;  // save the longitude data into the strucure
 8001798:	69b8      	ldr	r0, [r7, #24]
 800179a:	f7ff fcb9 	bl	8001110 <__aeabi_f2iz>
 800179e:	4603      	mov	r3, r0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fa9b 	bl	8000cdc <__aeabi_i2f>
 80017a6:	4604      	mov	r4, r0
 80017a8:	69b8      	ldr	r0, [r7, #24]
 80017aa:	f7ff fcb1 	bl	8001110 <__aeabi_f2iz>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fa93 	bl	8000cdc <__aeabi_i2f>
 80017b6:	4603      	mov	r3, r0
 80017b8:	4619      	mov	r1, r3
 80017ba:	69b8      	ldr	r0, [r7, #24]
 80017bc:	f7ff f9d8 	bl	8000b70 <__aeabi_fsub>
 80017c0:	4603      	mov	r3, r0
 80017c2:	4932      	ldr	r1, [pc, #200]	@ (800188c <decodeGGA+0x6c4>)
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fadd 	bl	8000d84 <__aeabi_fmul>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4930      	ldr	r1, [pc, #192]	@ (8001890 <decodeGGA+0x6c8>)
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fb8c 	bl	8000eec <__aeabi_fdiv>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4619      	mov	r1, r3
 80017d8:	4620      	mov	r0, r4
 80017da:	f7ff f9cb 	bl	8000b74 <__addsf3>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	609a      	str	r2, [r3, #8]
	inx++;
 80017e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001894 <decodeGGA+0x6cc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	3301      	adds	r3, #1
 80017ec:	4a29      	ldr	r2, [pc, #164]	@ (8001894 <decodeGGA+0x6cc>)
 80017ee:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 80017f0:	4b28      	ldr	r3, [pc, #160]	@ (8001894 <decodeGGA+0x6cc>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	781a      	ldrb	r2, [r3, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
		inx++;   // ',' after E/W
 8001800:	4b24      	ldr	r3, [pc, #144]	@ (8001894 <decodeGGA+0x6cc>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	4a23      	ldr	r2, [pc, #140]	@ (8001894 <decodeGGA+0x6cc>)
 8001808:	6013      	str	r3, [r2, #0]
		memset(buffer, '\0', 12);
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	220c      	movs	r2, #12
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f006 f97d 	bl	8007b12 <memset>
		i=0;
 8001818:	2300      	movs	r3, #0
 800181a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while (GGAbuffer[inx] != ',')
 800181c:	e013      	b.n	8001846 <decodeGGA+0x67e>
		{
			buffer[i] = GGAbuffer[inx];
 800181e:	4b1d      	ldr	r3, [pc, #116]	@ (8001894 <decodeGGA+0x6cc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4413      	add	r3, r2
 8001828:	7819      	ldrb	r1, [r3, #0]
 800182a:	f107 020c 	add.w	r2, r7, #12
 800182e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001830:	4413      	add	r3, r2
 8001832:	460a      	mov	r2, r1
 8001834:	701a      	strb	r2, [r3, #0]
			i++;
 8001836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001838:	3301      	adds	r3, #1
 800183a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			inx++;
 800183c:	4b15      	ldr	r3, [pc, #84]	@ (8001894 <decodeGGA+0x6cc>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	3301      	adds	r3, #1
 8001842:	4a14      	ldr	r2, [pc, #80]	@ (8001894 <decodeGGA+0x6cc>)
 8001844:	6013      	str	r3, [r2, #0]
		while (GGAbuffer[inx] != ',')
 8001846:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <decodeGGA+0x6cc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4413      	add	r3, r2
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b2c      	cmp	r3, #44	@ 0x2c
 8001854:	d1e3      	bne.n	800181e <decodeGGA+0x656>
		}

        posFix = 1;
 8001856:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <decodeGGA+0x6d0>)
 8001858:	2201      	movs	r2, #1
 800185a:	601a      	str	r2, [r3, #0]
        gga->fixIndicator = posFix;
 800185c:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <decodeGGA+0x6d0>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	62da      	str	r2, [r3, #44]	@ 0x2c


   // ',' after position fix;


	inx++;
 8001864:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <decodeGGA+0x6cc>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	3301      	adds	r3, #1
 800186a:	4a0a      	ldr	r2, [pc, #40]	@ (8001894 <decodeGGA+0x6cc>)
 800186c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	220c      	movs	r2, #12
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f006 f94b 	bl	8007b12 <memset>
	i=0;
 800187c:	2300      	movs	r3, #0
 800187e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')
 8001880:	e020      	b.n	80018c4 <decodeGGA+0x6fc>
 8001882:	bf00      	nop
 8001884:	40590000 	.word	0x40590000
 8001888:	40240000 	.word	0x40240000
 800188c:	42c80000 	.word	0x42c80000
 8001890:	42700000 	.word	0x42700000
 8001894:	2000021c 	.word	0x2000021c
 8001898:	20000228 	.word	0x20000228
	{
		buffer[i] = GGAbuffer[inx];
 800189c:	4b78      	ldr	r3, [pc, #480]	@ (8001a80 <decodeGGA+0x8b8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	7819      	ldrb	r1, [r3, #0]
 80018a8:	f107 020c 	add.w	r2, r7, #12
 80018ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ae:	4413      	add	r3, r2
 80018b0:	460a      	mov	r2, r1
 80018b2:	701a      	strb	r2, [r3, #0]
		i++;
 80018b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b6:	3301      	adds	r3, #1
 80018b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 80018ba:	4b71      	ldr	r3, [pc, #452]	@ (8001a80 <decodeGGA+0x8b8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	3301      	adds	r3, #1
 80018c0:	4a6f      	ldr	r2, [pc, #444]	@ (8001a80 <decodeGGA+0x8b8>)
 80018c2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80018c4:	4b6e      	ldr	r3, [pc, #440]	@ (8001a80 <decodeGGA+0x8b8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b2c      	cmp	r3, #44	@ 0x2c
 80018d2:	d1e3      	bne.n	800189c <decodeGGA+0x6d4>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	4618      	mov	r0, r3
 80018da:	f004 faf2 	bl	8005ec2 <atoi>
 80018de:	4602      	mov	r2, r0
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	629a      	str	r2, [r3, #40]	@ 0x28



		inx++;
 80018e4:	4b66      	ldr	r3, [pc, #408]	@ (8001a80 <decodeGGA+0x8b8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	3301      	adds	r3, #1
 80018ea:	4a65      	ldr	r2, [pc, #404]	@ (8001a80 <decodeGGA+0x8b8>)
 80018ec:	6013      	str	r3, [r2, #0]
		memset(buffer, '\0', 12);
 80018ee:	f107 030c 	add.w	r3, r7, #12
 80018f2:	220c      	movs	r2, #12
 80018f4:	2100      	movs	r1, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f006 f90b 	bl	8007b12 <memset>
		i=0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while (GGAbuffer[inx] != ',')
 8001900:	e013      	b.n	800192a <decodeGGA+0x762>
		{
			buffer[i] = GGAbuffer[inx];
 8001902:	4b5f      	ldr	r3, [pc, #380]	@ (8001a80 <decodeGGA+0x8b8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4413      	add	r3, r2
 800190c:	7819      	ldrb	r1, [r3, #0]
 800190e:	f107 020c 	add.w	r2, r7, #12
 8001912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001914:	4413      	add	r3, r2
 8001916:	460a      	mov	r2, r1
 8001918:	701a      	strb	r2, [r3, #0]
			i++;
 800191a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800191c:	3301      	adds	r3, #1
 800191e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			inx++;
 8001920:	4b57      	ldr	r3, [pc, #348]	@ (8001a80 <decodeGGA+0x8b8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	3301      	adds	r3, #1
 8001926:	4a56      	ldr	r2, [pc, #344]	@ (8001a80 <decodeGGA+0x8b8>)
 8001928:	6013      	str	r3, [r2, #0]
		while (GGAbuffer[inx] != ',')
 800192a:	4b55      	ldr	r3, [pc, #340]	@ (8001a80 <decodeGGA+0x8b8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4413      	add	r3, r2
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b2c      	cmp	r3, #44	@ 0x2c
 8001938:	d1e3      	bne.n	8001902 <decodeGGA+0x73a>
		}
		gga->HDOP = (atof(buffer));   // convert the buffer to number and save into the structure
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	4618      	mov	r0, r3
 8001940:	f004 fabc 	bl	8005ebc <atof>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	f7ff f8bc 	bl	8000ac8 <__aeabi_d2f>
 8001950:	4602      	mov	r2, r0
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	631a      	str	r2, [r3, #48]	@ 0x30

	/*************** Altitude calculation ********************/
	inx++;
 8001956:	4b4a      	ldr	r3, [pc, #296]	@ (8001a80 <decodeGGA+0x8b8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	3301      	adds	r3, #1
 800195c:	4a48      	ldr	r2, [pc, #288]	@ (8001a80 <decodeGGA+0x8b8>)
 800195e:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001960:	f107 030c 	add.w	r3, r7, #12
 8001964:	220c      	movs	r2, #12
 8001966:	2100      	movs	r1, #0
 8001968:	4618      	mov	r0, r3
 800196a:	f006 f8d2 	bl	8007b12 <memset>
	i=0;
 800196e:	2300      	movs	r3, #0
 8001970:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')
 8001972:	e013      	b.n	800199c <decodeGGA+0x7d4>
	{
		buffer[i] = GGAbuffer[inx];
 8001974:	4b42      	ldr	r3, [pc, #264]	@ (8001a80 <decodeGGA+0x8b8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	7819      	ldrb	r1, [r3, #0]
 8001980:	f107 020c 	add.w	r2, r7, #12
 8001984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001986:	4413      	add	r3, r2
 8001988:	460a      	mov	r2, r1
 800198a:	701a      	strb	r2, [r3, #0]
		i++;
 800198c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800198e:	3301      	adds	r3, #1
 8001990:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8001992:	4b3b      	ldr	r3, [pc, #236]	@ (8001a80 <decodeGGA+0x8b8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	3301      	adds	r3, #1
 8001998:	4a39      	ldr	r2, [pc, #228]	@ (8001a80 <decodeGGA+0x8b8>)
 800199a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 800199c:	4b38      	ldr	r3, [pc, #224]	@ (8001a80 <decodeGGA+0x8b8>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b2c      	cmp	r3, #44	@ 0x2c
 80019aa:	d1e3      	bne.n	8001974 <decodeGGA+0x7ac>
	}
	num = (atoi(buffer));
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	4618      	mov	r0, r3
 80019b2:	f004 fa86 	bl	8005ec2 <atoi>
 80019b6:	4603      	mov	r3, r0
 80019b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
	j = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;
 80019be:	e002      	b.n	80019c6 <decodeGGA+0x7fe>
 80019c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019c2:	3301      	adds	r3, #1
 80019c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019c6:	f107 020c 	add.w	r2, r7, #12
 80019ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019cc:	4413      	add	r3, r2
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80019d2:	d1f5      	bne.n	80019c0 <decodeGGA+0x7f8>
	j++;
 80019d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019d6:	3301      	adds	r3, #1
 80019d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	declen = (strlen(buffer))-j;
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fbb6 	bl	8000150 <strlen>
 80019e4:	4602      	mov	r2, r0
 80019e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 80019ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ee:	f107 020c 	add.w	r2, r7, #12
 80019f2:	4413      	add	r3, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f004 fa64 	bl	8005ec2 <atoi>
 80019fa:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 80019fc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fcff 	bl	8000404 <__aeabi_i2d>
 8001a06:	4604      	mov	r4, r0
 8001a08:	460d      	mov	r5, r1
 8001a0a:	69f8      	ldr	r0, [r7, #28]
 8001a0c:	f7fe fcfa 	bl	8000404 <__aeabi_i2d>
 8001a10:	4680      	mov	r8, r0
 8001a12:	4689      	mov	r9, r1
 8001a14:	6a38      	ldr	r0, [r7, #32]
 8001a16:	f7fe fcf5 	bl	8000404 <__aeabi_i2d>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	f04f 0000 	mov.w	r0, #0
 8001a22:	4918      	ldr	r1, [pc, #96]	@ (8001a84 <decodeGGA+0x8bc>)
 8001a24:	f008 fdc2 	bl	800a5ac <pow>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4640      	mov	r0, r8
 8001a2e:	4649      	mov	r1, r9
 8001a30:	f7fe fe7c 	bl	800072c <__aeabi_ddiv>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4620      	mov	r0, r4
 8001a3a:	4629      	mov	r1, r5
 8001a3c:	f7fe fb96 	bl	800016c <__adddf3>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	f7ff f83e 	bl	8000ac8 <__aeabi_d2f>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	621a      	str	r2, [r3, #32]

	inx++;
 8001a56:	4b0a      	ldr	r3, [pc, #40]	@ (8001a80 <decodeGGA+0x8b8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	4a08      	ldr	r2, [pc, #32]	@ (8001a80 <decodeGGA+0x8b8>)
 8001a5e:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8001a60:	4b07      	ldr	r3, [pc, #28]	@ (8001a80 <decodeGGA+0x8b8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	781a      	ldrb	r2, [r3, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	return 0;
 8001a72:	2300      	movs	r3, #0

}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3730      	adds	r7, #48	@ 0x30
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a7e:	bf00      	nop
 8001a80:	2000021c 	.word	0x2000021c
 8001a84:	40240000 	.word	0x40240000

08001a88 <accurateSignal>:

int accurateSignal(GGASTRUCT *ggagps){
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

	if(ggagps->fixIndicator == 0)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <accurateSignal+0x14>
	{
		return 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e3c9      	b.n	8002230 <accurateSignal+0x7a8>
	}
	if(ggagps->fixIndicator != 0)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 83c5 	beq.w	8002230 <accurateSignal+0x7a8>
	{if((ggagps->numofsat>=3)&&(ggagps->numofsat<5))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	f340 809a 	ble.w	8001be4 <accurateSignal+0x15c>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	f300 8095 	bgt.w	8001be4 <accurateSignal+0x15c>
    {
        if(ggagps->HDOP > 7.0) return 1;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	4999      	ldr	r1, [pc, #612]	@ (8001d24 <accurateSignal+0x29c>)
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fb1b 	bl	80010fc <__aeabi_fcmpgt>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <accurateSignal+0x48>
 8001acc:	2301      	movs	r3, #1
 8001ace:	e3af      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP <= 7.0)&&(ggagps->HDOP >= 6.0)) return 1;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad4:	4993      	ldr	r1, [pc, #588]	@ (8001d24 <accurateSignal+0x29c>)
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fafc 	bl	80010d4 <__aeabi_fcmple>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00a      	beq.n	8001af8 <accurateSignal+0x70>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	4990      	ldr	r1, [pc, #576]	@ (8001d28 <accurateSignal+0x2a0>)
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fafd 	bl	80010e8 <__aeabi_fcmpge>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <accurateSignal+0x70>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e39b      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 6.0)&&(ggagps->HDOP >= 5.0)) return 1;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afc:	498a      	ldr	r1, [pc, #552]	@ (8001d28 <accurateSignal+0x2a0>)
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fade 	bl	80010c0 <__aeabi_fcmplt>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00a      	beq.n	8001b20 <accurateSignal+0x98>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	4987      	ldr	r1, [pc, #540]	@ (8001d2c <accurateSignal+0x2a4>)
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fae9 	bl	80010e8 <__aeabi_fcmpge>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <accurateSignal+0x98>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e387      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 5.0)&&(ggagps->HDOP >= 4.0)) return 1;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b24:	4981      	ldr	r1, [pc, #516]	@ (8001d2c <accurateSignal+0x2a4>)
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff faca 	bl	80010c0 <__aeabi_fcmplt>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00b      	beq.n	8001b4a <accurateSignal+0xc2>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fad4 	bl	80010e8 <__aeabi_fcmpge>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <accurateSignal+0xc2>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e372      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 4.0)&&(ggagps->HDOP >= 3.0)) return 1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fab4 	bl	80010c0 <__aeabi_fcmplt>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00a      	beq.n	8001b74 <accurateSignal+0xec>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	4973      	ldr	r1, [pc, #460]	@ (8001d30 <accurateSignal+0x2a8>)
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fabf 	bl	80010e8 <__aeabi_fcmpge>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <accurateSignal+0xec>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e35d      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 3.0)&&(ggagps->HDOP >= 2.0)) return 1;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b78:	496d      	ldr	r1, [pc, #436]	@ (8001d30 <accurateSignal+0x2a8>)
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff faa0 	bl	80010c0 <__aeabi_fcmplt>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00b      	beq.n	8001b9e <accurateSignal+0x116>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff faaa 	bl	80010e8 <__aeabi_fcmpge>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <accurateSignal+0x116>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e348      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 2.0)&&(ggagps->HDOP >= 1.0)) return 2;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fa8a 	bl	80010c0 <__aeabi_fcmplt>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00b      	beq.n	8001bca <accurateSignal+0x142>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fa94 	bl	80010e8 <__aeabi_fcmpge>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <accurateSignal+0x142>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e332      	b.n	8002230 <accurateSignal+0x7a8>
        else if(ggagps->HDOP < 1.0) return 2;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fa74 	bl	80010c0 <__aeabi_fcmplt>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d100      	bne.n	8001be0 <accurateSignal+0x158>
        if(ggagps->HDOP > 7.0) return 1;
 8001bde:	e327      	b.n	8002230 <accurateSignal+0x7a8>
        else if(ggagps->HDOP < 1.0) return 2;
 8001be0:	2302      	movs	r3, #2
 8001be2:	e325      	b.n	8002230 <accurateSignal+0x7a8>
    }
    else if((ggagps->numofsat>=5)&&(ggagps->numofsat<7))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	f340 80a3 	ble.w	8001d34 <accurateSignal+0x2ac>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	f300 809e 	bgt.w	8001d34 <accurateSignal+0x2ac>
    {
        if(ggagps->HDOP > 7.0) return 2;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfc:	4949      	ldr	r1, [pc, #292]	@ (8001d24 <accurateSignal+0x29c>)
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fa7c 	bl	80010fc <__aeabi_fcmpgt>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <accurateSignal+0x186>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e310      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP <= 7.0)&&(ggagps->HDOP >= 6.0)) return 2;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	4944      	ldr	r1, [pc, #272]	@ (8001d24 <accurateSignal+0x29c>)
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fa5d 	bl	80010d4 <__aeabi_fcmple>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00a      	beq.n	8001c36 <accurateSignal+0x1ae>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c24:	4940      	ldr	r1, [pc, #256]	@ (8001d28 <accurateSignal+0x2a0>)
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fa5e 	bl	80010e8 <__aeabi_fcmpge>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <accurateSignal+0x1ae>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e2fc      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 6.0)&&(ggagps->HDOP >= 5.0)) return 2;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	493b      	ldr	r1, [pc, #236]	@ (8001d28 <accurateSignal+0x2a0>)
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff fa3f 	bl	80010c0 <__aeabi_fcmplt>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00a      	beq.n	8001c5e <accurateSignal+0x1d6>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4c:	4937      	ldr	r1, [pc, #220]	@ (8001d2c <accurateSignal+0x2a4>)
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff fa4a 	bl	80010e8 <__aeabi_fcmpge>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <accurateSignal+0x1d6>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e2e8      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 5.0)&&(ggagps->HDOP >= 4.0)) return 2;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	4932      	ldr	r1, [pc, #200]	@ (8001d2c <accurateSignal+0x2a4>)
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fa2b 	bl	80010c0 <__aeabi_fcmplt>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00b      	beq.n	8001c88 <accurateSignal+0x200>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c74:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fa35 	bl	80010e8 <__aeabi_fcmpge>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <accurateSignal+0x200>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e2d3      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 4.0)&&(ggagps->HDOP >= 3.0)) return 2;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8c:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fa15 	bl	80010c0 <__aeabi_fcmplt>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00a      	beq.n	8001cb2 <accurateSignal+0x22a>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca0:	4923      	ldr	r1, [pc, #140]	@ (8001d30 <accurateSignal+0x2a8>)
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fa20 	bl	80010e8 <__aeabi_fcmpge>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <accurateSignal+0x22a>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e2be      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 3.0)&&(ggagps->HDOP >= 2.0)) return 2;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	491e      	ldr	r1, [pc, #120]	@ (8001d30 <accurateSignal+0x2a8>)
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fa01 	bl	80010c0 <__aeabi_fcmplt>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00b      	beq.n	8001cdc <accurateSignal+0x254>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fa0b 	bl	80010e8 <__aeabi_fcmpge>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <accurateSignal+0x254>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e2a9      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 2.0)&&(ggagps->HDOP >= 1.0)) return 3;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff f9eb 	bl	80010c0 <__aeabi_fcmplt>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00b      	beq.n	8001d08 <accurateSignal+0x280>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff f9f5 	bl	80010e8 <__aeabi_fcmpge>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <accurateSignal+0x280>
 8001d04:	2303      	movs	r3, #3
 8001d06:	e293      	b.n	8002230 <accurateSignal+0x7a8>
        else if(ggagps->HDOP < 1.0) return 3;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff f9d5 	bl	80010c0 <__aeabi_fcmplt>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d100      	bne.n	8001d1e <accurateSignal+0x296>
        if(ggagps->HDOP > 7.0) return 2;
 8001d1c:	e288      	b.n	8002230 <accurateSignal+0x7a8>
        else if(ggagps->HDOP < 1.0) return 3;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e286      	b.n	8002230 <accurateSignal+0x7a8>
 8001d22:	bf00      	nop
 8001d24:	40e00000 	.word	0x40e00000
 8001d28:	40c00000 	.word	0x40c00000
 8001d2c:	40a00000 	.word	0x40a00000
 8001d30:	40400000 	.word	0x40400000
    }

    else if((ggagps->numofsat>=7)&&(ggagps->numofsat<9))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d38:	2b06      	cmp	r3, #6
 8001d3a:	f340 809a 	ble.w	8001e72 <accurateSignal+0x3ea>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	f300 8095 	bgt.w	8001e72 <accurateSignal+0x3ea>
    {
        if(ggagps->HDOP > 7.0) return 3;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4c:	4998      	ldr	r1, [pc, #608]	@ (8001fb0 <accurateSignal+0x528>)
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff f9d4 	bl	80010fc <__aeabi_fcmpgt>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <accurateSignal+0x2d6>
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e268      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP <= 7.0)&&(ggagps->HDOP >= 6.0)) return 3;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	4993      	ldr	r1, [pc, #588]	@ (8001fb0 <accurateSignal+0x528>)
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff f9b5 	bl	80010d4 <__aeabi_fcmple>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00a      	beq.n	8001d86 <accurateSignal+0x2fe>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d74:	498f      	ldr	r1, [pc, #572]	@ (8001fb4 <accurateSignal+0x52c>)
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff f9b6 	bl	80010e8 <__aeabi_fcmpge>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <accurateSignal+0x2fe>
 8001d82:	2303      	movs	r3, #3
 8001d84:	e254      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 6.0)&&(ggagps->HDOP >= 5.0)) return 3;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	498a      	ldr	r1, [pc, #552]	@ (8001fb4 <accurateSignal+0x52c>)
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff f997 	bl	80010c0 <__aeabi_fcmplt>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00a      	beq.n	8001dae <accurateSignal+0x326>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9c:	4986      	ldr	r1, [pc, #536]	@ (8001fb8 <accurateSignal+0x530>)
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff f9a2 	bl	80010e8 <__aeabi_fcmpge>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <accurateSignal+0x326>
 8001daa:	2303      	movs	r3, #3
 8001dac:	e240      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 5.0)&&(ggagps->HDOP >= 4.0)) return 3;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	4981      	ldr	r1, [pc, #516]	@ (8001fb8 <accurateSignal+0x530>)
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff f983 	bl	80010c0 <__aeabi_fcmplt>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00b      	beq.n	8001dd8 <accurateSignal+0x350>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc4:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff f98d 	bl	80010e8 <__aeabi_fcmpge>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <accurateSignal+0x350>
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e22b      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 4.0)&&(ggagps->HDOP >= 3.0)) return 3;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ddc:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff f96d 	bl	80010c0 <__aeabi_fcmplt>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00a      	beq.n	8001e02 <accurateSignal+0x37a>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df0:	4972      	ldr	r1, [pc, #456]	@ (8001fbc <accurateSignal+0x534>)
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff f978 	bl	80010e8 <__aeabi_fcmpge>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <accurateSignal+0x37a>
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e216      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 3.0)&&(ggagps->HDOP >= 2.0)) return 3;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	496d      	ldr	r1, [pc, #436]	@ (8001fbc <accurateSignal+0x534>)
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff f959 	bl	80010c0 <__aeabi_fcmplt>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00b      	beq.n	8001e2c <accurateSignal+0x3a4>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e18:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff f963 	bl	80010e8 <__aeabi_fcmpge>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <accurateSignal+0x3a4>
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e201      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 2.0)&&(ggagps->HDOP >= 1.0)) return 4;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e30:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff f943 	bl	80010c0 <__aeabi_fcmplt>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00b      	beq.n	8001e58 <accurateSignal+0x3d0>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e44:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff f94d 	bl	80010e8 <__aeabi_fcmpge>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <accurateSignal+0x3d0>
 8001e54:	2304      	movs	r3, #4
 8001e56:	e1eb      	b.n	8002230 <accurateSignal+0x7a8>
        else if(ggagps->HDOP < 1.0) return 4;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff f92d 	bl	80010c0 <__aeabi_fcmplt>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d100      	bne.n	8001e6e <accurateSignal+0x3e6>
        if(ggagps->HDOP > 7.0) return 3;
 8001e6c:	e1e0      	b.n	8002230 <accurateSignal+0x7a8>
        else if(ggagps->HDOP < 1.0) return 4;
 8001e6e:	2304      	movs	r3, #4
 8001e70:	e1de      	b.n	8002230 <accurateSignal+0x7a8>
    }

    else if((ggagps->numofsat>=9)&&(ggagps->numofsat<11))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	f340 80a2 	ble.w	8001fc0 <accurateSignal+0x538>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e80:	2b0a      	cmp	r3, #10
 8001e82:	f300 809d 	bgt.w	8001fc0 <accurateSignal+0x538>
    {
        if(ggagps->HDOP > 7.0) return 4;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	4949      	ldr	r1, [pc, #292]	@ (8001fb0 <accurateSignal+0x528>)
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff f935 	bl	80010fc <__aeabi_fcmpgt>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <accurateSignal+0x414>
 8001e98:	2304      	movs	r3, #4
 8001e9a:	e1c9      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP <= 7.0)&&(ggagps->HDOP >= 6.0)) return 4;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea0:	4943      	ldr	r1, [pc, #268]	@ (8001fb0 <accurateSignal+0x528>)
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff f916 	bl	80010d4 <__aeabi_fcmple>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00a      	beq.n	8001ec4 <accurateSignal+0x43c>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	4940      	ldr	r1, [pc, #256]	@ (8001fb4 <accurateSignal+0x52c>)
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff f917 	bl	80010e8 <__aeabi_fcmpge>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <accurateSignal+0x43c>
 8001ec0:	2304      	movs	r3, #4
 8001ec2:	e1b5      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 6.0)&&(ggagps->HDOP >= 5.0)) return 4;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec8:	493a      	ldr	r1, [pc, #232]	@ (8001fb4 <accurateSignal+0x52c>)
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff f8f8 	bl	80010c0 <__aeabi_fcmplt>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00a      	beq.n	8001eec <accurateSignal+0x464>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eda:	4937      	ldr	r1, [pc, #220]	@ (8001fb8 <accurateSignal+0x530>)
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff f903 	bl	80010e8 <__aeabi_fcmpge>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <accurateSignal+0x464>
 8001ee8:	2304      	movs	r3, #4
 8001eea:	e1a1      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 5.0)&&(ggagps->HDOP >= 4.0)) return 4;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef0:	4931      	ldr	r1, [pc, #196]	@ (8001fb8 <accurateSignal+0x530>)
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff f8e4 	bl	80010c0 <__aeabi_fcmplt>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00b      	beq.n	8001f16 <accurateSignal+0x48e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff f8ee 	bl	80010e8 <__aeabi_fcmpge>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <accurateSignal+0x48e>
 8001f12:	2304      	movs	r3, #4
 8001f14:	e18c      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 4.0)&&(ggagps->HDOP >= 3.0)) return 4;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff f8ce 	bl	80010c0 <__aeabi_fcmplt>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00a      	beq.n	8001f40 <accurateSignal+0x4b8>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	4923      	ldr	r1, [pc, #140]	@ (8001fbc <accurateSignal+0x534>)
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f8d9 	bl	80010e8 <__aeabi_fcmpge>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <accurateSignal+0x4b8>
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	e177      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 3.0)&&(ggagps->HDOP >= 2.0)) return 4;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f44:	491d      	ldr	r1, [pc, #116]	@ (8001fbc <accurateSignal+0x534>)
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff f8ba 	bl	80010c0 <__aeabi_fcmplt>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00b      	beq.n	8001f6a <accurateSignal+0x4e2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff f8c4 	bl	80010e8 <__aeabi_fcmpge>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <accurateSignal+0x4e2>
 8001f66:	2304      	movs	r3, #4
 8001f68:	e162      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 2.0)&&(ggagps->HDOP >= 1.0)) return 5;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff f8a4 	bl	80010c0 <__aeabi_fcmplt>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00b      	beq.n	8001f96 <accurateSignal+0x50e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff f8ae 	bl	80010e8 <__aeabi_fcmpge>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <accurateSignal+0x50e>
 8001f92:	2305      	movs	r3, #5
 8001f94:	e14c      	b.n	8002230 <accurateSignal+0x7a8>
        else if(ggagps->HDOP < 1.0) return 5;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff f88e 	bl	80010c0 <__aeabi_fcmplt>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d100      	bne.n	8001fac <accurateSignal+0x524>
        if(ggagps->HDOP > 7.0) return 4;
 8001faa:	e141      	b.n	8002230 <accurateSignal+0x7a8>
        else if(ggagps->HDOP < 1.0) return 5;
 8001fac:	2305      	movs	r3, #5
 8001fae:	e13f      	b.n	8002230 <accurateSignal+0x7a8>
 8001fb0:	40e00000 	.word	0x40e00000
 8001fb4:	40c00000 	.word	0x40c00000
 8001fb8:	40a00000 	.word	0x40a00000
 8001fbc:	40400000 	.word	0x40400000
    }

    else if((ggagps->numofsat>=11)&&(ggagps->numofsat<13))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc4:	2b0a      	cmp	r3, #10
 8001fc6:	f340 809a 	ble.w	80020fe <accurateSignal+0x676>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fce:	2b0c      	cmp	r3, #12
 8001fd0:	f300 8095 	bgt.w	80020fe <accurateSignal+0x676>
    {
        if(ggagps->HDOP > 7.0) return 2;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd8:	4997      	ldr	r1, [pc, #604]	@ (8002238 <accurateSignal+0x7b0>)
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff f88e 	bl	80010fc <__aeabi_fcmpgt>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <accurateSignal+0x562>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e122      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP <= 7.0)&&(ggagps->HDOP >= 6.0)) return 5;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	4992      	ldr	r1, [pc, #584]	@ (8002238 <accurateSignal+0x7b0>)
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff f86f 	bl	80010d4 <__aeabi_fcmple>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00a      	beq.n	8002012 <accurateSignal+0x58a>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002000:	498e      	ldr	r1, [pc, #568]	@ (800223c <accurateSignal+0x7b4>)
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff f870 	bl	80010e8 <__aeabi_fcmpge>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <accurateSignal+0x58a>
 800200e:	2305      	movs	r3, #5
 8002010:	e10e      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 6.0)&&(ggagps->HDOP >= 5.0)) return 5;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	4989      	ldr	r1, [pc, #548]	@ (800223c <accurateSignal+0x7b4>)
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff f851 	bl	80010c0 <__aeabi_fcmplt>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00a      	beq.n	800203a <accurateSignal+0x5b2>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002028:	4985      	ldr	r1, [pc, #532]	@ (8002240 <accurateSignal+0x7b8>)
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff f85c 	bl	80010e8 <__aeabi_fcmpge>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <accurateSignal+0x5b2>
 8002036:	2305      	movs	r3, #5
 8002038:	e0fa      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 5.0)&&(ggagps->HDOP >= 4.0)) return 5;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	4980      	ldr	r1, [pc, #512]	@ (8002240 <accurateSignal+0x7b8>)
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff f83d 	bl	80010c0 <__aeabi_fcmplt>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00b      	beq.n	8002064 <accurateSignal+0x5dc>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002050:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff f847 	bl	80010e8 <__aeabi_fcmpge>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <accurateSignal+0x5dc>
 8002060:	2305      	movs	r3, #5
 8002062:	e0e5      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 4.0)&&(ggagps->HDOP >= 3.0)) return 5;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002068:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff f827 	bl	80010c0 <__aeabi_fcmplt>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00a      	beq.n	800208e <accurateSignal+0x606>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207c:	4971      	ldr	r1, [pc, #452]	@ (8002244 <accurateSignal+0x7bc>)
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff f832 	bl	80010e8 <__aeabi_fcmpge>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <accurateSignal+0x606>
 800208a:	2305      	movs	r3, #5
 800208c:	e0d0      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 3.0)&&(ggagps->HDOP >= 2.0)) return 5;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002092:	496c      	ldr	r1, [pc, #432]	@ (8002244 <accurateSignal+0x7bc>)
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff f813 	bl	80010c0 <__aeabi_fcmplt>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00b      	beq.n	80020b8 <accurateSignal+0x630>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff f81d 	bl	80010e8 <__aeabi_fcmpge>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <accurateSignal+0x630>
 80020b4:	2305      	movs	r3, #5
 80020b6:	e0bb      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 2.0)&&(ggagps->HDOP >= 1.0)) return 6;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020bc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fffd 	bl	80010c0 <__aeabi_fcmplt>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00b      	beq.n	80020e4 <accurateSignal+0x65c>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff f807 	bl	80010e8 <__aeabi_fcmpge>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <accurateSignal+0x65c>
 80020e0:	2306      	movs	r3, #6
 80020e2:	e0a5      	b.n	8002230 <accurateSignal+0x7a8>
        else if(ggagps->HDOP < 1.0) return 6;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe ffe7 	bl	80010c0 <__aeabi_fcmplt>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d100      	bne.n	80020fa <accurateSignal+0x672>
        if(ggagps->HDOP > 7.0) return 2;
 80020f8:	e09a      	b.n	8002230 <accurateSignal+0x7a8>
        else if(ggagps->HDOP < 1.0) return 6;
 80020fa:	2306      	movs	r3, #6
 80020fc:	e098      	b.n	8002230 <accurateSignal+0x7a8>
    }

    else if(ggagps->numofsat>= 13)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002102:	2b0c      	cmp	r3, #12
 8002104:	f340 8094 	ble.w	8002230 <accurateSignal+0x7a8>
    {
        if(ggagps->HDOP > 7.0) return 6;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210c:	494a      	ldr	r1, [pc, #296]	@ (8002238 <accurateSignal+0x7b0>)
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fff4 	bl	80010fc <__aeabi_fcmpgt>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <accurateSignal+0x696>
 800211a:	2306      	movs	r3, #6
 800211c:	e088      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP <= 7.0)&&(ggagps->HDOP >= 6.0)) return 6;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	4945      	ldr	r1, [pc, #276]	@ (8002238 <accurateSignal+0x7b0>)
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe ffd5 	bl	80010d4 <__aeabi_fcmple>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00a      	beq.n	8002146 <accurateSignal+0x6be>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002134:	4941      	ldr	r1, [pc, #260]	@ (800223c <accurateSignal+0x7b4>)
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe ffd6 	bl	80010e8 <__aeabi_fcmpge>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <accurateSignal+0x6be>
 8002142:	2306      	movs	r3, #6
 8002144:	e074      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 6.0)&&(ggagps->HDOP >= 5.0)) return 6;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	493c      	ldr	r1, [pc, #240]	@ (800223c <accurateSignal+0x7b4>)
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe ffb7 	bl	80010c0 <__aeabi_fcmplt>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00a      	beq.n	800216e <accurateSignal+0x6e6>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215c:	4938      	ldr	r1, [pc, #224]	@ (8002240 <accurateSignal+0x7b8>)
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe ffc2 	bl	80010e8 <__aeabi_fcmpge>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <accurateSignal+0x6e6>
 800216a:	2306      	movs	r3, #6
 800216c:	e060      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 5.0)&&(ggagps->HDOP >= 4.0)) return 6;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	4933      	ldr	r1, [pc, #204]	@ (8002240 <accurateSignal+0x7b8>)
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe ffa3 	bl	80010c0 <__aeabi_fcmplt>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00b      	beq.n	8002198 <accurateSignal+0x710>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002184:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe ffad 	bl	80010e8 <__aeabi_fcmpge>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <accurateSignal+0x710>
 8002194:	2306      	movs	r3, #6
 8002196:	e04b      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 4.0)&&(ggagps->HDOP >= 3.0)) return 7;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219c:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe ff8d 	bl	80010c0 <__aeabi_fcmplt>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00a      	beq.n	80021c2 <accurateSignal+0x73a>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b0:	4924      	ldr	r1, [pc, #144]	@ (8002244 <accurateSignal+0x7bc>)
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe ff98 	bl	80010e8 <__aeabi_fcmpge>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <accurateSignal+0x73a>
 80021be:	2307      	movs	r3, #7
 80021c0:	e036      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 3.0)&&(ggagps->HDOP >= 2.0)) return 7;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	491f      	ldr	r1, [pc, #124]	@ (8002244 <accurateSignal+0x7bc>)
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fe ff79 	bl	80010c0 <__aeabi_fcmplt>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00b      	beq.n	80021ec <accurateSignal+0x764>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe ff83 	bl	80010e8 <__aeabi_fcmpge>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <accurateSignal+0x764>
 80021e8:	2307      	movs	r3, #7
 80021ea:	e021      	b.n	8002230 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 2.0)&&(ggagps->HDOP >= 1.0)) return 7;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe ff63 	bl	80010c0 <__aeabi_fcmplt>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00b      	beq.n	8002218 <accurateSignal+0x790>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002204:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe ff6d 	bl	80010e8 <__aeabi_fcmpge>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <accurateSignal+0x790>
 8002214:	2307      	movs	r3, #7
 8002216:	e00b      	b.n	8002230 <accurateSignal+0x7a8>
        else if(ggagps->HDOP < 1.0) return 8;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe ff4d 	bl	80010c0 <__aeabi_fcmplt>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <accurateSignal+0x7a8>
 800222c:	2308      	movs	r3, #8
 800222e:	e7ff      	b.n	8002230 <accurateSignal+0x7a8>
    }
	}
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40e00000 	.word	0x40e00000
 800223c:	40c00000 	.word	0x40c00000
 8002240:	40a00000 	.word	0x40a00000
 8002244:	40400000 	.word	0x40400000

08002248 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af02      	add	r7, sp, #8
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	f023 030f 	bic.w	r3, r3, #15
 8002258:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	f043 030c 	orr.w	r3, r3, #12
 8002266:	b2db      	uxtb	r3, r3
 8002268:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	f043 0308 	orr.w	r3, r3, #8
 8002270:	b2db      	uxtb	r3, r3
 8002272:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8002274:	7bbb      	ldrb	r3, [r7, #14]
 8002276:	f043 030c 	orr.w	r3, r3, #12
 800227a:	b2db      	uxtb	r3, r3
 800227c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800227e:	7bbb      	ldrb	r3, [r7, #14]
 8002280:	f043 0308 	orr.w	r3, r3, #8
 8002284:	b2db      	uxtb	r3, r3
 8002286:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002288:	f107 0208 	add.w	r2, r7, #8
 800228c:	2364      	movs	r3, #100	@ 0x64
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	2304      	movs	r3, #4
 8002292:	214e      	movs	r1, #78	@ 0x4e
 8002294:	4803      	ldr	r0, [pc, #12]	@ (80022a4 <lcd_send_cmd+0x5c>)
 8002296:	f001 ff57 	bl	8004148 <HAL_I2C_Master_Transmit>
}
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000bc8 	.word	0x20000bc8

080022a8 <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80022ac:	2032      	movs	r0, #50	@ 0x32
 80022ae:	f001 fa9f 	bl	80037f0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80022b2:	2030      	movs	r0, #48	@ 0x30
 80022b4:	f7ff ffc8 	bl	8002248 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80022b8:	2005      	movs	r0, #5
 80022ba:	f001 fa99 	bl	80037f0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80022be:	2030      	movs	r0, #48	@ 0x30
 80022c0:	f7ff ffc2 	bl	8002248 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80022c4:	2001      	movs	r0, #1
 80022c6:	f001 fa93 	bl	80037f0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80022ca:	2030      	movs	r0, #48	@ 0x30
 80022cc:	f7ff ffbc 	bl	8002248 <lcd_send_cmd>
	HAL_Delay(10);
 80022d0:	200a      	movs	r0, #10
 80022d2:	f001 fa8d 	bl	80037f0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80022d6:	2020      	movs	r0, #32
 80022d8:	f7ff ffb6 	bl	8002248 <lcd_send_cmd>
	HAL_Delay(10);
 80022dc:	200a      	movs	r0, #10
 80022de:	f001 fa87 	bl	80037f0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80022e2:	2028      	movs	r0, #40	@ 0x28
 80022e4:	f7ff ffb0 	bl	8002248 <lcd_send_cmd>
	HAL_Delay(1);
 80022e8:	2001      	movs	r0, #1
 80022ea:	f001 fa81 	bl	80037f0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80022ee:	2008      	movs	r0, #8
 80022f0:	f7ff ffaa 	bl	8002248 <lcd_send_cmd>
	HAL_Delay(1);
 80022f4:	2001      	movs	r0, #1
 80022f6:	f001 fa7b 	bl	80037f0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80022fa:	2001      	movs	r0, #1
 80022fc:	f7ff ffa4 	bl	8002248 <lcd_send_cmd>
	HAL_Delay(1);
 8002300:	2001      	movs	r0, #1
 8002302:	f001 fa75 	bl	80037f0 <HAL_Delay>
	HAL_Delay(1);
 8002306:	2001      	movs	r0, #1
 8002308:	f001 fa72 	bl	80037f0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800230c:	2006      	movs	r0, #6
 800230e:	f7ff ff9b 	bl	8002248 <lcd_send_cmd>
	HAL_Delay(1);
 8002312:	2001      	movs	r0, #1
 8002314:	f001 fa6c 	bl	80037f0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8002318:	200c      	movs	r0, #12
 800231a:	f7ff ff95 	bl	8002248 <lcd_send_cmd>
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <sendRequestToEsp32>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void sendRequestToEsp32(UART_HandleTypeDef *huart, char deviceId[],
		char longitudeVal[], char latitudeVal[], uint8_t accuracyVal) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b0ac      	sub	sp, #176	@ 0xb0
 8002328:	af02      	add	r7, sp, #8
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	603b      	str	r3, [r7, #0]
	char requestBody[150] = { 0 };
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	2292      	movs	r2, #146	@ 0x92
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f005 fbe7 	bl	8007b12 <memset>
	char accuracyToChar = accuracyVal + '0';
 8002344:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 8002348:	3330      	adds	r3, #48	@ 0x30
 800234a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	if (longitudeVal[0] != 0 && latitudeVal[0] != 0 && accuracyVal > 0) {
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d013      	beq.n	800237e <sendRequestToEsp32+0x5a>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00f      	beq.n	800237e <sendRequestToEsp32+0x5a>
 800235e:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00b      	beq.n	800237e <sendRequestToEsp32+0x5a>
		sprintf(requestBody,
 8002366:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 800236a:	f107 0010 	add.w	r0, r7, #16
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	4906      	ldr	r1, [pc, #24]	@ (8002394 <sendRequestToEsp32+0x70>)
 800237a:	f005 fb67 	bl	8007a4c <siprintf>
				"{\"deviceId\": \"%s\", \"longitude\": \"%s\", \"latitude\": \"%s\", \"accuracy\": %d}",
				deviceId, longitudeVal, latitudeVal, accuracyVal);
	}
	HAL_UART_Transmit(huart, requestBody, 150, 100);
 800237e:	f107 0110 	add.w	r1, r7, #16
 8002382:	2364      	movs	r3, #100	@ 0x64
 8002384:	2296      	movs	r2, #150	@ 0x96
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f002 ffc4 	bl	8005314 <HAL_UART_Transmit>
}
 800238c:	bf00      	nop
 800238e:	37a8      	adds	r7, #168	@ 0xa8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	0800b3e0 	.word	0x0800b3e0

08002398 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800239e:	f001 f9c5 	bl	800372c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80023a2:	f000 f8fd 	bl	80025a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80023a6:	f000 f9c3 	bl	8002730 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80023aa:	f000 f96d 	bl	8002688 <MX_USART1_UART_Init>
	MX_I2C1_Init();
 80023ae:	f000 f93d 	bl	800262c <MX_I2C1_Init>
	MX_USART2_UART_Init();
 80023b2:	f000 f993 	bl	80026dc <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	lcd_init();
 80023b6:	f7ff ff77 	bl	80022a8 <lcd_init>
	MPU6050_Init();
 80023ba:	f000 f9ed 	bl	8002798 <MPU6050_Init>
	Ringbuf_init();
 80023be:	f000 ff7f 	bl	80032c0 <Ringbuf_init>
	HAL_Delay(500);
 80023c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80023c6:	f001 fa13 	bl	80037f0 <HAL_Delay>

	SSD1306_Init();
 80023ca:	f000 fa81 	bl	80028d0 <SSD1306_Init>
	char snum[5];

	SSD1306_GotoXY(0, 0);
 80023ce:	2100      	movs	r1, #0
 80023d0:	2000      	movs	r0, #0
 80023d2:	f000 fbe5 	bl	8002ba0 <SSD1306_GotoXY>
	SSD1306_Puts("test", &Font_11x18, 1);
 80023d6:	2201      	movs	r2, #1
 80023d8:	495f      	ldr	r1, [pc, #380]	@ (8002558 <main+0x1c0>)
 80023da:	4860      	ldr	r0, [pc, #384]	@ (800255c <main+0x1c4>)
 80023dc:	f000 fc74 	bl	8002cc8 <SSD1306_Puts>
	SSD1306_GotoXY(0, 15);
 80023e0:	210f      	movs	r1, #15
 80023e2:	2000      	movs	r0, #0
 80023e4:	f000 fbdc 	bl	8002ba0 <SSD1306_GotoXY>
	SSD1306_Puts("GPS MODULE", &Font_11x18, 1);
 80023e8:	2201      	movs	r2, #1
 80023ea:	495b      	ldr	r1, [pc, #364]	@ (8002558 <main+0x1c0>)
 80023ec:	485c      	ldr	r0, [pc, #368]	@ (8002560 <main+0x1c8>)
 80023ee:	f000 fc6b 	bl	8002cc8 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80023f2:	f000 fb31 	bl	8002a58 <SSD1306_UpdateScreen>
	HAL_Delay(1000);
 80023f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023fa:	f001 f9f9 	bl	80037f0 <HAL_Delay>

	SSD1306_ScrollRight(0, 7);
 80023fe:	2107      	movs	r1, #7
 8002400:	2000      	movs	r0, #0
 8002402:	f000 f9ef 	bl	80027e4 <SSD1306_ScrollRight>
	HAL_Delay(3000);
 8002406:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800240a:	f001 f9f1 	bl	80037f0 <HAL_Delay>
	SSD1306_ScrollLeft(0, 7);
 800240e:	2107      	movs	r1, #7
 8002410:	2000      	movs	r0, #0
 8002412:	f000 fa1d 	bl	8002850 <SSD1306_ScrollLeft>
	HAL_Delay(3000);
 8002416:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800241a:	f001 f9e9 	bl	80037f0 <HAL_Delay>
	SSD1306_Stopscroll();
 800241e:	f000 fa4d 	bl	80028bc <SSD1306_Stopscroll>
	SSD1306_Clear();
 8002422:	f000 fc76 	bl	8002d12 <SSD1306_Clear>
	SSD1306_GotoXY(35, 0);
 8002426:	2100      	movs	r1, #0
 8002428:	2023      	movs	r0, #35	@ 0x23
 800242a:	f000 fbb9 	bl	8002ba0 <SSD1306_GotoXY>
	SSD1306_Puts("INF", &Font_7x10, 1);
 800242e:	2201      	movs	r2, #1
 8002430:	494c      	ldr	r1, [pc, #304]	@ (8002564 <main+0x1cc>)
 8002432:	484d      	ldr	r0, [pc, #308]	@ (8002568 <main+0x1d0>)
 8002434:	f000 fc48 	bl	8002cc8 <SSD1306_Puts>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (Wait_for("GGA") == 1) {
 8002438:	484c      	ldr	r0, [pc, #304]	@ (800256c <main+0x1d4>)
 800243a:	f001 f86b 	bl	8003514 <Wait_for>
 800243e:	4603      	mov	r3, r0
 8002440:	2b01      	cmp	r3, #1
 8002442:	d169      	bne.n	8002518 <main+0x180>

			//VCCTimeout = 5000;  //

			Copy_upto("*", GGA);
 8002444:	494a      	ldr	r1, [pc, #296]	@ (8002570 <main+0x1d8>)
 8002446:	484b      	ldr	r0, [pc, #300]	@ (8002574 <main+0x1dc>)
 8002448:	f000 ffe4 	bl	8003414 <Copy_upto>
			decodeGGA(GGA, &gpsData.ggastruct);
 800244c:	494a      	ldr	r1, [pc, #296]	@ (8002578 <main+0x1e0>)
 800244e:	4848      	ldr	r0, [pc, #288]	@ (8002570 <main+0x1d8>)
 8002450:	f7fe feba 	bl	80011c8 <decodeGGA>
			signalAccurate = accurateSignal(&gpsData.ggastruct);
 8002454:	4848      	ldr	r0, [pc, #288]	@ (8002578 <main+0x1e0>)
 8002456:	f7ff fb17 	bl	8001a88 <accurateSignal>
 800245a:	4603      	mov	r3, r0
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4b47      	ldr	r3, [pc, #284]	@ (800257c <main+0x1e4>)
 8002460:	701a      	strb	r2, [r3, #0]

			sprintf(longitude, "%4.4f", gpsData.ggastruct.lcation.longitude);
 8002462:	4b45      	ldr	r3, [pc, #276]	@ (8002578 <main+0x1e0>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	4618      	mov	r0, r3
 8002468:	f7fd ffde 	bl	8000428 <__aeabi_f2d>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4943      	ldr	r1, [pc, #268]	@ (8002580 <main+0x1e8>)
 8002472:	4844      	ldr	r0, [pc, #272]	@ (8002584 <main+0x1ec>)
 8002474:	f005 faea 	bl	8007a4c <siprintf>
			sprintf(latitude, "%f", gpsData.ggastruct.lcation.latitude);
 8002478:	4b3f      	ldr	r3, [pc, #252]	@ (8002578 <main+0x1e0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f7fd ffd3 	bl	8000428 <__aeabi_f2d>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4940      	ldr	r1, [pc, #256]	@ (8002588 <main+0x1f0>)
 8002488:	4840      	ldr	r0, [pc, #256]	@ (800258c <main+0x1f4>)
 800248a:	f005 fadf 	bl	8007a4c <siprintf>
			if (gpsData.ggastruct.lcation.latitude - previous_latitude >= 0.0001
 800248e:	4b3a      	ldr	r3, [pc, #232]	@ (8002578 <main+0x1e0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a3f      	ldr	r2, [pc, #252]	@ (8002590 <main+0x1f8>)
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	4611      	mov	r1, r2
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe fb69 	bl	8000b70 <__aeabi_fsub>
 800249e:	4603      	mov	r3, r0
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fd ffc1 	bl	8000428 <__aeabi_f2d>
 80024a6:	a32a      	add	r3, pc, #168	@ (adr r3, 8002550 <main+0x1b8>)
 80024a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ac:	f7fe fa9a 	bl	80009e4 <__aeabi_dcmpge>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d113      	bne.n	80024de <main+0x146>
					|| gpsData.ggastruct.lcation.longitude - previous_longitude
 80024b6:	4b30      	ldr	r3, [pc, #192]	@ (8002578 <main+0x1e0>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	4a36      	ldr	r2, [pc, #216]	@ (8002594 <main+0x1fc>)
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	4611      	mov	r1, r2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe fb55 	bl	8000b70 <__aeabi_fsub>
 80024c6:	4603      	mov	r3, r0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fd ffad 	bl	8000428 <__aeabi_f2d>
 80024ce:	a320      	add	r3, pc, #128	@ (adr r3, 8002550 <main+0x1b8>)
 80024d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d4:	f7fe fa86 	bl	80009e4 <__aeabi_dcmpge>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d01c      	beq.n	8002518 <main+0x180>
							>= 0.0001) {

				sendRequestToEsp32(&huart2, "test", longitude, latitude,
 80024de:	4b27      	ldr	r3, [pc, #156]	@ (800257c <main+0x1e4>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	4b29      	ldr	r3, [pc, #164]	@ (800258c <main+0x1f4>)
 80024e6:	4a27      	ldr	r2, [pc, #156]	@ (8002584 <main+0x1ec>)
 80024e8:	491c      	ldr	r1, [pc, #112]	@ (800255c <main+0x1c4>)
 80024ea:	482b      	ldr	r0, [pc, #172]	@ (8002598 <main+0x200>)
 80024ec:	f7ff ff1a 	bl	8002324 <sendRequestToEsp32>
						signalAccurate);

				//if (decodeGGA(GGA, &gpsData.ggastruct) == 0) flagGGA = 2;  // 2 indicates the data is valid
				//else flagGGA = 1;  // 1 indicates the data is invalid
				SSD1306_GotoXY(0, 0);
 80024f0:	2100      	movs	r1, #0
 80024f2:	2000      	movs	r0, #0
 80024f4:	f000 fb54 	bl	8002ba0 <SSD1306_GotoXY>
				SSD1306_Puts(longitude, &Font_7x10, 1);
 80024f8:	2201      	movs	r2, #1
 80024fa:	491a      	ldr	r1, [pc, #104]	@ (8002564 <main+0x1cc>)
 80024fc:	4821      	ldr	r0, [pc, #132]	@ (8002584 <main+0x1ec>)
 80024fe:	f000 fbe3 	bl	8002cc8 <SSD1306_Puts>
				SSD1306_GotoXY(0, 10);
 8002502:	210a      	movs	r1, #10
 8002504:	2000      	movs	r0, #0
 8002506:	f000 fb4b 	bl	8002ba0 <SSD1306_GotoXY>
				SSD1306_Puts(latitude, &Font_7x10, 1);
 800250a:	2201      	movs	r2, #1
 800250c:	4915      	ldr	r1, [pc, #84]	@ (8002564 <main+0x1cc>)
 800250e:	481f      	ldr	r0, [pc, #124]	@ (800258c <main+0x1f4>)
 8002510:	f000 fbda 	bl	8002cc8 <SSD1306_Puts>
				SSD1306_UpdateScreen();
 8002514:	f000 faa0 	bl	8002a58 <SSD1306_UpdateScreen>
			}

		}
		if (HAL_GetTick() - time >= 6000) {
 8002518:	f001 f960 	bl	80037dc <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	4b1f      	ldr	r3, [pc, #124]	@ (800259c <main+0x204>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 726f 	movw	r2, #5999	@ 0x176f
 8002528:	4293      	cmp	r3, r2
 800252a:	d907      	bls.n	800253c <main+0x1a4>
			previous_latitude = gpsData.ggastruct.lcation.latitude;
 800252c:	4b12      	ldr	r3, [pc, #72]	@ (8002578 <main+0x1e0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a17      	ldr	r2, [pc, #92]	@ (8002590 <main+0x1f8>)
 8002532:	6013      	str	r3, [r2, #0]
			previous_longitude = gpsData.ggastruct.lcation.longitude;
 8002534:	4b10      	ldr	r3, [pc, #64]	@ (8002578 <main+0x1e0>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	4a16      	ldr	r2, [pc, #88]	@ (8002594 <main+0x1fc>)
 800253a:	6013      	str	r3, [r2, #0]
		}
		time = HAL_GetTick();
 800253c:	f001 f94e 	bl	80037dc <HAL_GetTick>
 8002540:	4603      	mov	r3, r0
 8002542:	4a16      	ldr	r2, [pc, #88]	@ (800259c <main+0x204>)
 8002544:	6013      	str	r3, [r2, #0]

		HAL_Delay(3000);
 8002546:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800254a:	f001 f951 	bl	80037f0 <HAL_Delay>
		if (Wait_for("GGA") == 1) {
 800254e:	e773      	b.n	8002438 <main+0xa0>
 8002550:	eb1c432d 	.word	0xeb1c432d
 8002554:	3f1a36e2 	.word	0x3f1a36e2
 8002558:	2000000c 	.word	0x2000000c
 800255c:	0800b428 	.word	0x0800b428
 8002560:	0800b430 	.word	0x0800b430
 8002564:	20000004 	.word	0x20000004
 8002568:	0800b43c 	.word	0x0800b43c
 800256c:	0800b440 	.word	0x0800b440
 8002570:	20000c80 	.word	0x20000c80
 8002574:	0800b444 	.word	0x0800b444
 8002578:	20000ce4 	.word	0x20000ce4
 800257c:	20000238 	.word	0x20000238
 8002580:	0800b448 	.word	0x0800b448
 8002584:	2000023c 	.word	0x2000023c
 8002588:	0800b450 	.word	0x0800b450
 800258c:	2000024c 	.word	0x2000024c
 8002590:	20000230 	.word	0x20000230
 8002594:	20000234 	.word	0x20000234
 8002598:	20000d94 	.word	0x20000d94
 800259c:	2000025c 	.word	0x2000025c

080025a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b090      	sub	sp, #64	@ 0x40
 80025a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80025a6:	f107 0318 	add.w	r3, r7, #24
 80025aa:	2228      	movs	r2, #40	@ 0x28
 80025ac:	2100      	movs	r1, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	f005 faaf 	bl	8007b12 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80025b4:	1d3b      	adds	r3, r7, #4
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	60da      	str	r2, [r3, #12]
 80025c0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025c2:	2301      	movs	r3, #1
 80025c4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025ca:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80025cc:	2300      	movs	r3, #0
 80025ce:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025d0:	2301      	movs	r3, #1
 80025d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025d4:	2302      	movs	r3, #2
 80025d6:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025dc:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80025de:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80025e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80025e4:	f107 0318 	add.w	r3, r7, #24
 80025e8:	4618      	mov	r0, r3
 80025ea:	f002 fa33 	bl	8004a54 <HAL_RCC_OscConfig>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <SystemClock_Config+0x58>
		Error_Handler();
 80025f4:	f000 f8ca 	bl	800278c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80025f8:	230f      	movs	r3, #15
 80025fa:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025fc:	2302      	movs	r3, #2
 80025fe:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002604:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002608:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800260e:	1d3b      	adds	r3, r7, #4
 8002610:	2102      	movs	r1, #2
 8002612:	4618      	mov	r0, r3
 8002614:	f002 fca0 	bl	8004f58 <HAL_RCC_ClockConfig>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <SystemClock_Config+0x82>
		Error_Handler();
 800261e:	f000 f8b5 	bl	800278c <Error_Handler>
	}
}
 8002622:	bf00      	nop
 8002624:	3740      	adds	r7, #64	@ 0x40
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002630:	4b12      	ldr	r3, [pc, #72]	@ (800267c <MX_I2C1_Init+0x50>)
 8002632:	4a13      	ldr	r2, [pc, #76]	@ (8002680 <MX_I2C1_Init+0x54>)
 8002634:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8002636:	4b11      	ldr	r3, [pc, #68]	@ (800267c <MX_I2C1_Init+0x50>)
 8002638:	4a12      	ldr	r2, [pc, #72]	@ (8002684 <MX_I2C1_Init+0x58>)
 800263a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800263c:	4b0f      	ldr	r3, [pc, #60]	@ (800267c <MX_I2C1_Init+0x50>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002642:	4b0e      	ldr	r3, [pc, #56]	@ (800267c <MX_I2C1_Init+0x50>)
 8002644:	2200      	movs	r2, #0
 8002646:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002648:	4b0c      	ldr	r3, [pc, #48]	@ (800267c <MX_I2C1_Init+0x50>)
 800264a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800264e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002650:	4b0a      	ldr	r3, [pc, #40]	@ (800267c <MX_I2C1_Init+0x50>)
 8002652:	2200      	movs	r2, #0
 8002654:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002656:	4b09      	ldr	r3, [pc, #36]	@ (800267c <MX_I2C1_Init+0x50>)
 8002658:	2200      	movs	r2, #0
 800265a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800265c:	4b07      	ldr	r3, [pc, #28]	@ (800267c <MX_I2C1_Init+0x50>)
 800265e:	2200      	movs	r2, #0
 8002660:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002662:	4b06      	ldr	r3, [pc, #24]	@ (800267c <MX_I2C1_Init+0x50>)
 8002664:	2200      	movs	r2, #0
 8002666:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002668:	4804      	ldr	r0, [pc, #16]	@ (800267c <MX_I2C1_Init+0x50>)
 800266a:	f001 fc29 	bl	8003ec0 <HAL_I2C_Init>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002674:	f000 f88a 	bl	800278c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20000bc8 	.word	0x20000bc8
 8002680:	40005400 	.word	0x40005400
 8002684:	00061a80 	.word	0x00061a80

08002688 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800268c:	4b11      	ldr	r3, [pc, #68]	@ (80026d4 <MX_USART1_UART_Init+0x4c>)
 800268e:	4a12      	ldr	r2, [pc, #72]	@ (80026d8 <MX_USART1_UART_Init+0x50>)
 8002690:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002692:	4b10      	ldr	r3, [pc, #64]	@ (80026d4 <MX_USART1_UART_Init+0x4c>)
 8002694:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002698:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800269a:	4b0e      	ldr	r3, [pc, #56]	@ (80026d4 <MX_USART1_UART_Init+0x4c>)
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80026a0:	4b0c      	ldr	r3, [pc, #48]	@ (80026d4 <MX_USART1_UART_Init+0x4c>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80026a6:	4b0b      	ldr	r3, [pc, #44]	@ (80026d4 <MX_USART1_UART_Init+0x4c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80026ac:	4b09      	ldr	r3, [pc, #36]	@ (80026d4 <MX_USART1_UART_Init+0x4c>)
 80026ae:	220c      	movs	r2, #12
 80026b0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026b2:	4b08      	ldr	r3, [pc, #32]	@ (80026d4 <MX_USART1_UART_Init+0x4c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b8:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <MX_USART1_UART_Init+0x4c>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80026be:	4805      	ldr	r0, [pc, #20]	@ (80026d4 <MX_USART1_UART_Init+0x4c>)
 80026c0:	f002 fdd8 	bl	8005274 <HAL_UART_Init>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80026ca:	f000 f85f 	bl	800278c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000d18 	.word	0x20000d18
 80026d8:	40013800 	.word	0x40013800

080026dc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80026e0:	4b11      	ldr	r3, [pc, #68]	@ (8002728 <MX_USART2_UART_Init+0x4c>)
 80026e2:	4a12      	ldr	r2, [pc, #72]	@ (800272c <MX_USART2_UART_Init+0x50>)
 80026e4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80026e6:	4b10      	ldr	r3, [pc, #64]	@ (8002728 <MX_USART2_UART_Init+0x4c>)
 80026e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026ec:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002728 <MX_USART2_UART_Init+0x4c>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80026f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002728 <MX_USART2_UART_Init+0x4c>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80026fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002728 <MX_USART2_UART_Init+0x4c>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002700:	4b09      	ldr	r3, [pc, #36]	@ (8002728 <MX_USART2_UART_Init+0x4c>)
 8002702:	220c      	movs	r2, #12
 8002704:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002706:	4b08      	ldr	r3, [pc, #32]	@ (8002728 <MX_USART2_UART_Init+0x4c>)
 8002708:	2200      	movs	r2, #0
 800270a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800270c:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <MX_USART2_UART_Init+0x4c>)
 800270e:	2200      	movs	r2, #0
 8002710:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002712:	4805      	ldr	r0, [pc, #20]	@ (8002728 <MX_USART2_UART_Init+0x4c>)
 8002714:	f002 fdae 	bl	8005274 <HAL_UART_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800271e:	f000 f835 	bl	800278c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000d94 	.word	0x20000d94
 800272c:	40004400 	.word	0x40004400

08002730 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002736:	4b14      	ldr	r3, [pc, #80]	@ (8002788 <MX_GPIO_Init+0x58>)
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	4a13      	ldr	r2, [pc, #76]	@ (8002788 <MX_GPIO_Init+0x58>)
 800273c:	f043 0320 	orr.w	r3, r3, #32
 8002740:	6193      	str	r3, [r2, #24]
 8002742:	4b11      	ldr	r3, [pc, #68]	@ (8002788 <MX_GPIO_Init+0x58>)
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800274e:	4b0e      	ldr	r3, [pc, #56]	@ (8002788 <MX_GPIO_Init+0x58>)
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	4a0d      	ldr	r2, [pc, #52]	@ (8002788 <MX_GPIO_Init+0x58>)
 8002754:	f043 0304 	orr.w	r3, r3, #4
 8002758:	6193      	str	r3, [r2, #24]
 800275a:	4b0b      	ldr	r3, [pc, #44]	@ (8002788 <MX_GPIO_Init+0x58>)
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002766:	4b08      	ldr	r3, [pc, #32]	@ (8002788 <MX_GPIO_Init+0x58>)
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	4a07      	ldr	r2, [pc, #28]	@ (8002788 <MX_GPIO_Init+0x58>)
 800276c:	f043 0308 	orr.w	r3, r3, #8
 8002770:	6193      	str	r3, [r2, #24]
 8002772:	4b05      	ldr	r3, [pc, #20]	@ (8002788 <MX_GPIO_Init+0x58>)
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800277e:	bf00      	nop
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr
 8002788:	40021000 	.word	0x40021000

0800278c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002790:	b672      	cpsid	i
}
 8002792:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002794:	bf00      	nop
 8002796:	e7fd      	b.n	8002794 <Error_Handler+0x8>

08002798 <MPU6050_Init>:
uint8_t data_rx[15];
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup
void MPU6050_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af02      	add	r7, sp, #8
	data_tx[0] = 0x6B;
 800279e:	4b0f      	ldr	r3, [pc, #60]	@ (80027dc <MPU6050_Init+0x44>)
 80027a0:	226b      	movs	r2, #107	@ 0x6b
 80027a2:	701a      	strb	r2, [r3, #0]
	data_tx[1] = 0x00;
 80027a4:	4b0d      	ldr	r3, [pc, #52]	@ (80027dc <MPU6050_Init+0x44>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)MPU6050_ADDRESS, data_tx, 2, 100);
 80027aa:	2364      	movs	r3, #100	@ 0x64
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	2302      	movs	r3, #2
 80027b0:	4a0a      	ldr	r2, [pc, #40]	@ (80027dc <MPU6050_Init+0x44>)
 80027b2:	21d0      	movs	r1, #208	@ 0xd0
 80027b4:	480a      	ldr	r0, [pc, #40]	@ (80027e0 <MPU6050_Init+0x48>)
 80027b6:	f001 fcc7 	bl	8004148 <HAL_I2C_Master_Transmit>

	data_tx[0] = 0x19;
 80027ba:	4b08      	ldr	r3, [pc, #32]	@ (80027dc <MPU6050_Init+0x44>)
 80027bc:	2219      	movs	r2, #25
 80027be:	701a      	strb	r2, [r3, #0]
	data_tx[1] = 0x07;
 80027c0:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <MPU6050_Init+0x44>)
 80027c2:	2207      	movs	r2, #7
 80027c4:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)MPU6050_ADDRESS, data_tx, 2, 100);
 80027c6:	2364      	movs	r3, #100	@ 0x64
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	2302      	movs	r3, #2
 80027cc:	4a03      	ldr	r2, [pc, #12]	@ (80027dc <MPU6050_Init+0x44>)
 80027ce:	21d0      	movs	r1, #208	@ 0xd0
 80027d0:	4803      	ldr	r0, [pc, #12]	@ (80027e0 <MPU6050_Init+0x48>)
 80027d2:	f001 fcb9 	bl	8004148 <HAL_I2C_Master_Transmit>
}
 80027d6:	bf00      	nop
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20000dec 	.word	0x20000dec
 80027e0:	20000bc8 	.word	0x20000bc8

080027e4 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	460a      	mov	r2, r1
 80027ee:	71fb      	strb	r3, [r7, #7]
 80027f0:	4613      	mov	r3, r2
 80027f2:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 80027f4:	2226      	movs	r2, #38	@ 0x26
 80027f6:	2100      	movs	r1, #0
 80027f8:	2078      	movs	r0, #120	@ 0x78
 80027fa:	f000 fb0d 	bl	8002e18 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 80027fe:	2200      	movs	r2, #0
 8002800:	2100      	movs	r1, #0
 8002802:	2078      	movs	r0, #120	@ 0x78
 8002804:	f000 fb08 	bl	8002e18 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	461a      	mov	r2, r3
 800280c:	2100      	movs	r1, #0
 800280e:	2078      	movs	r0, #120	@ 0x78
 8002810:	f000 fb02 	bl	8002e18 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8002814:	2200      	movs	r2, #0
 8002816:	2100      	movs	r1, #0
 8002818:	2078      	movs	r0, #120	@ 0x78
 800281a:	f000 fafd 	bl	8002e18 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 800281e:	79bb      	ldrb	r3, [r7, #6]
 8002820:	461a      	mov	r2, r3
 8002822:	2100      	movs	r1, #0
 8002824:	2078      	movs	r0, #120	@ 0x78
 8002826:	f000 faf7 	bl	8002e18 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 800282a:	2200      	movs	r2, #0
 800282c:	2100      	movs	r1, #0
 800282e:	2078      	movs	r0, #120	@ 0x78
 8002830:	f000 faf2 	bl	8002e18 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8002834:	22ff      	movs	r2, #255	@ 0xff
 8002836:	2100      	movs	r1, #0
 8002838:	2078      	movs	r0, #120	@ 0x78
 800283a:	f000 faed 	bl	8002e18 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 800283e:	222f      	movs	r2, #47	@ 0x2f
 8002840:	2100      	movs	r1, #0
 8002842:	2078      	movs	r0, #120	@ 0x78
 8002844:	f000 fae8 	bl	8002e18 <ssd1306_I2C_Write>
}
 8002848:	bf00      	nop
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	460a      	mov	r2, r1
 800285a:	71fb      	strb	r3, [r7, #7]
 800285c:	4613      	mov	r3, r2
 800285e:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 8002860:	2227      	movs	r2, #39	@ 0x27
 8002862:	2100      	movs	r1, #0
 8002864:	2078      	movs	r0, #120	@ 0x78
 8002866:	f000 fad7 	bl	8002e18 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 800286a:	2200      	movs	r2, #0
 800286c:	2100      	movs	r1, #0
 800286e:	2078      	movs	r0, #120	@ 0x78
 8002870:	f000 fad2 	bl	8002e18 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	461a      	mov	r2, r3
 8002878:	2100      	movs	r1, #0
 800287a:	2078      	movs	r0, #120	@ 0x78
 800287c:	f000 facc 	bl	8002e18 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8002880:	2200      	movs	r2, #0
 8002882:	2100      	movs	r1, #0
 8002884:	2078      	movs	r0, #120	@ 0x78
 8002886:	f000 fac7 	bl	8002e18 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 800288a:	79bb      	ldrb	r3, [r7, #6]
 800288c:	461a      	mov	r2, r3
 800288e:	2100      	movs	r1, #0
 8002890:	2078      	movs	r0, #120	@ 0x78
 8002892:	f000 fac1 	bl	8002e18 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8002896:	2200      	movs	r2, #0
 8002898:	2100      	movs	r1, #0
 800289a:	2078      	movs	r0, #120	@ 0x78
 800289c:	f000 fabc 	bl	8002e18 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80028a0:	22ff      	movs	r2, #255	@ 0xff
 80028a2:	2100      	movs	r1, #0
 80028a4:	2078      	movs	r0, #120	@ 0x78
 80028a6:	f000 fab7 	bl	8002e18 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80028aa:	222f      	movs	r2, #47	@ 0x2f
 80028ac:	2100      	movs	r1, #0
 80028ae:	2078      	movs	r0, #120	@ 0x78
 80028b0:	f000 fab2 	bl	8002e18 <ssd1306_I2C_Write>
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80028c0:	222e      	movs	r2, #46	@ 0x2e
 80028c2:	2100      	movs	r1, #0
 80028c4:	2078      	movs	r0, #120	@ 0x78
 80028c6:	f000 faa7 	bl	8002e18 <ssd1306_I2C_Write>
}
 80028ca:	bf00      	nop
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80028d6:	f000 fa25 	bl	8002d24 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80028da:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80028de:	2201      	movs	r2, #1
 80028e0:	2178      	movs	r1, #120	@ 0x78
 80028e2:	485b      	ldr	r0, [pc, #364]	@ (8002a50 <SSD1306_Init+0x180>)
 80028e4:	f001 fd2e 	bl	8004344 <HAL_I2C_IsDeviceReady>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80028ee:	2300      	movs	r3, #0
 80028f0:	e0a9      	b.n	8002a46 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80028f2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80028f6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80028f8:	e002      	b.n	8002900 <SSD1306_Init+0x30>
		p--;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3b01      	subs	r3, #1
 80028fe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f9      	bne.n	80028fa <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002906:	22ae      	movs	r2, #174	@ 0xae
 8002908:	2100      	movs	r1, #0
 800290a:	2078      	movs	r0, #120	@ 0x78
 800290c:	f000 fa84 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002910:	2220      	movs	r2, #32
 8002912:	2100      	movs	r1, #0
 8002914:	2078      	movs	r0, #120	@ 0x78
 8002916:	f000 fa7f 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800291a:	2210      	movs	r2, #16
 800291c:	2100      	movs	r1, #0
 800291e:	2078      	movs	r0, #120	@ 0x78
 8002920:	f000 fa7a 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002924:	22b0      	movs	r2, #176	@ 0xb0
 8002926:	2100      	movs	r1, #0
 8002928:	2078      	movs	r0, #120	@ 0x78
 800292a:	f000 fa75 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800292e:	22c8      	movs	r2, #200	@ 0xc8
 8002930:	2100      	movs	r1, #0
 8002932:	2078      	movs	r0, #120	@ 0x78
 8002934:	f000 fa70 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002938:	2200      	movs	r2, #0
 800293a:	2100      	movs	r1, #0
 800293c:	2078      	movs	r0, #120	@ 0x78
 800293e:	f000 fa6b 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002942:	2210      	movs	r2, #16
 8002944:	2100      	movs	r1, #0
 8002946:	2078      	movs	r0, #120	@ 0x78
 8002948:	f000 fa66 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800294c:	2240      	movs	r2, #64	@ 0x40
 800294e:	2100      	movs	r1, #0
 8002950:	2078      	movs	r0, #120	@ 0x78
 8002952:	f000 fa61 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002956:	2281      	movs	r2, #129	@ 0x81
 8002958:	2100      	movs	r1, #0
 800295a:	2078      	movs	r0, #120	@ 0x78
 800295c:	f000 fa5c 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002960:	22ff      	movs	r2, #255	@ 0xff
 8002962:	2100      	movs	r1, #0
 8002964:	2078      	movs	r0, #120	@ 0x78
 8002966:	f000 fa57 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800296a:	22a1      	movs	r2, #161	@ 0xa1
 800296c:	2100      	movs	r1, #0
 800296e:	2078      	movs	r0, #120	@ 0x78
 8002970:	f000 fa52 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002974:	22a6      	movs	r2, #166	@ 0xa6
 8002976:	2100      	movs	r1, #0
 8002978:	2078      	movs	r0, #120	@ 0x78
 800297a:	f000 fa4d 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800297e:	22a8      	movs	r2, #168	@ 0xa8
 8002980:	2100      	movs	r1, #0
 8002982:	2078      	movs	r0, #120	@ 0x78
 8002984:	f000 fa48 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002988:	223f      	movs	r2, #63	@ 0x3f
 800298a:	2100      	movs	r1, #0
 800298c:	2078      	movs	r0, #120	@ 0x78
 800298e:	f000 fa43 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002992:	22a4      	movs	r2, #164	@ 0xa4
 8002994:	2100      	movs	r1, #0
 8002996:	2078      	movs	r0, #120	@ 0x78
 8002998:	f000 fa3e 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800299c:	22d3      	movs	r2, #211	@ 0xd3
 800299e:	2100      	movs	r1, #0
 80029a0:	2078      	movs	r0, #120	@ 0x78
 80029a2:	f000 fa39 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80029a6:	2200      	movs	r2, #0
 80029a8:	2100      	movs	r1, #0
 80029aa:	2078      	movs	r0, #120	@ 0x78
 80029ac:	f000 fa34 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80029b0:	22d5      	movs	r2, #213	@ 0xd5
 80029b2:	2100      	movs	r1, #0
 80029b4:	2078      	movs	r0, #120	@ 0x78
 80029b6:	f000 fa2f 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80029ba:	22f0      	movs	r2, #240	@ 0xf0
 80029bc:	2100      	movs	r1, #0
 80029be:	2078      	movs	r0, #120	@ 0x78
 80029c0:	f000 fa2a 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80029c4:	22d9      	movs	r2, #217	@ 0xd9
 80029c6:	2100      	movs	r1, #0
 80029c8:	2078      	movs	r0, #120	@ 0x78
 80029ca:	f000 fa25 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80029ce:	2222      	movs	r2, #34	@ 0x22
 80029d0:	2100      	movs	r1, #0
 80029d2:	2078      	movs	r0, #120	@ 0x78
 80029d4:	f000 fa20 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80029d8:	22da      	movs	r2, #218	@ 0xda
 80029da:	2100      	movs	r1, #0
 80029dc:	2078      	movs	r0, #120	@ 0x78
 80029de:	f000 fa1b 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80029e2:	2212      	movs	r2, #18
 80029e4:	2100      	movs	r1, #0
 80029e6:	2078      	movs	r0, #120	@ 0x78
 80029e8:	f000 fa16 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80029ec:	22db      	movs	r2, #219	@ 0xdb
 80029ee:	2100      	movs	r1, #0
 80029f0:	2078      	movs	r0, #120	@ 0x78
 80029f2:	f000 fa11 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80029f6:	2220      	movs	r2, #32
 80029f8:	2100      	movs	r1, #0
 80029fa:	2078      	movs	r0, #120	@ 0x78
 80029fc:	f000 fa0c 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002a00:	228d      	movs	r2, #141	@ 0x8d
 8002a02:	2100      	movs	r1, #0
 8002a04:	2078      	movs	r0, #120	@ 0x78
 8002a06:	f000 fa07 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002a0a:	2214      	movs	r2, #20
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	2078      	movs	r0, #120	@ 0x78
 8002a10:	f000 fa02 	bl	8002e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002a14:	22af      	movs	r2, #175	@ 0xaf
 8002a16:	2100      	movs	r1, #0
 8002a18:	2078      	movs	r0, #120	@ 0x78
 8002a1a:	f000 f9fd 	bl	8002e18 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002a1e:	222e      	movs	r2, #46	@ 0x2e
 8002a20:	2100      	movs	r1, #0
 8002a22:	2078      	movs	r0, #120	@ 0x78
 8002a24:	f000 f9f8 	bl	8002e18 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f000 f843 	bl	8002ab4 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8002a2e:	f000 f813 	bl	8002a58 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8002a32:	4b08      	ldr	r3, [pc, #32]	@ (8002a54 <SSD1306_Init+0x184>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002a38:	4b06      	ldr	r3, [pc, #24]	@ (8002a54 <SSD1306_Init+0x184>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002a3e:	4b05      	ldr	r3, [pc, #20]	@ (8002a54 <SSD1306_Init+0x184>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8002a44:	2301      	movs	r3, #1
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000bc8 	.word	0x20000bc8
 8002a54:	20000660 	.word	0x20000660

08002a58 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8002a5e:	2300      	movs	r3, #0
 8002a60:	71fb      	strb	r3, [r7, #7]
 8002a62:	e01d      	b.n	8002aa0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	3b50      	subs	r3, #80	@ 0x50
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	2078      	movs	r0, #120	@ 0x78
 8002a70:	f000 f9d2 	bl	8002e18 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002a74:	2200      	movs	r2, #0
 8002a76:	2100      	movs	r1, #0
 8002a78:	2078      	movs	r0, #120	@ 0x78
 8002a7a:	f000 f9cd 	bl	8002e18 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002a7e:	2210      	movs	r2, #16
 8002a80:	2100      	movs	r1, #0
 8002a82:	2078      	movs	r0, #120	@ 0x78
 8002a84:	f000 f9c8 	bl	8002e18 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	01db      	lsls	r3, r3, #7
 8002a8c:	4a08      	ldr	r2, [pc, #32]	@ (8002ab0 <SSD1306_UpdateScreen+0x58>)
 8002a8e:	441a      	add	r2, r3
 8002a90:	2380      	movs	r3, #128	@ 0x80
 8002a92:	2140      	movs	r1, #64	@ 0x40
 8002a94:	2078      	movs	r0, #120	@ 0x78
 8002a96:	f000 f959 	bl	8002d4c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	71fb      	strb	r3, [r7, #7]
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	2b07      	cmp	r3, #7
 8002aa4:	d9de      	bls.n	8002a64 <SSD1306_UpdateScreen+0xc>
	}
}
 8002aa6:	bf00      	nop
 8002aa8:	bf00      	nop
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	20000260 	.word	0x20000260

08002ab4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <SSD1306_Fill+0x14>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	e000      	b.n	8002aca <SSD1306_Fill+0x16>
 8002ac8:	23ff      	movs	r3, #255	@ 0xff
 8002aca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4803      	ldr	r0, [pc, #12]	@ (8002ae0 <SSD1306_Fill+0x2c>)
 8002ad2:	f005 f81e 	bl	8007b12 <memset>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000260 	.word	0x20000260

08002ae4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	80fb      	strh	r3, [r7, #6]
 8002aee:	460b      	mov	r3, r1
 8002af0:	80bb      	strh	r3, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	70fb      	strb	r3, [r7, #3]
	if (
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	2b7f      	cmp	r3, #127	@ 0x7f
 8002afa:	d848      	bhi.n	8002b8e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002afc:	88bb      	ldrh	r3, [r7, #4]
 8002afe:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b00:	d845      	bhi.n	8002b8e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002b02:	4b25      	ldr	r3, [pc, #148]	@ (8002b98 <SSD1306_DrawPixel+0xb4>)
 8002b04:	791b      	ldrb	r3, [r3, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d006      	beq.n	8002b18 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002b0a:	78fb      	ldrb	r3, [r7, #3]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d11a      	bne.n	8002b54 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002b1e:	88fa      	ldrh	r2, [r7, #6]
 8002b20:	88bb      	ldrh	r3, [r7, #4]
 8002b22:	08db      	lsrs	r3, r3, #3
 8002b24:	b298      	uxth	r0, r3
 8002b26:	4603      	mov	r3, r0
 8002b28:	01db      	lsls	r3, r3, #7
 8002b2a:	4413      	add	r3, r2
 8002b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8002b9c <SSD1306_DrawPixel+0xb8>)
 8002b2e:	5cd3      	ldrb	r3, [r2, r3]
 8002b30:	b25a      	sxtb	r2, r3
 8002b32:	88bb      	ldrh	r3, [r7, #4]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	2101      	movs	r1, #1
 8002b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3e:	b25b      	sxtb	r3, r3
 8002b40:	4313      	orrs	r3, r2
 8002b42:	b259      	sxtb	r1, r3
 8002b44:	88fa      	ldrh	r2, [r7, #6]
 8002b46:	4603      	mov	r3, r0
 8002b48:	01db      	lsls	r3, r3, #7
 8002b4a:	4413      	add	r3, r2
 8002b4c:	b2c9      	uxtb	r1, r1
 8002b4e:	4a13      	ldr	r2, [pc, #76]	@ (8002b9c <SSD1306_DrawPixel+0xb8>)
 8002b50:	54d1      	strb	r1, [r2, r3]
 8002b52:	e01d      	b.n	8002b90 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002b54:	88fa      	ldrh	r2, [r7, #6]
 8002b56:	88bb      	ldrh	r3, [r7, #4]
 8002b58:	08db      	lsrs	r3, r3, #3
 8002b5a:	b298      	uxth	r0, r3
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	01db      	lsls	r3, r3, #7
 8002b60:	4413      	add	r3, r2
 8002b62:	4a0e      	ldr	r2, [pc, #56]	@ (8002b9c <SSD1306_DrawPixel+0xb8>)
 8002b64:	5cd3      	ldrb	r3, [r2, r3]
 8002b66:	b25a      	sxtb	r2, r3
 8002b68:	88bb      	ldrh	r3, [r7, #4]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	2101      	movs	r1, #1
 8002b70:	fa01 f303 	lsl.w	r3, r1, r3
 8002b74:	b25b      	sxtb	r3, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	b25b      	sxtb	r3, r3
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	b259      	sxtb	r1, r3
 8002b7e:	88fa      	ldrh	r2, [r7, #6]
 8002b80:	4603      	mov	r3, r0
 8002b82:	01db      	lsls	r3, r3, #7
 8002b84:	4413      	add	r3, r2
 8002b86:	b2c9      	uxtb	r1, r1
 8002b88:	4a04      	ldr	r2, [pc, #16]	@ (8002b9c <SSD1306_DrawPixel+0xb8>)
 8002b8a:	54d1      	strb	r1, [r2, r3]
 8002b8c:	e000      	b.n	8002b90 <SSD1306_DrawPixel+0xac>
		return;
 8002b8e:	bf00      	nop
	}
}
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	20000660 	.word	0x20000660
 8002b9c:	20000260 	.word	0x20000260

08002ba0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	460a      	mov	r2, r1
 8002baa:	80fb      	strh	r3, [r7, #6]
 8002bac:	4613      	mov	r3, r2
 8002bae:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002bb0:	4a05      	ldr	r2, [pc, #20]	@ (8002bc8 <SSD1306_GotoXY+0x28>)
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002bb6:	4a04      	ldr	r2, [pc, #16]	@ (8002bc8 <SSD1306_GotoXY+0x28>)
 8002bb8:	88bb      	ldrh	r3, [r7, #4]
 8002bba:	8053      	strh	r3, [r2, #2]
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	20000660 	.word	0x20000660

08002bcc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	6039      	str	r1, [r7, #0]
 8002bd6:	71fb      	strb	r3, [r7, #7]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002bdc:	4b39      	ldr	r3, [pc, #228]	@ (8002cc4 <SSD1306_Putc+0xf8>)
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	4413      	add	r3, r2
	if (
 8002be8:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bea:	dc07      	bgt.n	8002bfc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002bec:	4b35      	ldr	r3, [pc, #212]	@ (8002cc4 <SSD1306_Putc+0xf8>)
 8002bee:	885b      	ldrh	r3, [r3, #2]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	785b      	ldrb	r3, [r3, #1]
 8002bf6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002bf8:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bfa:	dd01      	ble.n	8002c00 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e05d      	b.n	8002cbc <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	e04b      	b.n	8002c9e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	3b20      	subs	r3, #32
 8002c0e:	6839      	ldr	r1, [r7, #0]
 8002c10:	7849      	ldrb	r1, [r1, #1]
 8002c12:	fb01 f303 	mul.w	r3, r1, r3
 8002c16:	4619      	mov	r1, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	440b      	add	r3, r1
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	4413      	add	r3, r2
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002c24:	2300      	movs	r3, #0
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	e030      	b.n	8002c8c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d010      	beq.n	8002c5c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002c3a:	4b22      	ldr	r3, [pc, #136]	@ (8002cc4 <SSD1306_Putc+0xf8>)
 8002c3c:	881a      	ldrh	r2, [r3, #0]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	4413      	add	r3, r2
 8002c44:	b298      	uxth	r0, r3
 8002c46:	4b1f      	ldr	r3, [pc, #124]	@ (8002cc4 <SSD1306_Putc+0xf8>)
 8002c48:	885a      	ldrh	r2, [r3, #2]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	4413      	add	r3, r2
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	79ba      	ldrb	r2, [r7, #6]
 8002c54:	4619      	mov	r1, r3
 8002c56:	f7ff ff45 	bl	8002ae4 <SSD1306_DrawPixel>
 8002c5a:	e014      	b.n	8002c86 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002c5c:	4b19      	ldr	r3, [pc, #100]	@ (8002cc4 <SSD1306_Putc+0xf8>)
 8002c5e:	881a      	ldrh	r2, [r3, #0]
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	4413      	add	r3, r2
 8002c66:	b298      	uxth	r0, r3
 8002c68:	4b16      	ldr	r3, [pc, #88]	@ (8002cc4 <SSD1306_Putc+0xf8>)
 8002c6a:	885a      	ldrh	r2, [r3, #2]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	4413      	add	r3, r2
 8002c72:	b299      	uxth	r1, r3
 8002c74:	79bb      	ldrb	r3, [r7, #6]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	bf0c      	ite	eq
 8002c7a:	2301      	moveq	r3, #1
 8002c7c:	2300      	movne	r3, #0
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	461a      	mov	r2, r3
 8002c82:	f7ff ff2f 	bl	8002ae4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d3c8      	bcc.n	8002c2a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	617b      	str	r3, [r7, #20]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	785b      	ldrb	r3, [r3, #1]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d3ad      	bcc.n	8002c06 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002caa:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <SSD1306_Putc+0xf8>)
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	7812      	ldrb	r2, [r2, #0]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	4b03      	ldr	r3, [pc, #12]	@ (8002cc4 <SSD1306_Putc+0xf8>)
 8002cb8:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8002cba:	79fb      	ldrb	r3, [r7, #7]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	20000660 	.word	0x20000660

08002cc8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002cd6:	e012      	b.n	8002cfe <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	79fa      	ldrb	r2, [r7, #7]
 8002cde:	68b9      	ldr	r1, [r7, #8]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff73 	bl	8002bcc <SSD1306_Putc>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	461a      	mov	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d002      	beq.n	8002cf8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	e008      	b.n	8002d0a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1e8      	bne.n	8002cd8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	781b      	ldrb	r3, [r3, #0]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002d16:	2000      	movs	r0, #0
 8002d18:	f7ff fecc 	bl	8002ab4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002d1c:	f7ff fe9c 	bl	8002a58 <SSD1306_UpdateScreen>
}
 8002d20:	bf00      	nop
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002d2a:	4b07      	ldr	r3, [pc, #28]	@ (8002d48 <ssd1306_I2C_Init+0x24>)
 8002d2c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002d2e:	e002      	b.n	8002d36 <ssd1306_I2C_Init+0x12>
		p--;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f9      	bne.n	8002d30 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002d3c:	bf00      	nop
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	0003d090 	.word	0x0003d090

08002d4c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b0c7      	sub	sp, #284	@ 0x11c
 8002d50:	af02      	add	r7, sp, #8
 8002d52:	4604      	mov	r4, r0
 8002d54:	4608      	mov	r0, r1
 8002d56:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8002d5a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8002d5e:	600a      	str	r2, [r1, #0]
 8002d60:	4619      	mov	r1, r3
 8002d62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d66:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002d6a:	4622      	mov	r2, r4
 8002d6c:	701a      	strb	r2, [r3, #0]
 8002d6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d72:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002d76:	4602      	mov	r2, r0
 8002d78:	701a      	strb	r2, [r3, #0]
 8002d7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002d82:	460a      	mov	r2, r1
 8002d84:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002d86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002d8e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002d92:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8002d96:	7812      	ldrb	r2, [r2, #0]
 8002d98:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002da0:	e015      	b.n	8002dce <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002da2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002da6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002daa:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	441a      	add	r2, r3
 8002db2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002db6:	3301      	adds	r3, #1
 8002db8:	7811      	ldrb	r1, [r2, #0]
 8002dba:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002dbe:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8002dc2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002dc4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002dc8:	3301      	adds	r3, #1
 8002dca:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002dce:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002dd8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002ddc:	8812      	ldrh	r2, [r2, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d8df      	bhi.n	8002da2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002de2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002de6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	b299      	uxth	r1, r3
 8002dee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002df2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	f107 020c 	add.w	r2, r7, #12
 8002e00:	200a      	movs	r0, #10
 8002e02:	9000      	str	r0, [sp, #0]
 8002e04:	4803      	ldr	r0, [pc, #12]	@ (8002e14 <ssd1306_I2C_WriteMulti+0xc8>)
 8002e06:	f001 f99f 	bl	8004148 <HAL_I2C_Master_Transmit>
}
 8002e0a:	bf00      	nop
 8002e0c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd90      	pop	{r4, r7, pc}
 8002e14:	20000bc8 	.word	0x20000bc8

08002e18 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	4603      	mov	r3, r0
 8002e20:	71fb      	strb	r3, [r7, #7]
 8002e22:	460b      	mov	r3, r1
 8002e24:	71bb      	strb	r3, [r7, #6]
 8002e26:	4613      	mov	r3, r2
 8002e28:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002e2a:	79bb      	ldrb	r3, [r7, #6]
 8002e2c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002e2e:	797b      	ldrb	r3, [r7, #5]
 8002e30:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	b299      	uxth	r1, r3
 8002e36:	f107 020c 	add.w	r2, r7, #12
 8002e3a:	230a      	movs	r3, #10
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	2302      	movs	r3, #2
 8002e40:	4803      	ldr	r0, [pc, #12]	@ (8002e50 <ssd1306_I2C_Write+0x38>)
 8002e42:	f001 f981 	bl	8004148 <HAL_I2C_Master_Transmit>
}
 8002e46:	bf00      	nop
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000bc8 	.word	0x20000bc8

08002e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e5a:	4b15      	ldr	r3, [pc, #84]	@ (8002eb0 <HAL_MspInit+0x5c>)
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	4a14      	ldr	r2, [pc, #80]	@ (8002eb0 <HAL_MspInit+0x5c>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	6193      	str	r3, [r2, #24]
 8002e66:	4b12      	ldr	r3, [pc, #72]	@ (8002eb0 <HAL_MspInit+0x5c>)
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e72:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb0 <HAL_MspInit+0x5c>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	4a0e      	ldr	r2, [pc, #56]	@ (8002eb0 <HAL_MspInit+0x5c>)
 8002e78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e7c:	61d3      	str	r3, [r2, #28]
 8002e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb0 <HAL_MspInit+0x5c>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb4 <HAL_MspInit+0x60>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	4a04      	ldr	r2, [pc, #16]	@ (8002eb4 <HAL_MspInit+0x60>)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40010000 	.word	0x40010000

08002eb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08a      	sub	sp, #40	@ 0x28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec0:	f107 0314 	add.w	r3, r7, #20
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8002f48 <HAL_I2C_MspInit+0x90>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d132      	bne.n	8002f3e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8002f4c <HAL_I2C_MspInit+0x94>)
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	4a1b      	ldr	r2, [pc, #108]	@ (8002f4c <HAL_I2C_MspInit+0x94>)
 8002ede:	f043 0308 	orr.w	r3, r3, #8
 8002ee2:	6193      	str	r3, [r2, #24]
 8002ee4:	4b19      	ldr	r3, [pc, #100]	@ (8002f4c <HAL_I2C_MspInit+0x94>)
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ef0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ef6:	2312      	movs	r3, #18
 8002ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002efa:	2303      	movs	r3, #3
 8002efc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002efe:	f107 0314 	add.w	r3, r7, #20
 8002f02:	4619      	mov	r1, r3
 8002f04:	4812      	ldr	r0, [pc, #72]	@ (8002f50 <HAL_I2C_MspInit+0x98>)
 8002f06:	f000 fe57 	bl	8003bb8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002f0a:	4b12      	ldr	r3, [pc, #72]	@ (8002f54 <HAL_I2C_MspInit+0x9c>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f12:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1a:	f043 0302 	orr.w	r3, r3, #2
 8002f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f20:	4a0c      	ldr	r2, [pc, #48]	@ (8002f54 <HAL_I2C_MspInit+0x9c>)
 8002f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f24:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f26:	4b09      	ldr	r3, [pc, #36]	@ (8002f4c <HAL_I2C_MspInit+0x94>)
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	4a08      	ldr	r2, [pc, #32]	@ (8002f4c <HAL_I2C_MspInit+0x94>)
 8002f2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f30:	61d3      	str	r3, [r2, #28]
 8002f32:	4b06      	ldr	r3, [pc, #24]	@ (8002f4c <HAL_I2C_MspInit+0x94>)
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f3e:	bf00      	nop
 8002f40:	3728      	adds	r7, #40	@ 0x28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40005400 	.word	0x40005400
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	40010c00 	.word	0x40010c00
 8002f54:	40010000 	.word	0x40010000

08002f58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08c      	sub	sp, #48	@ 0x30
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f60:	f107 031c 	add.w	r3, r7, #28
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a41      	ldr	r2, [pc, #260]	@ (8003078 <HAL_UART_MspInit+0x120>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d146      	bne.n	8003006 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f78:	4b40      	ldr	r3, [pc, #256]	@ (800307c <HAL_UART_MspInit+0x124>)
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	4a3f      	ldr	r2, [pc, #252]	@ (800307c <HAL_UART_MspInit+0x124>)
 8002f7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f82:	6193      	str	r3, [r2, #24]
 8002f84:	4b3d      	ldr	r3, [pc, #244]	@ (800307c <HAL_UART_MspInit+0x124>)
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f8c:	61bb      	str	r3, [r7, #24]
 8002f8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f90:	4b3a      	ldr	r3, [pc, #232]	@ (800307c <HAL_UART_MspInit+0x124>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	4a39      	ldr	r2, [pc, #228]	@ (800307c <HAL_UART_MspInit+0x124>)
 8002f96:	f043 0308 	orr.w	r3, r3, #8
 8002f9a:	6193      	str	r3, [r2, #24]
 8002f9c:	4b37      	ldr	r3, [pc, #220]	@ (800307c <HAL_UART_MspInit+0x124>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002fa8:	2340      	movs	r3, #64	@ 0x40
 8002faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fac:	2302      	movs	r3, #2
 8002fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb4:	f107 031c 	add.w	r3, r7, #28
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4831      	ldr	r0, [pc, #196]	@ (8003080 <HAL_UART_MspInit+0x128>)
 8002fbc:	f000 fdfc 	bl	8003bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002fc0:	2380      	movs	r3, #128	@ 0x80
 8002fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fcc:	f107 031c 	add.w	r3, r7, #28
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	482b      	ldr	r0, [pc, #172]	@ (8003080 <HAL_UART_MspInit+0x128>)
 8002fd4:	f000 fdf0 	bl	8003bb8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8003084 <HAL_UART_MspInit+0x12c>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe8:	f043 0304 	orr.w	r3, r3, #4
 8002fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fee:	4a25      	ldr	r2, [pc, #148]	@ (8003084 <HAL_UART_MspInit+0x12c>)
 8002ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ff2:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	2025      	movs	r0, #37	@ 0x25
 8002ffa:	f000 fcf4 	bl	80039e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ffe:	2025      	movs	r0, #37	@ 0x25
 8003000:	f000 fd0d 	bl	8003a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003004:	e034      	b.n	8003070 <HAL_UART_MspInit+0x118>
  else if(huart->Instance==USART2)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1f      	ldr	r2, [pc, #124]	@ (8003088 <HAL_UART_MspInit+0x130>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d12f      	bne.n	8003070 <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003010:	4b1a      	ldr	r3, [pc, #104]	@ (800307c <HAL_UART_MspInit+0x124>)
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	4a19      	ldr	r2, [pc, #100]	@ (800307c <HAL_UART_MspInit+0x124>)
 8003016:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800301a:	61d3      	str	r3, [r2, #28]
 800301c:	4b17      	ldr	r3, [pc, #92]	@ (800307c <HAL_UART_MspInit+0x124>)
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003028:	4b14      	ldr	r3, [pc, #80]	@ (800307c <HAL_UART_MspInit+0x124>)
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	4a13      	ldr	r2, [pc, #76]	@ (800307c <HAL_UART_MspInit+0x124>)
 800302e:	f043 0304 	orr.w	r3, r3, #4
 8003032:	6193      	str	r3, [r2, #24]
 8003034:	4b11      	ldr	r3, [pc, #68]	@ (800307c <HAL_UART_MspInit+0x124>)
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003040:	2304      	movs	r3, #4
 8003042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003044:	2302      	movs	r3, #2
 8003046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003048:	2303      	movs	r3, #3
 800304a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800304c:	f107 031c 	add.w	r3, r7, #28
 8003050:	4619      	mov	r1, r3
 8003052:	480e      	ldr	r0, [pc, #56]	@ (800308c <HAL_UART_MspInit+0x134>)
 8003054:	f000 fdb0 	bl	8003bb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003058:	2308      	movs	r3, #8
 800305a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800305c:	2300      	movs	r3, #0
 800305e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	2300      	movs	r3, #0
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003064:	f107 031c 	add.w	r3, r7, #28
 8003068:	4619      	mov	r1, r3
 800306a:	4808      	ldr	r0, [pc, #32]	@ (800308c <HAL_UART_MspInit+0x134>)
 800306c:	f000 fda4 	bl	8003bb8 <HAL_GPIO_Init>
}
 8003070:	bf00      	nop
 8003072:	3730      	adds	r7, #48	@ 0x30
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40013800 	.word	0x40013800
 800307c:	40021000 	.word	0x40021000
 8003080:	40010c00 	.word	0x40010c00
 8003084:	40010000 	.word	0x40010000
 8003088:	40004400 	.word	0x40004400
 800308c:	40010800 	.word	0x40010800

08003090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003094:	bf00      	nop
 8003096:	e7fd      	b.n	8003094 <NMI_Handler+0x4>

08003098 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800309c:	bf00      	nop
 800309e:	e7fd      	b.n	800309c <HardFault_Handler+0x4>

080030a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030a4:	bf00      	nop
 80030a6:	e7fd      	b.n	80030a4 <MemManage_Handler+0x4>

080030a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030ac:	bf00      	nop
 80030ae:	e7fd      	b.n	80030ac <BusFault_Handler+0x4>

080030b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030b4:	bf00      	nop
 80030b6:	e7fd      	b.n	80030b4 <UsageFault_Handler+0x4>

080030b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr

080030c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	 if(timeout >0)  timeout--;
 80030e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003110 <SysTick_Handler+0x34>)
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <SysTick_Handler+0x18>
 80030e8:	4b09      	ldr	r3, [pc, #36]	@ (8003110 <SysTick_Handler+0x34>)
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	4b07      	ldr	r3, [pc, #28]	@ (8003110 <SysTick_Handler+0x34>)
 80030f2:	801a      	strh	r2, [r3, #0]
	 if (VCCTimeout>0) VCCTimeout--;
 80030f4:	4b07      	ldr	r3, [pc, #28]	@ (8003114 <SysTick_Handler+0x38>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	dd04      	ble.n	8003106 <SysTick_Handler+0x2a>
 80030fc:	4b05      	ldr	r3, [pc, #20]	@ (8003114 <SysTick_Handler+0x38>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3b01      	subs	r3, #1
 8003102:	4a04      	ldr	r2, [pc, #16]	@ (8003114 <SysTick_Handler+0x38>)
 8003104:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003106:	f000 fb57 	bl	80037b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20000df8 	.word	0x20000df8
 8003114:	20000014 	.word	0x20000014

08003118 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (&huart1);
 800311c:	4803      	ldr	r0, [pc, #12]	@ (800312c <USART1_IRQHandler+0x14>)
 800311e:	f000 fa81 	bl	8003624 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003122:	4802      	ldr	r0, [pc, #8]	@ (800312c <USART1_IRQHandler+0x14>)
 8003124:	f002 f97a 	bl	800541c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003128:	bf00      	nop
 800312a:	bd80      	pop	{r7, pc}
 800312c:	20000d18 	.word	0x20000d18

08003130 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  return 1;
 8003134:	2301      	movs	r3, #1
}
 8003136:	4618      	mov	r0, r3
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr

0800313e <_kill>:

int _kill(int pid, int sig)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b082      	sub	sp, #8
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003148:	f004 fd48 	bl	8007bdc <__errno>
 800314c:	4603      	mov	r3, r0
 800314e:	2216      	movs	r2, #22
 8003150:	601a      	str	r2, [r3, #0]
  return -1;
 8003152:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <_exit>:

void _exit (int status)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003166:	f04f 31ff 	mov.w	r1, #4294967295
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7ff ffe7 	bl	800313e <_kill>
  while (1) {}    /* Make sure we hang here */
 8003170:	bf00      	nop
 8003172:	e7fd      	b.n	8003170 <_exit+0x12>

08003174 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	e00a      	b.n	800319c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003186:	f3af 8000 	nop.w
 800318a:	4601      	mov	r1, r0
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	60ba      	str	r2, [r7, #8]
 8003192:	b2ca      	uxtb	r2, r1
 8003194:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	3301      	adds	r3, #1
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	dbf0      	blt.n	8003186 <_read+0x12>
  }

  return len;
 80031a4:	687b      	ldr	r3, [r7, #4]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b086      	sub	sp, #24
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	e009      	b.n	80031d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	60ba      	str	r2, [r7, #8]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	3301      	adds	r3, #1
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	429a      	cmp	r2, r3
 80031da:	dbf1      	blt.n	80031c0 <_write+0x12>
  }
  return len;
 80031dc:	687b      	ldr	r3, [r7, #4]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <_close>:

int _close(int file)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800320c:	605a      	str	r2, [r3, #4]
  return 0;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr

0800321a <_isatty>:

int _isatty(int file)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003222:	2301      	movs	r3, #1
}
 8003224:	4618      	mov	r0, r3
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr

0800322e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800322e:	b480      	push	{r7}
 8003230:	b085      	sub	sp, #20
 8003232:	af00      	add	r7, sp, #0
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr
	...

08003248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003250:	4a14      	ldr	r2, [pc, #80]	@ (80032a4 <_sbrk+0x5c>)
 8003252:	4b15      	ldr	r3, [pc, #84]	@ (80032a8 <_sbrk+0x60>)
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800325c:	4b13      	ldr	r3, [pc, #76]	@ (80032ac <_sbrk+0x64>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d102      	bne.n	800326a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003264:	4b11      	ldr	r3, [pc, #68]	@ (80032ac <_sbrk+0x64>)
 8003266:	4a12      	ldr	r2, [pc, #72]	@ (80032b0 <_sbrk+0x68>)
 8003268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800326a:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <_sbrk+0x64>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4413      	add	r3, r2
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	429a      	cmp	r2, r3
 8003276:	d207      	bcs.n	8003288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003278:	f004 fcb0 	bl	8007bdc <__errno>
 800327c:	4603      	mov	r3, r0
 800327e:	220c      	movs	r2, #12
 8003280:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003282:	f04f 33ff 	mov.w	r3, #4294967295
 8003286:	e009      	b.n	800329c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003288:	4b08      	ldr	r3, [pc, #32]	@ (80032ac <_sbrk+0x64>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800328e:	4b07      	ldr	r3, [pc, #28]	@ (80032ac <_sbrk+0x64>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4413      	add	r3, r2
 8003296:	4a05      	ldr	r2, [pc, #20]	@ (80032ac <_sbrk+0x64>)
 8003298:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800329a:	68fb      	ldr	r3, [r7, #12]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	20005000 	.word	0x20005000
 80032a8:	00000400 	.word	0x00000400
 80032ac:	20000668 	.word	0x20000668
 80032b0:	20000e00 	.word	0x20000e00

080032b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032b8:	bf00      	nop
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr

080032c0 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80032c4:	4b0c      	ldr	r3, [pc, #48]	@ (80032f8 <Ringbuf_init+0x38>)
 80032c6:	4a0d      	ldr	r2, [pc, #52]	@ (80032fc <Ringbuf_init+0x3c>)
 80032c8:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80032ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003300 <Ringbuf_init+0x40>)
 80032cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003304 <Ringbuf_init+0x44>)
 80032ce:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80032d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003308 <Ringbuf_init+0x48>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695a      	ldr	r2, [r3, #20]
 80032d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003308 <Ringbuf_init+0x48>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80032e0:	4b09      	ldr	r3, [pc, #36]	@ (8003308 <Ringbuf_init+0x48>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	4b08      	ldr	r3, [pc, #32]	@ (8003308 <Ringbuf_init+0x48>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0220 	orr.w	r2, r2, #32
 80032ee:	60da      	str	r2, [r3, #12]
}
 80032f0:	bf00      	nop
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr
 80032f8:	20000df4 	.word	0x20000df4
 80032fc:	2000066c 	.word	0x2000066c
 8003300:	20000df0 	.word	0x20000df0
 8003304:	20000874 	.word	0x20000874
 8003308:	20000d18 	.word	0x20000d18

0800330c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	6039      	str	r1, [r7, #0]
 8003316:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800331e:	3301      	adds	r3, #1
 8003320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003324:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	429a      	cmp	r2, r3
 8003330:	d009      	beq.n	8003346 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	79f9      	ldrb	r1, [r7, #7]
 800333c:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  }
}
 8003346:	bf00      	nop
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8003356:	4b13      	ldr	r3, [pc, #76]	@ (80033a4 <Uart_read+0x54>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800335e:	4b11      	ldr	r3, [pc, #68]	@ (80033a4 <Uart_read+0x54>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8003366:	429a      	cmp	r2, r3
 8003368:	d102      	bne.n	8003370 <Uart_read+0x20>
  {
    return -1;
 800336a:	f04f 33ff 	mov.w	r3, #4294967295
 800336e:	e013      	b.n	8003398 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8003370:	4b0c      	ldr	r3, [pc, #48]	@ (80033a4 <Uart_read+0x54>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4b0b      	ldr	r3, [pc, #44]	@ (80033a4 <Uart_read+0x54>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800337c:	5cd3      	ldrb	r3, [r2, r3]
 800337e:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8003380:	4b08      	ldr	r3, [pc, #32]	@ (80033a4 <Uart_read+0x54>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	4b06      	ldr	r3, [pc, #24]	@ (80033a4 <Uart_read+0x54>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003392:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    return c;
 8003396:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8003398:	4618      	mov	r0, r3
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	20000df4 	.word	0x20000df4

080033a8 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80033ac:	4b0a      	ldr	r3, [pc, #40]	@ (80033d8 <IsDataAvailable+0x30>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	4b08      	ldr	r3, [pc, #32]	@ (80033d8 <IsDataAvailable+0x30>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80033be:	b29b      	uxth	r3, r3
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	20000df4 	.word	0x20000df4

080033dc <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 80033e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003410 <Uart_peek+0x34>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80033e8:	4b09      	ldr	r3, [pc, #36]	@ (8003410 <Uart_peek+0x34>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d102      	bne.n	80033fa <Uart_peek+0x1e>
  {
    return -1;
 80033f4:	f04f 33ff 	mov.w	r3, #4294967295
 80033f8:	e006      	b.n	8003408 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 80033fa:	4b05      	ldr	r3, [pc, #20]	@ (8003410 <Uart_peek+0x34>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4b04      	ldr	r3, [pc, #16]	@ (8003410 <Uart_peek+0x34>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8003406:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8003408:	4618      	mov	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr
 8003410:	20000df4 	.word	0x20000df4

08003414 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
	int so_far =0;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fc fe94 	bl	8000150 <strlen>
 8003428:	4603      	mov	r3, r0
 800342a:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8003430:	e01e      	b.n	8003470 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8003432:	4b36      	ldr	r3, [pc, #216]	@ (800350c <Copy_upto+0xf8>)
 8003434:	6819      	ldr	r1, [r3, #0]
 8003436:	4b35      	ldr	r3, [pc, #212]	@ (800350c <Copy_upto+0xf8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	6838      	ldr	r0, [r7, #0]
 8003442:	4403      	add	r3, r0
 8003444:	5c8a      	ldrb	r2, [r1, r2]
 8003446:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8003448:	4b30      	ldr	r3, [pc, #192]	@ (800350c <Copy_upto+0xf8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	4b2e      	ldr	r3, [pc, #184]	@ (800350c <Copy_upto+0xf8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800345a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
			indx++;
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	3301      	adds	r3, #1
 8003462:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8003464:	bf00      	nop
 8003466:	f7ff ff9f 	bl	80033a8 <IsDataAvailable>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0fa      	beq.n	8003466 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8003470:	f7ff ffb4 	bl	80033dc <Uart_peek>
 8003474:	4601      	mov	r1, r0
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	4413      	add	r3, r2
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	4299      	cmp	r1, r3
 8003480:	d1d7      	bne.n	8003432 <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8003482:	e027      	b.n	80034d4 <Copy_upto+0xc0>
	{
		so_far++;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	3301      	adds	r3, #1
 8003488:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 800348a:	f7ff ff61 	bl	8003350 <Uart_read>
 800348e:	4601      	mov	r1, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	613a      	str	r2, [r7, #16]
 8003496:	461a      	mov	r2, r3
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	4413      	add	r3, r2
 800349c:	b2ca      	uxtb	r2, r1
 800349e:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d101      	bne.n	80034ac <Copy_upto+0x98>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e02a      	b.n	8003502 <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 80034ac:	4b18      	ldr	r3, [pc, #96]	@ (8003510 <Copy_upto+0xfc>)
 80034ae:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80034b2:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 80034b4:	bf00      	nop
 80034b6:	f7ff ff77 	bl	80033a8 <IsDataAvailable>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d103      	bne.n	80034c8 <Copy_upto+0xb4>
 80034c0:	4b13      	ldr	r3, [pc, #76]	@ (8003510 <Copy_upto+0xfc>)
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f6      	bne.n	80034b6 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 80034c8:	4b11      	ldr	r3, [pc, #68]	@ (8003510 <Copy_upto+0xfc>)
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <Copy_upto+0xc0>
 80034d0:	2300      	movs	r3, #0
 80034d2:	e016      	b.n	8003502 <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 80034d4:	f7ff ff82 	bl	80033dc <Uart_peek>
 80034d8:	4601      	mov	r1, r0
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	4413      	add	r3, r2
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	4299      	cmp	r1, r3
 80034e4:	d0ce      	beq.n	8003484 <Copy_upto+0x70>
	}

	if (so_far != len)
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d002      	beq.n	80034f4 <Copy_upto+0xe0>
	{
		so_far = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
		goto again;
 80034f2:	e79d      	b.n	8003430 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d101      	bne.n	8003500 <Copy_upto+0xec>
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <Copy_upto+0xee>
	else return 0;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000df4 	.word	0x20000df4
 8003510:	20000df8 	.word	0x20000df8

08003514 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
	int so_far =0;
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7fc fe15 	bl	8000150 <strlen>
 8003526:	4603      	mov	r3, r0
 8003528:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 800352a:	4b3c      	ldr	r3, [pc, #240]	@ (800361c <Wait_for+0x108>)
 800352c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003530:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8003532:	bf00      	nop
 8003534:	f7ff ff38 	bl	80033a8 <IsDataAvailable>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d103      	bne.n	8003546 <Wait_for+0x32>
 800353e:	4b37      	ldr	r3, [pc, #220]	@ (800361c <Wait_for+0x108>)
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f6      	bne.n	8003534 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8003546:	4b35      	ldr	r3, [pc, #212]	@ (800361c <Wait_for+0x108>)
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d119      	bne.n	8003582 <Wait_for+0x6e>
 800354e:	2300      	movs	r3, #0
 8003550:	e060      	b.n	8003614 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8003552:	4b33      	ldr	r3, [pc, #204]	@ (8003620 <Wait_for+0x10c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800355a:	4b31      	ldr	r3, [pc, #196]	@ (8003620 <Wait_for+0x10c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003562:	429a      	cmp	r2, r3
 8003564:	d00b      	beq.n	800357e <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8003566:	4b2e      	ldr	r3, [pc, #184]	@ (8003620 <Wait_for+0x10c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800356e:	1c5a      	adds	r2, r3, #1
 8003570:	4b2b      	ldr	r3, [pc, #172]	@ (8003620 <Wait_for+0x10c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003578:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800357c:	e001      	b.n	8003582 <Wait_for+0x6e>
		}

		else
		{
			return 0;
 800357e:	2300      	movs	r3, #0
 8003580:	e048      	b.n	8003614 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8003582:	f7ff ff2b 	bl	80033dc <Uart_peek>
 8003586:	4601      	mov	r1, r0
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	4413      	add	r3, r2
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	4299      	cmp	r1, r3
 8003592:	d1de      	bne.n	8003552 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8003594:	e027      	b.n	80035e6 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	3301      	adds	r3, #1
 800359a:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 800359c:	4b20      	ldr	r3, [pc, #128]	@ (8003620 <Wait_for+0x10c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003620 <Wait_for+0x10c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035ae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		if (so_far == len) return 1;
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d101      	bne.n	80035be <Wait_for+0xaa>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e02a      	b.n	8003614 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 80035be:	4b17      	ldr	r3, [pc, #92]	@ (800361c <Wait_for+0x108>)
 80035c0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80035c4:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 80035c6:	bf00      	nop
 80035c8:	f7ff feee 	bl	80033a8 <IsDataAvailable>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d103      	bne.n	80035da <Wait_for+0xc6>
 80035d2:	4b12      	ldr	r3, [pc, #72]	@ (800361c <Wait_for+0x108>)
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f6      	bne.n	80035c8 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 80035da:	4b10      	ldr	r3, [pc, #64]	@ (800361c <Wait_for+0x108>)
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <Wait_for+0xd2>
 80035e2:	2300      	movs	r3, #0
 80035e4:	e016      	b.n	8003614 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 80035e6:	f7ff fef9 	bl	80033dc <Uart_peek>
 80035ea:	4601      	mov	r1, r0
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	4299      	cmp	r1, r3
 80035f6:	d0ce      	beq.n	8003596 <Wait_for+0x82>
	}

	if (so_far != len)
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d002      	beq.n	8003606 <Wait_for+0xf2>
	{
		so_far = 0;
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]
		goto again;
 8003604:	e791      	b.n	800352a <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	429a      	cmp	r2, r3
 800360c:	d101      	bne.n	8003612 <Wait_for+0xfe>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <Wait_for+0x100>
	else return 0;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20000df8 	.word	0x20000df8
 8003620:	20000df4 	.word	0x20000df4

08003624 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	d013      	beq.n	800366e <Uart_isr+0x4a>
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f003 0320 	and.w	r3, r3, #32
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00e      	beq.n	800366e <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800365e:	4b1e      	ldr	r3, [pc, #120]	@ (80036d8 <Uart_isr+0xb4>)
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	4611      	mov	r1, r2
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff fe50 	bl	800330c <store_char>
        return;
 800366c:	e031      	b.n	80036d2 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003674:	2b00      	cmp	r3, #0
 8003676:	d02c      	beq.n	80036d2 <Uart_isr+0xae>
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800367e:	2b00      	cmp	r3, #0
 8003680:	d027      	beq.n	80036d2 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8003682:	4b16      	ldr	r3, [pc, #88]	@ (80036dc <Uart_isr+0xb8>)
 8003684:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003688:	4b14      	ldr	r3, [pc, #80]	@ (80036dc <Uart_isr+0xb8>)
 800368a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800368e:	429a      	cmp	r2, r3
 8003690:	d108      	bne.n	80036a4 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036a0:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80036a2:	e015      	b.n	80036d0 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80036a4:	4b0d      	ldr	r3, [pc, #52]	@ (80036dc <Uart_isr+0xb8>)
 80036a6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80036aa:	4a0c      	ldr	r2, [pc, #48]	@ (80036dc <Uart_isr+0xb8>)
 80036ac:	5cd3      	ldrb	r3, [r2, r3]
 80036ae:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80036b0:	4b0a      	ldr	r3, [pc, #40]	@ (80036dc <Uart_isr+0xb8>)
 80036b2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80036b6:	3301      	adds	r3, #1
 80036b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036bc:	4a07      	ldr	r2, [pc, #28]	@ (80036dc <Uart_isr+0xb8>)
 80036be:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    	      huart->Instance->SR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	7bba      	ldrb	r2, [r7, #14]
 80036ce:	605a      	str	r2, [r3, #4]
    	return;
 80036d0:	bf00      	nop
    }
}
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	20000df4 	.word	0x20000df4
 80036dc:	20000874 	.word	0x20000874

080036e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80036e0:	f7ff fde8 	bl	80032b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036e4:	480b      	ldr	r0, [pc, #44]	@ (8003714 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80036e6:	490c      	ldr	r1, [pc, #48]	@ (8003718 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80036e8:	4a0c      	ldr	r2, [pc, #48]	@ (800371c <LoopFillZerobss+0x16>)
  movs r3, #0
 80036ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036ec:	e002      	b.n	80036f4 <LoopCopyDataInit>

080036ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036f2:	3304      	adds	r3, #4

080036f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036f8:	d3f9      	bcc.n	80036ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036fa:	4a09      	ldr	r2, [pc, #36]	@ (8003720 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80036fc:	4c09      	ldr	r4, [pc, #36]	@ (8003724 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003700:	e001      	b.n	8003706 <LoopFillZerobss>

08003702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003704:	3204      	adds	r2, #4

08003706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003708:	d3fb      	bcc.n	8003702 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800370a:	f004 fa6d 	bl	8007be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800370e:	f7fe fe43 	bl	8002398 <main>
  bx lr
 8003712:	4770      	bx	lr
  ldr r0, =_sdata
 8003714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003718:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 800371c:	0800cdb0 	.word	0x0800cdb0
  ldr r2, =_sbss
 8003720:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003724:	20000e00 	.word	0x20000e00

08003728 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003728:	e7fe      	b.n	8003728 <ADC1_2_IRQHandler>
	...

0800372c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003730:	4b08      	ldr	r3, [pc, #32]	@ (8003754 <HAL_Init+0x28>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a07      	ldr	r2, [pc, #28]	@ (8003754 <HAL_Init+0x28>)
 8003736:	f043 0310 	orr.w	r3, r3, #16
 800373a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800373c:	2003      	movs	r0, #3
 800373e:	f000 f947 	bl	80039d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003742:	200f      	movs	r0, #15
 8003744:	f000 f808 	bl	8003758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003748:	f7ff fb84 	bl	8002e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40022000 	.word	0x40022000

08003758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003760:	4b12      	ldr	r3, [pc, #72]	@ (80037ac <HAL_InitTick+0x54>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	4b12      	ldr	r3, [pc, #72]	@ (80037b0 <HAL_InitTick+0x58>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	4619      	mov	r1, r3
 800376a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800376e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003772:	fbb2 f3f3 	udiv	r3, r2, r3
 8003776:	4618      	mov	r0, r3
 8003778:	f000 f95f 	bl	8003a3a <HAL_SYSTICK_Config>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e00e      	b.n	80037a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b0f      	cmp	r3, #15
 800378a:	d80a      	bhi.n	80037a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800378c:	2200      	movs	r2, #0
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	f04f 30ff 	mov.w	r0, #4294967295
 8003794:	f000 f927 	bl	80039e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003798:	4a06      	ldr	r2, [pc, #24]	@ (80037b4 <HAL_InitTick+0x5c>)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	e000      	b.n	80037a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000018 	.word	0x20000018
 80037b0:	20000020 	.word	0x20000020
 80037b4:	2000001c 	.word	0x2000001c

080037b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037bc:	4b05      	ldr	r3, [pc, #20]	@ (80037d4 <HAL_IncTick+0x1c>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	4b05      	ldr	r3, [pc, #20]	@ (80037d8 <HAL_IncTick+0x20>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4413      	add	r3, r2
 80037c8:	4a03      	ldr	r2, [pc, #12]	@ (80037d8 <HAL_IncTick+0x20>)
 80037ca:	6013      	str	r3, [r2, #0]
}
 80037cc:	bf00      	nop
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr
 80037d4:	20000020 	.word	0x20000020
 80037d8:	20000dfc 	.word	0x20000dfc

080037dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  return uwTick;
 80037e0:	4b02      	ldr	r3, [pc, #8]	@ (80037ec <HAL_GetTick+0x10>)
 80037e2:	681b      	ldr	r3, [r3, #0]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr
 80037ec:	20000dfc 	.word	0x20000dfc

080037f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037f8:	f7ff fff0 	bl	80037dc <HAL_GetTick>
 80037fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003808:	d005      	beq.n	8003816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800380a:	4b0a      	ldr	r3, [pc, #40]	@ (8003834 <HAL_Delay+0x44>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4413      	add	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003816:	bf00      	nop
 8003818:	f7ff ffe0 	bl	80037dc <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	429a      	cmp	r2, r3
 8003826:	d8f7      	bhi.n	8003818 <HAL_Delay+0x28>
  {
  }
}
 8003828:	bf00      	nop
 800382a:	bf00      	nop
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000020 	.word	0x20000020

08003838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003848:	4b0c      	ldr	r3, [pc, #48]	@ (800387c <__NVIC_SetPriorityGrouping+0x44>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003854:	4013      	ands	r3, r2
 8003856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003860:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800386a:	4a04      	ldr	r2, [pc, #16]	@ (800387c <__NVIC_SetPriorityGrouping+0x44>)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	60d3      	str	r3, [r2, #12]
}
 8003870:	bf00      	nop
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	e000ed00 	.word	0xe000ed00

08003880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003884:	4b04      	ldr	r3, [pc, #16]	@ (8003898 <__NVIC_GetPriorityGrouping+0x18>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	0a1b      	lsrs	r3, r3, #8
 800388a:	f003 0307 	and.w	r3, r3, #7
}
 800388e:	4618      	mov	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	db0b      	blt.n	80038c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ae:	79fb      	ldrb	r3, [r7, #7]
 80038b0:	f003 021f 	and.w	r2, r3, #31
 80038b4:	4906      	ldr	r1, [pc, #24]	@ (80038d0 <__NVIC_EnableIRQ+0x34>)
 80038b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	2001      	movs	r0, #1
 80038be:	fa00 f202 	lsl.w	r2, r0, r2
 80038c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr
 80038d0:	e000e100 	.word	0xe000e100

080038d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	6039      	str	r1, [r7, #0]
 80038de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	db0a      	blt.n	80038fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	490c      	ldr	r1, [pc, #48]	@ (8003920 <__NVIC_SetPriority+0x4c>)
 80038ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f2:	0112      	lsls	r2, r2, #4
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	440b      	add	r3, r1
 80038f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038fc:	e00a      	b.n	8003914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	b2da      	uxtb	r2, r3
 8003902:	4908      	ldr	r1, [pc, #32]	@ (8003924 <__NVIC_SetPriority+0x50>)
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	3b04      	subs	r3, #4
 800390c:	0112      	lsls	r2, r2, #4
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	440b      	add	r3, r1
 8003912:	761a      	strb	r2, [r3, #24]
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	e000e100 	.word	0xe000e100
 8003924:	e000ed00 	.word	0xe000ed00

08003928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003928:	b480      	push	{r7}
 800392a:	b089      	sub	sp, #36	@ 0x24
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f1c3 0307 	rsb	r3, r3, #7
 8003942:	2b04      	cmp	r3, #4
 8003944:	bf28      	it	cs
 8003946:	2304      	movcs	r3, #4
 8003948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	3304      	adds	r3, #4
 800394e:	2b06      	cmp	r3, #6
 8003950:	d902      	bls.n	8003958 <NVIC_EncodePriority+0x30>
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	3b03      	subs	r3, #3
 8003956:	e000      	b.n	800395a <NVIC_EncodePriority+0x32>
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800395c:	f04f 32ff 	mov.w	r2, #4294967295
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43da      	mvns	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	401a      	ands	r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003970:	f04f 31ff 	mov.w	r1, #4294967295
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	fa01 f303 	lsl.w	r3, r1, r3
 800397a:	43d9      	mvns	r1, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003980:	4313      	orrs	r3, r2
         );
}
 8003982:	4618      	mov	r0, r3
 8003984:	3724      	adds	r7, #36	@ 0x24
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr

0800398c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3b01      	subs	r3, #1
 8003998:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800399c:	d301      	bcc.n	80039a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800399e:	2301      	movs	r3, #1
 80039a0:	e00f      	b.n	80039c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039a2:	4a0a      	ldr	r2, [pc, #40]	@ (80039cc <SysTick_Config+0x40>)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039aa:	210f      	movs	r1, #15
 80039ac:	f04f 30ff 	mov.w	r0, #4294967295
 80039b0:	f7ff ff90 	bl	80038d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039b4:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <SysTick_Config+0x40>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ba:	4b04      	ldr	r3, [pc, #16]	@ (80039cc <SysTick_Config+0x40>)
 80039bc:	2207      	movs	r2, #7
 80039be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	e000e010 	.word	0xe000e010

080039d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ff2d 	bl	8003838 <__NVIC_SetPriorityGrouping>
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b086      	sub	sp, #24
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	4603      	mov	r3, r0
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039f8:	f7ff ff42 	bl	8003880 <__NVIC_GetPriorityGrouping>
 80039fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	68b9      	ldr	r1, [r7, #8]
 8003a02:	6978      	ldr	r0, [r7, #20]
 8003a04:	f7ff ff90 	bl	8003928 <NVIC_EncodePriority>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a0e:	4611      	mov	r1, r2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff ff5f 	bl	80038d4 <__NVIC_SetPriority>
}
 8003a16:	bf00      	nop
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	4603      	mov	r3, r0
 8003a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff ff35 	bl	800389c <__NVIC_EnableIRQ>
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff ffa2 	bl	800398c <SysTick_Config>
 8003a48:	4603      	mov	r3, r0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b085      	sub	sp, #20
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d008      	beq.n	8003a7c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2204      	movs	r2, #4
 8003a6e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e020      	b.n	8003abe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 020e 	bic.w	r2, r2, #14
 8003a8a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0201 	bic.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aaa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d005      	beq.n	8003aec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2204      	movs	r2, #4
 8003ae4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	73fb      	strb	r3, [r7, #15]
 8003aea:	e051      	b.n	8003b90 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 020e 	bic.w	r2, r2, #14
 8003afa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0201 	bic.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a22      	ldr	r2, [pc, #136]	@ (8003b9c <HAL_DMA_Abort_IT+0xd4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d029      	beq.n	8003b6a <HAL_DMA_Abort_IT+0xa2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a21      	ldr	r2, [pc, #132]	@ (8003ba0 <HAL_DMA_Abort_IT+0xd8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d022      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x9e>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a1f      	ldr	r2, [pc, #124]	@ (8003ba4 <HAL_DMA_Abort_IT+0xdc>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d01a      	beq.n	8003b60 <HAL_DMA_Abort_IT+0x98>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ba8 <HAL_DMA_Abort_IT+0xe0>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d012      	beq.n	8003b5a <HAL_DMA_Abort_IT+0x92>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a1c      	ldr	r2, [pc, #112]	@ (8003bac <HAL_DMA_Abort_IT+0xe4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00a      	beq.n	8003b54 <HAL_DMA_Abort_IT+0x8c>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a1b      	ldr	r2, [pc, #108]	@ (8003bb0 <HAL_DMA_Abort_IT+0xe8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d102      	bne.n	8003b4e <HAL_DMA_Abort_IT+0x86>
 8003b48:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003b4c:	e00e      	b.n	8003b6c <HAL_DMA_Abort_IT+0xa4>
 8003b4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b52:	e00b      	b.n	8003b6c <HAL_DMA_Abort_IT+0xa4>
 8003b54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b58:	e008      	b.n	8003b6c <HAL_DMA_Abort_IT+0xa4>
 8003b5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b5e:	e005      	b.n	8003b6c <HAL_DMA_Abort_IT+0xa4>
 8003b60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b64:	e002      	b.n	8003b6c <HAL_DMA_Abort_IT+0xa4>
 8003b66:	2310      	movs	r3, #16
 8003b68:	e000      	b.n	8003b6c <HAL_DMA_Abort_IT+0xa4>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	4a11      	ldr	r2, [pc, #68]	@ (8003bb4 <HAL_DMA_Abort_IT+0xec>)
 8003b6e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	4798      	blx	r3
    } 
  }
  return status;
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40020008 	.word	0x40020008
 8003ba0:	4002001c 	.word	0x4002001c
 8003ba4:	40020030 	.word	0x40020030
 8003ba8:	40020044 	.word	0x40020044
 8003bac:	40020058 	.word	0x40020058
 8003bb0:	4002006c 	.word	0x4002006c
 8003bb4:	40020000 	.word	0x40020000

08003bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b08b      	sub	sp, #44	@ 0x2c
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bca:	e169      	b.n	8003ea0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003bcc:	2201      	movs	r2, #1
 8003bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69fa      	ldr	r2, [r7, #28]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	f040 8158 	bne.w	8003e9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	4a9a      	ldr	r2, [pc, #616]	@ (8003e58 <HAL_GPIO_Init+0x2a0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d05e      	beq.n	8003cb2 <HAL_GPIO_Init+0xfa>
 8003bf4:	4a98      	ldr	r2, [pc, #608]	@ (8003e58 <HAL_GPIO_Init+0x2a0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d875      	bhi.n	8003ce6 <HAL_GPIO_Init+0x12e>
 8003bfa:	4a98      	ldr	r2, [pc, #608]	@ (8003e5c <HAL_GPIO_Init+0x2a4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d058      	beq.n	8003cb2 <HAL_GPIO_Init+0xfa>
 8003c00:	4a96      	ldr	r2, [pc, #600]	@ (8003e5c <HAL_GPIO_Init+0x2a4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d86f      	bhi.n	8003ce6 <HAL_GPIO_Init+0x12e>
 8003c06:	4a96      	ldr	r2, [pc, #600]	@ (8003e60 <HAL_GPIO_Init+0x2a8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d052      	beq.n	8003cb2 <HAL_GPIO_Init+0xfa>
 8003c0c:	4a94      	ldr	r2, [pc, #592]	@ (8003e60 <HAL_GPIO_Init+0x2a8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d869      	bhi.n	8003ce6 <HAL_GPIO_Init+0x12e>
 8003c12:	4a94      	ldr	r2, [pc, #592]	@ (8003e64 <HAL_GPIO_Init+0x2ac>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d04c      	beq.n	8003cb2 <HAL_GPIO_Init+0xfa>
 8003c18:	4a92      	ldr	r2, [pc, #584]	@ (8003e64 <HAL_GPIO_Init+0x2ac>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d863      	bhi.n	8003ce6 <HAL_GPIO_Init+0x12e>
 8003c1e:	4a92      	ldr	r2, [pc, #584]	@ (8003e68 <HAL_GPIO_Init+0x2b0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d046      	beq.n	8003cb2 <HAL_GPIO_Init+0xfa>
 8003c24:	4a90      	ldr	r2, [pc, #576]	@ (8003e68 <HAL_GPIO_Init+0x2b0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d85d      	bhi.n	8003ce6 <HAL_GPIO_Init+0x12e>
 8003c2a:	2b12      	cmp	r3, #18
 8003c2c:	d82a      	bhi.n	8003c84 <HAL_GPIO_Init+0xcc>
 8003c2e:	2b12      	cmp	r3, #18
 8003c30:	d859      	bhi.n	8003ce6 <HAL_GPIO_Init+0x12e>
 8003c32:	a201      	add	r2, pc, #4	@ (adr r2, 8003c38 <HAL_GPIO_Init+0x80>)
 8003c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c38:	08003cb3 	.word	0x08003cb3
 8003c3c:	08003c8d 	.word	0x08003c8d
 8003c40:	08003c9f 	.word	0x08003c9f
 8003c44:	08003ce1 	.word	0x08003ce1
 8003c48:	08003ce7 	.word	0x08003ce7
 8003c4c:	08003ce7 	.word	0x08003ce7
 8003c50:	08003ce7 	.word	0x08003ce7
 8003c54:	08003ce7 	.word	0x08003ce7
 8003c58:	08003ce7 	.word	0x08003ce7
 8003c5c:	08003ce7 	.word	0x08003ce7
 8003c60:	08003ce7 	.word	0x08003ce7
 8003c64:	08003ce7 	.word	0x08003ce7
 8003c68:	08003ce7 	.word	0x08003ce7
 8003c6c:	08003ce7 	.word	0x08003ce7
 8003c70:	08003ce7 	.word	0x08003ce7
 8003c74:	08003ce7 	.word	0x08003ce7
 8003c78:	08003ce7 	.word	0x08003ce7
 8003c7c:	08003c95 	.word	0x08003c95
 8003c80:	08003ca9 	.word	0x08003ca9
 8003c84:	4a79      	ldr	r2, [pc, #484]	@ (8003e6c <HAL_GPIO_Init+0x2b4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d013      	beq.n	8003cb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c8a:	e02c      	b.n	8003ce6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	623b      	str	r3, [r7, #32]
          break;
 8003c92:	e029      	b.n	8003ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	623b      	str	r3, [r7, #32]
          break;
 8003c9c:	e024      	b.n	8003ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	623b      	str	r3, [r7, #32]
          break;
 8003ca6:	e01f      	b.n	8003ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	330c      	adds	r3, #12
 8003cae:	623b      	str	r3, [r7, #32]
          break;
 8003cb0:	e01a      	b.n	8003ce8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d102      	bne.n	8003cc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003cba:	2304      	movs	r3, #4
 8003cbc:	623b      	str	r3, [r7, #32]
          break;
 8003cbe:	e013      	b.n	8003ce8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d105      	bne.n	8003cd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cc8:	2308      	movs	r3, #8
 8003cca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	611a      	str	r2, [r3, #16]
          break;
 8003cd2:	e009      	b.n	8003ce8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cd4:	2308      	movs	r3, #8
 8003cd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69fa      	ldr	r2, [r7, #28]
 8003cdc:	615a      	str	r2, [r3, #20]
          break;
 8003cde:	e003      	b.n	8003ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	623b      	str	r3, [r7, #32]
          break;
 8003ce4:	e000      	b.n	8003ce8 <HAL_GPIO_Init+0x130>
          break;
 8003ce6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	2bff      	cmp	r3, #255	@ 0xff
 8003cec:	d801      	bhi.n	8003cf2 <HAL_GPIO_Init+0x13a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	e001      	b.n	8003cf6 <HAL_GPIO_Init+0x13e>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	2bff      	cmp	r3, #255	@ 0xff
 8003cfc:	d802      	bhi.n	8003d04 <HAL_GPIO_Init+0x14c>
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	e002      	b.n	8003d0a <HAL_GPIO_Init+0x152>
 8003d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d06:	3b08      	subs	r3, #8
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	210f      	movs	r1, #15
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	fa01 f303 	lsl.w	r3, r1, r3
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	401a      	ands	r2, r3
 8003d1c:	6a39      	ldr	r1, [r7, #32]
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	fa01 f303 	lsl.w	r3, r1, r3
 8003d24:	431a      	orrs	r2, r3
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 80b1 	beq.w	8003e9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d38:	4b4d      	ldr	r3, [pc, #308]	@ (8003e70 <HAL_GPIO_Init+0x2b8>)
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	4a4c      	ldr	r2, [pc, #304]	@ (8003e70 <HAL_GPIO_Init+0x2b8>)
 8003d3e:	f043 0301 	orr.w	r3, r3, #1
 8003d42:	6193      	str	r3, [r2, #24]
 8003d44:	4b4a      	ldr	r3, [pc, #296]	@ (8003e70 <HAL_GPIO_Init+0x2b8>)
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	60bb      	str	r3, [r7, #8]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d50:	4a48      	ldr	r2, [pc, #288]	@ (8003e74 <HAL_GPIO_Init+0x2bc>)
 8003d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d54:	089b      	lsrs	r3, r3, #2
 8003d56:	3302      	adds	r3, #2
 8003d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	220f      	movs	r2, #15
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4013      	ands	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a40      	ldr	r2, [pc, #256]	@ (8003e78 <HAL_GPIO_Init+0x2c0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d013      	beq.n	8003da4 <HAL_GPIO_Init+0x1ec>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a3f      	ldr	r2, [pc, #252]	@ (8003e7c <HAL_GPIO_Init+0x2c4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00d      	beq.n	8003da0 <HAL_GPIO_Init+0x1e8>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a3e      	ldr	r2, [pc, #248]	@ (8003e80 <HAL_GPIO_Init+0x2c8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d007      	beq.n	8003d9c <HAL_GPIO_Init+0x1e4>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a3d      	ldr	r2, [pc, #244]	@ (8003e84 <HAL_GPIO_Init+0x2cc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d101      	bne.n	8003d98 <HAL_GPIO_Init+0x1e0>
 8003d94:	2303      	movs	r3, #3
 8003d96:	e006      	b.n	8003da6 <HAL_GPIO_Init+0x1ee>
 8003d98:	2304      	movs	r3, #4
 8003d9a:	e004      	b.n	8003da6 <HAL_GPIO_Init+0x1ee>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e002      	b.n	8003da6 <HAL_GPIO_Init+0x1ee>
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <HAL_GPIO_Init+0x1ee>
 8003da4:	2300      	movs	r3, #0
 8003da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da8:	f002 0203 	and.w	r2, r2, #3
 8003dac:	0092      	lsls	r2, r2, #2
 8003dae:	4093      	lsls	r3, r2
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003db6:	492f      	ldr	r1, [pc, #188]	@ (8003e74 <HAL_GPIO_Init+0x2bc>)
 8003db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dba:	089b      	lsrs	r3, r3, #2
 8003dbc:	3302      	adds	r3, #2
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d006      	beq.n	8003dde <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	492c      	ldr	r1, [pc, #176]	@ (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	608b      	str	r3, [r1, #8]
 8003ddc:	e006      	b.n	8003dec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003dde:	4b2a      	ldr	r3, [pc, #168]	@ (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	43db      	mvns	r3, r3
 8003de6:	4928      	ldr	r1, [pc, #160]	@ (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003de8:	4013      	ands	r3, r2
 8003dea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d006      	beq.n	8003e06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003df8:	4b23      	ldr	r3, [pc, #140]	@ (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	4922      	ldr	r1, [pc, #136]	@ (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	60cb      	str	r3, [r1, #12]
 8003e04:	e006      	b.n	8003e14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e06:	4b20      	ldr	r3, [pc, #128]	@ (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	491e      	ldr	r1, [pc, #120]	@ (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d006      	beq.n	8003e2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e20:	4b19      	ldr	r3, [pc, #100]	@ (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	4918      	ldr	r1, [pc, #96]	@ (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	604b      	str	r3, [r1, #4]
 8003e2c:	e006      	b.n	8003e3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e2e:	4b16      	ldr	r3, [pc, #88]	@ (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	43db      	mvns	r3, r3
 8003e36:	4914      	ldr	r1, [pc, #80]	@ (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003e38:	4013      	ands	r3, r2
 8003e3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d021      	beq.n	8003e8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e48:	4b0f      	ldr	r3, [pc, #60]	@ (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	490e      	ldr	r1, [pc, #56]	@ (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	600b      	str	r3, [r1, #0]
 8003e54:	e021      	b.n	8003e9a <HAL_GPIO_Init+0x2e2>
 8003e56:	bf00      	nop
 8003e58:	10320000 	.word	0x10320000
 8003e5c:	10310000 	.word	0x10310000
 8003e60:	10220000 	.word	0x10220000
 8003e64:	10210000 	.word	0x10210000
 8003e68:	10120000 	.word	0x10120000
 8003e6c:	10110000 	.word	0x10110000
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40010000 	.word	0x40010000
 8003e78:	40010800 	.word	0x40010800
 8003e7c:	40010c00 	.word	0x40010c00
 8003e80:	40011000 	.word	0x40011000
 8003e84:	40011400 	.word	0x40011400
 8003e88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003ebc <HAL_GPIO_Init+0x304>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	43db      	mvns	r3, r3
 8003e94:	4909      	ldr	r1, [pc, #36]	@ (8003ebc <HAL_GPIO_Init+0x304>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f47f ae8e 	bne.w	8003bcc <HAL_GPIO_Init+0x14>
  }
}
 8003eb0:	bf00      	nop
 8003eb2:	bf00      	nop
 8003eb4:	372c      	adds	r7, #44	@ 0x2c
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr
 8003ebc:	40010400 	.word	0x40010400

08003ec0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e12b      	b.n	800412a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d106      	bne.n	8003eec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7fe ffe6 	bl	8002eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2224      	movs	r2, #36	@ 0x24
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0201 	bic.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f24:	f001 f960 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 8003f28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	4a81      	ldr	r2, [pc, #516]	@ (8004134 <HAL_I2C_Init+0x274>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d807      	bhi.n	8003f44 <HAL_I2C_Init+0x84>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4a80      	ldr	r2, [pc, #512]	@ (8004138 <HAL_I2C_Init+0x278>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	bf94      	ite	ls
 8003f3c:	2301      	movls	r3, #1
 8003f3e:	2300      	movhi	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	e006      	b.n	8003f52 <HAL_I2C_Init+0x92>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4a7d      	ldr	r2, [pc, #500]	@ (800413c <HAL_I2C_Init+0x27c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	bf94      	ite	ls
 8003f4c:	2301      	movls	r3, #1
 8003f4e:	2300      	movhi	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e0e7      	b.n	800412a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4a78      	ldr	r2, [pc, #480]	@ (8004140 <HAL_I2C_Init+0x280>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	0c9b      	lsrs	r3, r3, #18
 8003f64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	4a6a      	ldr	r2, [pc, #424]	@ (8004134 <HAL_I2C_Init+0x274>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d802      	bhi.n	8003f94 <HAL_I2C_Init+0xd4>
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	3301      	adds	r3, #1
 8003f92:	e009      	b.n	8003fa8 <HAL_I2C_Init+0xe8>
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003f9a:	fb02 f303 	mul.w	r3, r2, r3
 8003f9e:	4a69      	ldr	r2, [pc, #420]	@ (8004144 <HAL_I2C_Init+0x284>)
 8003fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa4:	099b      	lsrs	r3, r3, #6
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	430b      	orrs	r3, r1
 8003fae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003fba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	495c      	ldr	r1, [pc, #368]	@ (8004134 <HAL_I2C_Init+0x274>)
 8003fc4:	428b      	cmp	r3, r1
 8003fc6:	d819      	bhi.n	8003ffc <HAL_I2C_Init+0x13c>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	1e59      	subs	r1, r3, #1
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fd6:	1c59      	adds	r1, r3, #1
 8003fd8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003fdc:	400b      	ands	r3, r1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_I2C_Init+0x138>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	1e59      	subs	r1, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff6:	e051      	b.n	800409c <HAL_I2C_Init+0x1dc>
 8003ff8:	2304      	movs	r3, #4
 8003ffa:	e04f      	b.n	800409c <HAL_I2C_Init+0x1dc>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d111      	bne.n	8004028 <HAL_I2C_Init+0x168>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	1e58      	subs	r0, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6859      	ldr	r1, [r3, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	440b      	add	r3, r1
 8004012:	fbb0 f3f3 	udiv	r3, r0, r3
 8004016:	3301      	adds	r3, #1
 8004018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800401c:	2b00      	cmp	r3, #0
 800401e:	bf0c      	ite	eq
 8004020:	2301      	moveq	r3, #1
 8004022:	2300      	movne	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	e012      	b.n	800404e <HAL_I2C_Init+0x18e>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	1e58      	subs	r0, r3, #1
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6859      	ldr	r1, [r3, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	0099      	lsls	r1, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	fbb0 f3f3 	udiv	r3, r0, r3
 800403e:	3301      	adds	r3, #1
 8004040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004044:	2b00      	cmp	r3, #0
 8004046:	bf0c      	ite	eq
 8004048:	2301      	moveq	r3, #1
 800404a:	2300      	movne	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_I2C_Init+0x196>
 8004052:	2301      	movs	r3, #1
 8004054:	e022      	b.n	800409c <HAL_I2C_Init+0x1dc>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10e      	bne.n	800407c <HAL_I2C_Init+0x1bc>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	1e58      	subs	r0, r3, #1
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6859      	ldr	r1, [r3, #4]
 8004066:	460b      	mov	r3, r1
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	440b      	add	r3, r1
 800406c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004070:	3301      	adds	r3, #1
 8004072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004076:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800407a:	e00f      	b.n	800409c <HAL_I2C_Init+0x1dc>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	1e58      	subs	r0, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6859      	ldr	r1, [r3, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	0099      	lsls	r1, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004092:	3301      	adds	r3, #1
 8004094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004098:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	6809      	ldr	r1, [r1, #0]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69da      	ldr	r2, [r3, #28]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80040ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6911      	ldr	r1, [r2, #16]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	68d2      	ldr	r2, [r2, #12]
 80040d6:	4311      	orrs	r1, r2
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6812      	ldr	r2, [r2, #0]
 80040dc:	430b      	orrs	r3, r1
 80040de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	695a      	ldr	r2, [r3, #20]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	000186a0 	.word	0x000186a0
 8004138:	001e847f 	.word	0x001e847f
 800413c:	003d08ff 	.word	0x003d08ff
 8004140:	431bde83 	.word	0x431bde83
 8004144:	10624dd3 	.word	0x10624dd3

08004148 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af02      	add	r7, sp, #8
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	607a      	str	r2, [r7, #4]
 8004152:	461a      	mov	r2, r3
 8004154:	460b      	mov	r3, r1
 8004156:	817b      	strh	r3, [r7, #10]
 8004158:	4613      	mov	r3, r2
 800415a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800415c:	f7ff fb3e 	bl	80037dc <HAL_GetTick>
 8004160:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b20      	cmp	r3, #32
 800416c:	f040 80e0 	bne.w	8004330 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	2319      	movs	r3, #25
 8004176:	2201      	movs	r2, #1
 8004178:	4970      	ldr	r1, [pc, #448]	@ (800433c <HAL_I2C_Master_Transmit+0x1f4>)
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 fa92 	bl	80046a4 <I2C_WaitOnFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004186:	2302      	movs	r3, #2
 8004188:	e0d3      	b.n	8004332 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_I2C_Master_Transmit+0x50>
 8004194:	2302      	movs	r3, #2
 8004196:	e0cc      	b.n	8004332 <HAL_I2C_Master_Transmit+0x1ea>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d007      	beq.n	80041be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0201 	orr.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2221      	movs	r2, #33	@ 0x21
 80041d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2210      	movs	r2, #16
 80041da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	893a      	ldrh	r2, [r7, #8]
 80041ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4a50      	ldr	r2, [pc, #320]	@ (8004340 <HAL_I2C_Master_Transmit+0x1f8>)
 80041fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004200:	8979      	ldrh	r1, [r7, #10]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	6a3a      	ldr	r2, [r7, #32]
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 f9ca 	bl	80045a0 <I2C_MasterRequestWrite>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e08d      	b.n	8004332 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004216:	2300      	movs	r3, #0
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800422c:	e066      	b.n	80042fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	6a39      	ldr	r1, [r7, #32]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 fb50 	bl	80048d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00d      	beq.n	800425a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004242:	2b04      	cmp	r3, #4
 8004244:	d107      	bne.n	8004256 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004254:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e06b      	b.n	8004332 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425e:	781a      	ldrb	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b04      	cmp	r3, #4
 8004296:	d11b      	bne.n	80042d0 <HAL_I2C_Master_Transmit+0x188>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800429c:	2b00      	cmp	r3, #0
 800429e:	d017      	beq.n	80042d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	781a      	ldrb	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	6a39      	ldr	r1, [r7, #32]
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 fb47 	bl	8004968 <I2C_WaitOnBTFFlagUntilTimeout>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00d      	beq.n	80042fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d107      	bne.n	80042f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e01a      	b.n	8004332 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004300:	2b00      	cmp	r3, #0
 8004302:	d194      	bne.n	800422e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	e000      	b.n	8004332 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004330:	2302      	movs	r3, #2
  }
}
 8004332:	4618      	mov	r0, r3
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	00100002 	.word	0x00100002
 8004340:	ffff0000 	.word	0xffff0000

08004344 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08a      	sub	sp, #40	@ 0x28
 8004348:	af02      	add	r7, sp, #8
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	607a      	str	r2, [r7, #4]
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	460b      	mov	r3, r1
 8004352:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004354:	f7ff fa42 	bl	80037dc <HAL_GetTick>
 8004358:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b20      	cmp	r3, #32
 8004368:	f040 8111 	bne.w	800458e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	2319      	movs	r3, #25
 8004372:	2201      	movs	r2, #1
 8004374:	4988      	ldr	r1, [pc, #544]	@ (8004598 <HAL_I2C_IsDeviceReady+0x254>)
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 f994 	bl	80046a4 <I2C_WaitOnFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004382:	2302      	movs	r3, #2
 8004384:	e104      	b.n	8004590 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_I2C_IsDeviceReady+0x50>
 8004390:	2302      	movs	r3, #2
 8004392:	e0fd      	b.n	8004590 <HAL_I2C_IsDeviceReady+0x24c>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d007      	beq.n	80043ba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f042 0201 	orr.w	r2, r2, #1
 80043b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2224      	movs	r2, #36	@ 0x24
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4a70      	ldr	r2, [pc, #448]	@ (800459c <HAL_I2C_IsDeviceReady+0x258>)
 80043dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043ec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 f952 	bl	80046a4 <I2C_WaitOnFlagUntilTimeout>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00d      	beq.n	8004422 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004410:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004414:	d103      	bne.n	800441e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800441c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e0b6      	b.n	8004590 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004422:	897b      	ldrh	r3, [r7, #10]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	461a      	mov	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004430:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004432:	f7ff f9d3 	bl	80037dc <HAL_GetTick>
 8004436:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b02      	cmp	r3, #2
 8004444:	bf0c      	ite	eq
 8004446:	2301      	moveq	r3, #1
 8004448:	2300      	movne	r3, #0
 800444a:	b2db      	uxtb	r3, r3
 800444c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800445c:	bf0c      	ite	eq
 800445e:	2301      	moveq	r3, #1
 8004460:	2300      	movne	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004466:	e025      	b.n	80044b4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004468:	f7ff f9b8 	bl	80037dc <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d302      	bcc.n	800447e <HAL_I2C_IsDeviceReady+0x13a>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d103      	bne.n	8004486 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	22a0      	movs	r2, #160	@ 0xa0
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b02      	cmp	r3, #2
 8004492:	bf0c      	ite	eq
 8004494:	2301      	moveq	r3, #1
 8004496:	2300      	movne	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044aa:	bf0c      	ite	eq
 80044ac:	2301      	moveq	r3, #1
 80044ae:	2300      	movne	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80044be:	d005      	beq.n	80044cc <HAL_I2C_IsDeviceReady+0x188>
 80044c0:	7dfb      	ldrb	r3, [r7, #23]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d102      	bne.n	80044cc <HAL_I2C_IsDeviceReady+0x188>
 80044c6:	7dbb      	ldrb	r3, [r7, #22]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0cd      	beq.n	8004468 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d129      	bne.n	8004536 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044f0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044f2:	2300      	movs	r3, #0
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	613b      	str	r3, [r7, #16]
 8004506:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	2319      	movs	r3, #25
 800450e:	2201      	movs	r2, #1
 8004510:	4921      	ldr	r1, [pc, #132]	@ (8004598 <HAL_I2C_IsDeviceReady+0x254>)
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f8c6 	bl	80046a4 <I2C_WaitOnFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e036      	b.n	8004590 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	e02c      	b.n	8004590 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004544:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800454e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	2319      	movs	r3, #25
 8004556:	2201      	movs	r2, #1
 8004558:	490f      	ldr	r1, [pc, #60]	@ (8004598 <HAL_I2C_IsDeviceReady+0x254>)
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 f8a2 	bl	80046a4 <I2C_WaitOnFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e012      	b.n	8004590 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	3301      	adds	r3, #1
 800456e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	429a      	cmp	r2, r3
 8004576:	f4ff af32 	bcc.w	80043de <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2220      	movs	r2, #32
 800457e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800458e:	2302      	movs	r3, #2
  }
}
 8004590:	4618      	mov	r0, r3
 8004592:	3720      	adds	r7, #32
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	00100002 	.word	0x00100002
 800459c:	ffff0000 	.word	0xffff0000

080045a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	607a      	str	r2, [r7, #4]
 80045aa:	603b      	str	r3, [r7, #0]
 80045ac:	460b      	mov	r3, r1
 80045ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d006      	beq.n	80045ca <I2C_MasterRequestWrite+0x2a>
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d003      	beq.n	80045ca <I2C_MasterRequestWrite+0x2a>
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045c8:	d108      	bne.n	80045dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	e00b      	b.n	80045f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e0:	2b12      	cmp	r3, #18
 80045e2:	d107      	bne.n	80045f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 f84f 	bl	80046a4 <I2C_WaitOnFlagUntilTimeout>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00d      	beq.n	8004628 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004616:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800461a:	d103      	bne.n	8004624 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004622:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e035      	b.n	8004694 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004630:	d108      	bne.n	8004644 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004632:	897b      	ldrh	r3, [r7, #10]
 8004634:	b2db      	uxtb	r3, r3
 8004636:	461a      	mov	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004640:	611a      	str	r2, [r3, #16]
 8004642:	e01b      	b.n	800467c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004644:	897b      	ldrh	r3, [r7, #10]
 8004646:	11db      	asrs	r3, r3, #7
 8004648:	b2db      	uxtb	r3, r3
 800464a:	f003 0306 	and.w	r3, r3, #6
 800464e:	b2db      	uxtb	r3, r3
 8004650:	f063 030f 	orn	r3, r3, #15
 8004654:	b2da      	uxtb	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	490e      	ldr	r1, [pc, #56]	@ (800469c <I2C_MasterRequestWrite+0xfc>)
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 f898 	bl	8004798 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e010      	b.n	8004694 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004672:	897b      	ldrh	r3, [r7, #10]
 8004674:	b2da      	uxtb	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	4907      	ldr	r1, [pc, #28]	@ (80046a0 <I2C_MasterRequestWrite+0x100>)
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 f888 	bl	8004798 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	00010008 	.word	0x00010008
 80046a0:	00010002 	.word	0x00010002

080046a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	603b      	str	r3, [r7, #0]
 80046b0:	4613      	mov	r3, r2
 80046b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046b4:	e048      	b.n	8004748 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046bc:	d044      	beq.n	8004748 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046be:	f7ff f88d 	bl	80037dc <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d302      	bcc.n	80046d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d139      	bne.n	8004748 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	0c1b      	lsrs	r3, r3, #16
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d10d      	bne.n	80046fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	43da      	mvns	r2, r3
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	4013      	ands	r3, r2
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bf0c      	ite	eq
 80046f0:	2301      	moveq	r3, #1
 80046f2:	2300      	movne	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	461a      	mov	r2, r3
 80046f8:	e00c      	b.n	8004714 <I2C_WaitOnFlagUntilTimeout+0x70>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	43da      	mvns	r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	4013      	ands	r3, r2
 8004706:	b29b      	uxth	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	429a      	cmp	r2, r3
 8004718:	d116      	bne.n	8004748 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004734:	f043 0220 	orr.w	r2, r3, #32
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e023      	b.n	8004790 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	0c1b      	lsrs	r3, r3, #16
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b01      	cmp	r3, #1
 8004750:	d10d      	bne.n	800476e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	43da      	mvns	r2, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	4013      	ands	r3, r2
 800475e:	b29b      	uxth	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	bf0c      	ite	eq
 8004764:	2301      	moveq	r3, #1
 8004766:	2300      	movne	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	461a      	mov	r2, r3
 800476c:	e00c      	b.n	8004788 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	43da      	mvns	r2, r3
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	4013      	ands	r3, r2
 800477a:	b29b      	uxth	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	bf0c      	ite	eq
 8004780:	2301      	moveq	r3, #1
 8004782:	2300      	movne	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	461a      	mov	r2, r3
 8004788:	79fb      	ldrb	r3, [r7, #7]
 800478a:	429a      	cmp	r2, r3
 800478c:	d093      	beq.n	80046b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047a6:	e071      	b.n	800488c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047b6:	d123      	bne.n	8004800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2220      	movs	r2, #32
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ec:	f043 0204 	orr.w	r2, r3, #4
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e067      	b.n	80048d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004806:	d041      	beq.n	800488c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004808:	f7fe ffe8 	bl	80037dc <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	429a      	cmp	r2, r3
 8004816:	d302      	bcc.n	800481e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d136      	bne.n	800488c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	0c1b      	lsrs	r3, r3, #16
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b01      	cmp	r3, #1
 8004826:	d10c      	bne.n	8004842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	43da      	mvns	r2, r3
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4013      	ands	r3, r2
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	bf14      	ite	ne
 800483a:	2301      	movne	r3, #1
 800483c:	2300      	moveq	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	e00b      	b.n	800485a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	43da      	mvns	r2, r3
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	4013      	ands	r3, r2
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	bf14      	ite	ne
 8004854:	2301      	movne	r3, #1
 8004856:	2300      	moveq	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d016      	beq.n	800488c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004878:	f043 0220 	orr.w	r2, r3, #32
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e021      	b.n	80048d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	0c1b      	lsrs	r3, r3, #16
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b01      	cmp	r3, #1
 8004894:	d10c      	bne.n	80048b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	43da      	mvns	r2, r3
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	4013      	ands	r3, r2
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	bf14      	ite	ne
 80048a8:	2301      	movne	r3, #1
 80048aa:	2300      	moveq	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	e00b      	b.n	80048c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	43da      	mvns	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4013      	ands	r3, r2
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bf14      	ite	ne
 80048c2:	2301      	movne	r3, #1
 80048c4:	2300      	moveq	r3, #0
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f47f af6d 	bne.w	80047a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048e4:	e034      	b.n	8004950 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 f886 	bl	80049f8 <I2C_IsAcknowledgeFailed>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e034      	b.n	8004960 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fc:	d028      	beq.n	8004950 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048fe:	f7fe ff6d 	bl	80037dc <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	429a      	cmp	r2, r3
 800490c:	d302      	bcc.n	8004914 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d11d      	bne.n	8004950 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800491e:	2b80      	cmp	r3, #128	@ 0x80
 8004920:	d016      	beq.n	8004950 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493c:	f043 0220 	orr.w	r2, r3, #32
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e007      	b.n	8004960 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800495a:	2b80      	cmp	r3, #128	@ 0x80
 800495c:	d1c3      	bne.n	80048e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004974:	e034      	b.n	80049e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 f83e 	bl	80049f8 <I2C_IsAcknowledgeFailed>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e034      	b.n	80049f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498c:	d028      	beq.n	80049e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800498e:	f7fe ff25 	bl	80037dc <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	429a      	cmp	r2, r3
 800499c:	d302      	bcc.n	80049a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d11d      	bne.n	80049e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d016      	beq.n	80049e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049cc:	f043 0220 	orr.w	r2, r3, #32
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e007      	b.n	80049f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	f003 0304 	and.w	r3, r3, #4
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d1c3      	bne.n	8004976 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a0e:	d11b      	bne.n	8004a48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a34:	f043 0204 	orr.w	r2, r3, #4
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr

08004a54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e272      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 8087 	beq.w	8004b82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a74:	4b92      	ldr	r3, [pc, #584]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f003 030c 	and.w	r3, r3, #12
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d00c      	beq.n	8004a9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a80:	4b8f      	ldr	r3, [pc, #572]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f003 030c 	and.w	r3, r3, #12
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d112      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x5e>
 8004a8c:	4b8c      	ldr	r3, [pc, #560]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a98:	d10b      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a9a:	4b89      	ldr	r3, [pc, #548]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d06c      	beq.n	8004b80 <HAL_RCC_OscConfig+0x12c>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d168      	bne.n	8004b80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e24c      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aba:	d106      	bne.n	8004aca <HAL_RCC_OscConfig+0x76>
 8004abc:	4b80      	ldr	r3, [pc, #512]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a7f      	ldr	r2, [pc, #508]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004ac2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ac6:	6013      	str	r3, [r2, #0]
 8004ac8:	e02e      	b.n	8004b28 <HAL_RCC_OscConfig+0xd4>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10c      	bne.n	8004aec <HAL_RCC_OscConfig+0x98>
 8004ad2:	4b7b      	ldr	r3, [pc, #492]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a7a      	ldr	r2, [pc, #488]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004ad8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	4b78      	ldr	r3, [pc, #480]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a77      	ldr	r2, [pc, #476]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004ae4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	e01d      	b.n	8004b28 <HAL_RCC_OscConfig+0xd4>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004af4:	d10c      	bne.n	8004b10 <HAL_RCC_OscConfig+0xbc>
 8004af6:	4b72      	ldr	r3, [pc, #456]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a71      	ldr	r2, [pc, #452]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004afc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	4b6f      	ldr	r3, [pc, #444]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a6e      	ldr	r2, [pc, #440]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e00b      	b.n	8004b28 <HAL_RCC_OscConfig+0xd4>
 8004b10:	4b6b      	ldr	r3, [pc, #428]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a6a      	ldr	r2, [pc, #424]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	4b68      	ldr	r3, [pc, #416]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a67      	ldr	r2, [pc, #412]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004b22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d013      	beq.n	8004b58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b30:	f7fe fe54 	bl	80037dc <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b38:	f7fe fe50 	bl	80037dc <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b64      	cmp	r3, #100	@ 0x64
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e200      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b4a:	4b5d      	ldr	r3, [pc, #372]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0f0      	beq.n	8004b38 <HAL_RCC_OscConfig+0xe4>
 8004b56:	e014      	b.n	8004b82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b58:	f7fe fe40 	bl	80037dc <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b60:	f7fe fe3c 	bl	80037dc <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b64      	cmp	r3, #100	@ 0x64
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e1ec      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b72:	4b53      	ldr	r3, [pc, #332]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f0      	bne.n	8004b60 <HAL_RCC_OscConfig+0x10c>
 8004b7e:	e000      	b.n	8004b82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d063      	beq.n	8004c56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b8e:	4b4c      	ldr	r3, [pc, #304]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f003 030c 	and.w	r3, r3, #12
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00b      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b9a:	4b49      	ldr	r3, [pc, #292]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f003 030c 	and.w	r3, r3, #12
 8004ba2:	2b08      	cmp	r3, #8
 8004ba4:	d11c      	bne.n	8004be0 <HAL_RCC_OscConfig+0x18c>
 8004ba6:	4b46      	ldr	r3, [pc, #280]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d116      	bne.n	8004be0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bb2:	4b43      	ldr	r3, [pc, #268]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d005      	beq.n	8004bca <HAL_RCC_OscConfig+0x176>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d001      	beq.n	8004bca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e1c0      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bca:	4b3d      	ldr	r3, [pc, #244]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	4939      	ldr	r1, [pc, #228]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bde:	e03a      	b.n	8004c56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d020      	beq.n	8004c2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004be8:	4b36      	ldr	r3, [pc, #216]	@ (8004cc4 <HAL_RCC_OscConfig+0x270>)
 8004bea:	2201      	movs	r2, #1
 8004bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bee:	f7fe fdf5 	bl	80037dc <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf6:	f7fe fdf1 	bl	80037dc <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e1a1      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c08:	4b2d      	ldr	r3, [pc, #180]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0f0      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c14:	4b2a      	ldr	r3, [pc, #168]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	4927      	ldr	r1, [pc, #156]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	600b      	str	r3, [r1, #0]
 8004c28:	e015      	b.n	8004c56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c2a:	4b26      	ldr	r3, [pc, #152]	@ (8004cc4 <HAL_RCC_OscConfig+0x270>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c30:	f7fe fdd4 	bl	80037dc <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c38:	f7fe fdd0 	bl	80037dc <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e180      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1f0      	bne.n	8004c38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d03a      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d019      	beq.n	8004c9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c6a:	4b17      	ldr	r3, [pc, #92]	@ (8004cc8 <HAL_RCC_OscConfig+0x274>)
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c70:	f7fe fdb4 	bl	80037dc <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c76:	e008      	b.n	8004c8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c78:	f7fe fdb0 	bl	80037dc <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e160      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0f0      	beq.n	8004c78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c96:	2001      	movs	r0, #1
 8004c98:	f000 face 	bl	8005238 <RCC_Delay>
 8004c9c:	e01c      	b.n	8004cd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc8 <HAL_RCC_OscConfig+0x274>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ca4:	f7fe fd9a 	bl	80037dc <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004caa:	e00f      	b.n	8004ccc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cac:	f7fe fd96 	bl	80037dc <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d908      	bls.n	8004ccc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e146      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
 8004cbe:	bf00      	nop
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	42420000 	.word	0x42420000
 8004cc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ccc:	4b92      	ldr	r3, [pc, #584]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e9      	bne.n	8004cac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 80a6 	beq.w	8004e32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cea:	4b8b      	ldr	r3, [pc, #556]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10d      	bne.n	8004d12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cf6:	4b88      	ldr	r3, [pc, #544]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	4a87      	ldr	r2, [pc, #540]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d00:	61d3      	str	r3, [r2, #28]
 8004d02:	4b85      	ldr	r3, [pc, #532]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d0a:	60bb      	str	r3, [r7, #8]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d12:	4b82      	ldr	r3, [pc, #520]	@ (8004f1c <HAL_RCC_OscConfig+0x4c8>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d118      	bne.n	8004d50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d1e:	4b7f      	ldr	r3, [pc, #508]	@ (8004f1c <HAL_RCC_OscConfig+0x4c8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a7e      	ldr	r2, [pc, #504]	@ (8004f1c <HAL_RCC_OscConfig+0x4c8>)
 8004d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d2a:	f7fe fd57 	bl	80037dc <HAL_GetTick>
 8004d2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d32:	f7fe fd53 	bl	80037dc <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b64      	cmp	r3, #100	@ 0x64
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e103      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d44:	4b75      	ldr	r3, [pc, #468]	@ (8004f1c <HAL_RCC_OscConfig+0x4c8>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0f0      	beq.n	8004d32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d106      	bne.n	8004d66 <HAL_RCC_OscConfig+0x312>
 8004d58:	4b6f      	ldr	r3, [pc, #444]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	4a6e      	ldr	r2, [pc, #440]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	6213      	str	r3, [r2, #32]
 8004d64:	e02d      	b.n	8004dc2 <HAL_RCC_OscConfig+0x36e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10c      	bne.n	8004d88 <HAL_RCC_OscConfig+0x334>
 8004d6e:	4b6a      	ldr	r3, [pc, #424]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	4a69      	ldr	r2, [pc, #420]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004d74:	f023 0301 	bic.w	r3, r3, #1
 8004d78:	6213      	str	r3, [r2, #32]
 8004d7a:	4b67      	ldr	r3, [pc, #412]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	4a66      	ldr	r2, [pc, #408]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004d80:	f023 0304 	bic.w	r3, r3, #4
 8004d84:	6213      	str	r3, [r2, #32]
 8004d86:	e01c      	b.n	8004dc2 <HAL_RCC_OscConfig+0x36e>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	2b05      	cmp	r3, #5
 8004d8e:	d10c      	bne.n	8004daa <HAL_RCC_OscConfig+0x356>
 8004d90:	4b61      	ldr	r3, [pc, #388]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	4a60      	ldr	r2, [pc, #384]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004d96:	f043 0304 	orr.w	r3, r3, #4
 8004d9a:	6213      	str	r3, [r2, #32]
 8004d9c:	4b5e      	ldr	r3, [pc, #376]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	4a5d      	ldr	r2, [pc, #372]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004da2:	f043 0301 	orr.w	r3, r3, #1
 8004da6:	6213      	str	r3, [r2, #32]
 8004da8:	e00b      	b.n	8004dc2 <HAL_RCC_OscConfig+0x36e>
 8004daa:	4b5b      	ldr	r3, [pc, #364]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	4a5a      	ldr	r2, [pc, #360]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004db0:	f023 0301 	bic.w	r3, r3, #1
 8004db4:	6213      	str	r3, [r2, #32]
 8004db6:	4b58      	ldr	r3, [pc, #352]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	4a57      	ldr	r2, [pc, #348]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004dbc:	f023 0304 	bic.w	r3, r3, #4
 8004dc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d015      	beq.n	8004df6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dca:	f7fe fd07 	bl	80037dc <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd0:	e00a      	b.n	8004de8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd2:	f7fe fd03 	bl	80037dc <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e0b1      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de8:	4b4b      	ldr	r3, [pc, #300]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0ee      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x37e>
 8004df4:	e014      	b.n	8004e20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004df6:	f7fe fcf1 	bl	80037dc <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dfc:	e00a      	b.n	8004e14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dfe:	f7fe fced 	bl	80037dc <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e09b      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e14:	4b40      	ldr	r3, [pc, #256]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1ee      	bne.n	8004dfe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e20:	7dfb      	ldrb	r3, [r7, #23]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d105      	bne.n	8004e32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e26:	4b3c      	ldr	r3, [pc, #240]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	4a3b      	ldr	r2, [pc, #236]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004e2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 8087 	beq.w	8004f4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e3c:	4b36      	ldr	r3, [pc, #216]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f003 030c 	and.w	r3, r3, #12
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d061      	beq.n	8004f0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d146      	bne.n	8004ede <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e50:	4b33      	ldr	r3, [pc, #204]	@ (8004f20 <HAL_RCC_OscConfig+0x4cc>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e56:	f7fe fcc1 	bl	80037dc <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e5e:	f7fe fcbd 	bl	80037dc <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e06d      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e70:	4b29      	ldr	r3, [pc, #164]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1f0      	bne.n	8004e5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e84:	d108      	bne.n	8004e98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e86:	4b24      	ldr	r3, [pc, #144]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	4921      	ldr	r1, [pc, #132]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e98:	4b1f      	ldr	r3, [pc, #124]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a19      	ldr	r1, [r3, #32]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea8:	430b      	orrs	r3, r1
 8004eaa:	491b      	ldr	r1, [pc, #108]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f20 <HAL_RCC_OscConfig+0x4cc>)
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb6:	f7fe fc91 	bl	80037dc <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ebe:	f7fe fc8d 	bl	80037dc <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e03d      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ed0:	4b11      	ldr	r3, [pc, #68]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0f0      	beq.n	8004ebe <HAL_RCC_OscConfig+0x46a>
 8004edc:	e035      	b.n	8004f4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ede:	4b10      	ldr	r3, [pc, #64]	@ (8004f20 <HAL_RCC_OscConfig+0x4cc>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee4:	f7fe fc7a 	bl	80037dc <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eec:	f7fe fc76 	bl	80037dc <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e026      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004efe:	4b06      	ldr	r3, [pc, #24]	@ (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1f0      	bne.n	8004eec <HAL_RCC_OscConfig+0x498>
 8004f0a:	e01e      	b.n	8004f4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d107      	bne.n	8004f24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e019      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	40007000 	.word	0x40007000
 8004f20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f24:	4b0b      	ldr	r3, [pc, #44]	@ (8004f54 <HAL_RCC_OscConfig+0x500>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d106      	bne.n	8004f46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d001      	beq.n	8004f4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	40021000 	.word	0x40021000

08004f58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e0d0      	b.n	800510e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f6c:	4b6a      	ldr	r3, [pc, #424]	@ (8005118 <HAL_RCC_ClockConfig+0x1c0>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d910      	bls.n	8004f9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f7a:	4b67      	ldr	r3, [pc, #412]	@ (8005118 <HAL_RCC_ClockConfig+0x1c0>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f023 0207 	bic.w	r2, r3, #7
 8004f82:	4965      	ldr	r1, [pc, #404]	@ (8005118 <HAL_RCC_ClockConfig+0x1c0>)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f8a:	4b63      	ldr	r3, [pc, #396]	@ (8005118 <HAL_RCC_ClockConfig+0x1c0>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0307 	and.w	r3, r3, #7
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d001      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e0b8      	b.n	800510e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d020      	beq.n	8004fea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d005      	beq.n	8004fc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fb4:	4b59      	ldr	r3, [pc, #356]	@ (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	4a58      	ldr	r2, [pc, #352]	@ (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8004fba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004fbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0308 	and.w	r3, r3, #8
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d005      	beq.n	8004fd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fcc:	4b53      	ldr	r3, [pc, #332]	@ (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	4a52      	ldr	r2, [pc, #328]	@ (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8004fd2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004fd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd8:	4b50      	ldr	r3, [pc, #320]	@ (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	494d      	ldr	r1, [pc, #308]	@ (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d040      	beq.n	8005078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d107      	bne.n	800500e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffe:	4b47      	ldr	r3, [pc, #284]	@ (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d115      	bne.n	8005036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e07f      	b.n	800510e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2b02      	cmp	r3, #2
 8005014:	d107      	bne.n	8005026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005016:	4b41      	ldr	r3, [pc, #260]	@ (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d109      	bne.n	8005036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e073      	b.n	800510e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005026:	4b3d      	ldr	r3, [pc, #244]	@ (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e06b      	b.n	800510e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005036:	4b39      	ldr	r3, [pc, #228]	@ (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f023 0203 	bic.w	r2, r3, #3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	4936      	ldr	r1, [pc, #216]	@ (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8005044:	4313      	orrs	r3, r2
 8005046:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005048:	f7fe fbc8 	bl	80037dc <HAL_GetTick>
 800504c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800504e:	e00a      	b.n	8005066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005050:	f7fe fbc4 	bl	80037dc <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800505e:	4293      	cmp	r3, r2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e053      	b.n	800510e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005066:	4b2d      	ldr	r3, [pc, #180]	@ (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f003 020c 	and.w	r2, r3, #12
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	429a      	cmp	r2, r3
 8005076:	d1eb      	bne.n	8005050 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005078:	4b27      	ldr	r3, [pc, #156]	@ (8005118 <HAL_RCC_ClockConfig+0x1c0>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d210      	bcs.n	80050a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005086:	4b24      	ldr	r3, [pc, #144]	@ (8005118 <HAL_RCC_ClockConfig+0x1c0>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f023 0207 	bic.w	r2, r3, #7
 800508e:	4922      	ldr	r1, [pc, #136]	@ (8005118 <HAL_RCC_ClockConfig+0x1c0>)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	4313      	orrs	r3, r2
 8005094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005096:	4b20      	ldr	r3, [pc, #128]	@ (8005118 <HAL_RCC_ClockConfig+0x1c0>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0307 	and.w	r3, r3, #7
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d001      	beq.n	80050a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e032      	b.n	800510e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d008      	beq.n	80050c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050b4:	4b19      	ldr	r3, [pc, #100]	@ (800511c <HAL_RCC_ClockConfig+0x1c4>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	4916      	ldr	r1, [pc, #88]	@ (800511c <HAL_RCC_ClockConfig+0x1c4>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0308 	and.w	r3, r3, #8
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d009      	beq.n	80050e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050d2:	4b12      	ldr	r3, [pc, #72]	@ (800511c <HAL_RCC_ClockConfig+0x1c4>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	490e      	ldr	r1, [pc, #56]	@ (800511c <HAL_RCC_ClockConfig+0x1c4>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050e6:	f000 f821 	bl	800512c <HAL_RCC_GetSysClockFreq>
 80050ea:	4602      	mov	r2, r0
 80050ec:	4b0b      	ldr	r3, [pc, #44]	@ (800511c <HAL_RCC_ClockConfig+0x1c4>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	091b      	lsrs	r3, r3, #4
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	490a      	ldr	r1, [pc, #40]	@ (8005120 <HAL_RCC_ClockConfig+0x1c8>)
 80050f8:	5ccb      	ldrb	r3, [r1, r3]
 80050fa:	fa22 f303 	lsr.w	r3, r2, r3
 80050fe:	4a09      	ldr	r2, [pc, #36]	@ (8005124 <HAL_RCC_ClockConfig+0x1cc>)
 8005100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005102:	4b09      	ldr	r3, [pc, #36]	@ (8005128 <HAL_RCC_ClockConfig+0x1d0>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4618      	mov	r0, r3
 8005108:	f7fe fb26 	bl	8003758 <HAL_InitTick>

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40022000 	.word	0x40022000
 800511c:	40021000 	.word	0x40021000
 8005120:	0800c91c 	.word	0x0800c91c
 8005124:	20000018 	.word	0x20000018
 8005128:	2000001c 	.word	0x2000001c

0800512c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	2300      	movs	r3, #0
 8005138:	60bb      	str	r3, [r7, #8]
 800513a:	2300      	movs	r3, #0
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	2300      	movs	r3, #0
 8005140:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005146:	4b1e      	ldr	r3, [pc, #120]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f003 030c 	and.w	r3, r3, #12
 8005152:	2b04      	cmp	r3, #4
 8005154:	d002      	beq.n	800515c <HAL_RCC_GetSysClockFreq+0x30>
 8005156:	2b08      	cmp	r3, #8
 8005158:	d003      	beq.n	8005162 <HAL_RCC_GetSysClockFreq+0x36>
 800515a:	e027      	b.n	80051ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800515c:	4b19      	ldr	r3, [pc, #100]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800515e:	613b      	str	r3, [r7, #16]
      break;
 8005160:	e027      	b.n	80051b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	0c9b      	lsrs	r3, r3, #18
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	4a17      	ldr	r2, [pc, #92]	@ (80051c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800516c:	5cd3      	ldrb	r3, [r2, r3]
 800516e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d010      	beq.n	800519c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800517a:	4b11      	ldr	r3, [pc, #68]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	0c5b      	lsrs	r3, r3, #17
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	4a11      	ldr	r2, [pc, #68]	@ (80051cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005186:	5cd3      	ldrb	r3, [r2, r3]
 8005188:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a0d      	ldr	r2, [pc, #52]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800518e:	fb03 f202 	mul.w	r2, r3, r2
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	fbb2 f3f3 	udiv	r3, r2, r3
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	e004      	b.n	80051a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a0c      	ldr	r2, [pc, #48]	@ (80051d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80051a0:	fb02 f303 	mul.w	r3, r2, r3
 80051a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	613b      	str	r3, [r7, #16]
      break;
 80051aa:	e002      	b.n	80051b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051ac:	4b05      	ldr	r3, [pc, #20]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80051ae:	613b      	str	r3, [r7, #16]
      break;
 80051b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051b2:	693b      	ldr	r3, [r7, #16]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	371c      	adds	r7, #28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bc80      	pop	{r7}
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40021000 	.word	0x40021000
 80051c4:	007a1200 	.word	0x007a1200
 80051c8:	0800c934 	.word	0x0800c934
 80051cc:	0800c944 	.word	0x0800c944
 80051d0:	003d0900 	.word	0x003d0900

080051d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051d8:	4b02      	ldr	r3, [pc, #8]	@ (80051e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80051da:	681b      	ldr	r3, [r3, #0]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr
 80051e4:	20000018 	.word	0x20000018

080051e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051ec:	f7ff fff2 	bl	80051d4 <HAL_RCC_GetHCLKFreq>
 80051f0:	4602      	mov	r2, r0
 80051f2:	4b05      	ldr	r3, [pc, #20]	@ (8005208 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	0a1b      	lsrs	r3, r3, #8
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	4903      	ldr	r1, [pc, #12]	@ (800520c <HAL_RCC_GetPCLK1Freq+0x24>)
 80051fe:	5ccb      	ldrb	r3, [r1, r3]
 8005200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005204:	4618      	mov	r0, r3
 8005206:	bd80      	pop	{r7, pc}
 8005208:	40021000 	.word	0x40021000
 800520c:	0800c92c 	.word	0x0800c92c

08005210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005214:	f7ff ffde 	bl	80051d4 <HAL_RCC_GetHCLKFreq>
 8005218:	4602      	mov	r2, r0
 800521a:	4b05      	ldr	r3, [pc, #20]	@ (8005230 <HAL_RCC_GetPCLK2Freq+0x20>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	0adb      	lsrs	r3, r3, #11
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	4903      	ldr	r1, [pc, #12]	@ (8005234 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005226:	5ccb      	ldrb	r3, [r1, r3]
 8005228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800522c:	4618      	mov	r0, r3
 800522e:	bd80      	pop	{r7, pc}
 8005230:	40021000 	.word	0x40021000
 8005234:	0800c92c 	.word	0x0800c92c

08005238 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005240:	4b0a      	ldr	r3, [pc, #40]	@ (800526c <RCC_Delay+0x34>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a0a      	ldr	r2, [pc, #40]	@ (8005270 <RCC_Delay+0x38>)
 8005246:	fba2 2303 	umull	r2, r3, r2, r3
 800524a:	0a5b      	lsrs	r3, r3, #9
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	fb02 f303 	mul.w	r3, r2, r3
 8005252:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005254:	bf00      	nop
  }
  while (Delay --);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	1e5a      	subs	r2, r3, #1
 800525a:	60fa      	str	r2, [r7, #12]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1f9      	bne.n	8005254 <RCC_Delay+0x1c>
}
 8005260:	bf00      	nop
 8005262:	bf00      	nop
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	bc80      	pop	{r7}
 800526a:	4770      	bx	lr
 800526c:	20000018 	.word	0x20000018
 8005270:	10624dd3 	.word	0x10624dd3

08005274 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e042      	b.n	800530c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d106      	bne.n	80052a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7fd fe5c 	bl	8002f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2224      	movs	r2, #36	@ 0x24
 80052a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fd71 	bl	8005da0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	695a      	ldr	r2, [r3, #20]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68da      	ldr	r2, [r3, #12]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2220      	movs	r2, #32
 8005300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b08a      	sub	sp, #40	@ 0x28
 8005318:	af02      	add	r7, sp, #8
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	603b      	str	r3, [r7, #0]
 8005320:	4613      	mov	r3, r2
 8005322:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b20      	cmp	r3, #32
 8005332:	d16d      	bne.n	8005410 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <HAL_UART_Transmit+0x2c>
 800533a:	88fb      	ldrh	r3, [r7, #6]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e066      	b.n	8005412 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2221      	movs	r2, #33	@ 0x21
 800534e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005352:	f7fe fa43 	bl	80037dc <HAL_GetTick>
 8005356:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	88fa      	ldrh	r2, [r7, #6]
 800535c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	88fa      	ldrh	r2, [r7, #6]
 8005362:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800536c:	d108      	bne.n	8005380 <HAL_UART_Transmit+0x6c>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d104      	bne.n	8005380 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005376:	2300      	movs	r3, #0
 8005378:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	61bb      	str	r3, [r7, #24]
 800537e:	e003      	b.n	8005388 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005384:	2300      	movs	r3, #0
 8005386:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005388:	e02a      	b.n	80053e0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2200      	movs	r2, #0
 8005392:	2180      	movs	r1, #128	@ 0x80
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 faf9 	bl	800598c <UART_WaitOnFlagUntilTimeout>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e036      	b.n	8005412 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10b      	bne.n	80053c2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	3302      	adds	r3, #2
 80053be:	61bb      	str	r3, [r7, #24]
 80053c0:	e007      	b.n	80053d2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	781a      	ldrb	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	3301      	adds	r3, #1
 80053d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	3b01      	subs	r3, #1
 80053da:	b29a      	uxth	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1cf      	bne.n	800538a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2200      	movs	r2, #0
 80053f2:	2140      	movs	r1, #64	@ 0x40
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 fac9 	bl	800598c <UART_WaitOnFlagUntilTimeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e006      	b.n	8005412 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800540c:	2300      	movs	r3, #0
 800540e:	e000      	b.n	8005412 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005410:	2302      	movs	r3, #2
  }
}
 8005412:	4618      	mov	r0, r3
 8005414:	3720      	adds	r7, #32
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
	...

0800541c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b0ba      	sub	sp, #232	@ 0xe8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005442:	2300      	movs	r3, #0
 8005444:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005448:	2300      	movs	r3, #0
 800544a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800544e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800545a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10f      	bne.n	8005482 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005466:	f003 0320 	and.w	r3, r3, #32
 800546a:	2b00      	cmp	r3, #0
 800546c:	d009      	beq.n	8005482 <HAL_UART_IRQHandler+0x66>
 800546e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005472:	f003 0320 	and.w	r3, r3, #32
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fbd1 	bl	8005c22 <UART_Receive_IT>
      return;
 8005480:	e25b      	b.n	800593a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005482:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 80de 	beq.w	8005648 <HAL_UART_IRQHandler+0x22c>
 800548c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b00      	cmp	r3, #0
 8005496:	d106      	bne.n	80054a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800549c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 80d1 	beq.w	8005648 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00b      	beq.n	80054ca <HAL_UART_IRQHandler+0xae>
 80054b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d005      	beq.n	80054ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c2:	f043 0201 	orr.w	r2, r3, #1
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ce:	f003 0304 	and.w	r3, r3, #4
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00b      	beq.n	80054ee <HAL_UART_IRQHandler+0xd2>
 80054d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d005      	beq.n	80054ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054e6:	f043 0202 	orr.w	r2, r3, #2
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00b      	beq.n	8005512 <HAL_UART_IRQHandler+0xf6>
 80054fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d005      	beq.n	8005512 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800550a:	f043 0204 	orr.w	r2, r3, #4
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005516:	f003 0308 	and.w	r3, r3, #8
 800551a:	2b00      	cmp	r3, #0
 800551c:	d011      	beq.n	8005542 <HAL_UART_IRQHandler+0x126>
 800551e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005522:	f003 0320 	and.w	r3, r3, #32
 8005526:	2b00      	cmp	r3, #0
 8005528:	d105      	bne.n	8005536 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800552a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d005      	beq.n	8005542 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800553a:	f043 0208 	orr.w	r2, r3, #8
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 81f2 	beq.w	8005930 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800554c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005550:	f003 0320 	and.w	r3, r3, #32
 8005554:	2b00      	cmp	r3, #0
 8005556:	d008      	beq.n	800556a <HAL_UART_IRQHandler+0x14e>
 8005558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800555c:	f003 0320 	and.w	r3, r3, #32
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fb5c 	bl	8005c22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005574:	2b00      	cmp	r3, #0
 8005576:	bf14      	ite	ne
 8005578:	2301      	movne	r3, #1
 800557a:	2300      	moveq	r3, #0
 800557c:	b2db      	uxtb	r3, r3
 800557e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005586:	f003 0308 	and.w	r3, r3, #8
 800558a:	2b00      	cmp	r3, #0
 800558c:	d103      	bne.n	8005596 <HAL_UART_IRQHandler+0x17a>
 800558e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005592:	2b00      	cmp	r3, #0
 8005594:	d04f      	beq.n	8005636 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fa66 	bl	8005a68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d041      	beq.n	800562e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	3314      	adds	r3, #20
 80055b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80055b8:	e853 3f00 	ldrex	r3, [r3]
 80055bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80055c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80055c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3314      	adds	r3, #20
 80055d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80055d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80055da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80055e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80055e6:	e841 2300 	strex	r3, r2, [r1]
 80055ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80055ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1d9      	bne.n	80055aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d013      	beq.n	8005626 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005602:	4a7e      	ldr	r2, [pc, #504]	@ (80057fc <HAL_UART_IRQHandler+0x3e0>)
 8005604:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800560a:	4618      	mov	r0, r3
 800560c:	f7fe fa5c 	bl	8003ac8 <HAL_DMA_Abort_IT>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d016      	beq.n	8005644 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005620:	4610      	mov	r0, r2
 8005622:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005624:	e00e      	b.n	8005644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f99c 	bl	8005964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800562c:	e00a      	b.n	8005644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f998 	bl	8005964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005634:	e006      	b.n	8005644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f994 	bl	8005964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005642:	e175      	b.n	8005930 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005644:	bf00      	nop
    return;
 8005646:	e173      	b.n	8005930 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800564c:	2b01      	cmp	r3, #1
 800564e:	f040 814f 	bne.w	80058f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005656:	f003 0310 	and.w	r3, r3, #16
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 8148 	beq.w	80058f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005664:	f003 0310 	and.w	r3, r3, #16
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 8141 	beq.w	80058f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800566e:	2300      	movs	r3, #0
 8005670:	60bb      	str	r3, [r7, #8]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	60bb      	str	r3, [r7, #8]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	60bb      	str	r3, [r7, #8]
 8005682:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 80b6 	beq.w	8005800 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 8145 	beq.w	8005934 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056b2:	429a      	cmp	r2, r3
 80056b4:	f080 813e 	bcs.w	8005934 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056be:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	f000 8088 	beq.w	80057dc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	330c      	adds	r3, #12
 80056d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80056da:	e853 3f00 	ldrex	r3, [r3]
 80056de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80056e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	330c      	adds	r3, #12
 80056f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80056f8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005700:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005704:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005708:	e841 2300 	strex	r3, r2, [r1]
 800570c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005710:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1d9      	bne.n	80056cc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3314      	adds	r3, #20
 800571e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005720:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005722:	e853 3f00 	ldrex	r3, [r3]
 8005726:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005728:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800572a:	f023 0301 	bic.w	r3, r3, #1
 800572e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	3314      	adds	r3, #20
 8005738:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800573c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005740:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005744:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005748:	e841 2300 	strex	r3, r2, [r1]
 800574c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800574e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1e1      	bne.n	8005718 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3314      	adds	r3, #20
 800575a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800575e:	e853 3f00 	ldrex	r3, [r3]
 8005762:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005764:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005766:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800576a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3314      	adds	r3, #20
 8005774:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005778:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800577a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800577e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005780:	e841 2300 	strex	r3, r2, [r1]
 8005784:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005786:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1e3      	bne.n	8005754 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2220      	movs	r2, #32
 8005790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	330c      	adds	r3, #12
 80057a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057a4:	e853 3f00 	ldrex	r3, [r3]
 80057a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80057aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057ac:	f023 0310 	bic.w	r3, r3, #16
 80057b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	330c      	adds	r3, #12
 80057ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80057be:	65ba      	str	r2, [r7, #88]	@ 0x58
 80057c0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80057c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80057cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e3      	bne.n	800579a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fe f93b 	bl	8003a52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	4619      	mov	r1, r3
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f8bf 	bl	8005976 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057f8:	e09c      	b.n	8005934 <HAL_UART_IRQHandler+0x518>
 80057fa:	bf00      	nop
 80057fc:	08005b2d 	.word	0x08005b2d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005808:	b29b      	uxth	r3, r3
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005814:	b29b      	uxth	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 808e 	beq.w	8005938 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800581c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 8089 	beq.w	8005938 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	330c      	adds	r3, #12
 800582c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005838:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800583c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	330c      	adds	r3, #12
 8005846:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800584a:	647a      	str	r2, [r7, #68]	@ 0x44
 800584c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005850:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e3      	bne.n	8005826 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3314      	adds	r3, #20
 8005864:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005868:	e853 3f00 	ldrex	r3, [r3]
 800586c:	623b      	str	r3, [r7, #32]
   return(result);
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3314      	adds	r3, #20
 800587e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005882:	633a      	str	r2, [r7, #48]	@ 0x30
 8005884:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005886:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e3      	bne.n	800585e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2220      	movs	r2, #32
 800589a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	330c      	adds	r3, #12
 80058aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	e853 3f00 	ldrex	r3, [r3]
 80058b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0310 	bic.w	r3, r3, #16
 80058ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	330c      	adds	r3, #12
 80058c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80058c8:	61fa      	str	r2, [r7, #28]
 80058ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058cc:	69b9      	ldr	r1, [r7, #24]
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	e841 2300 	strex	r3, r2, [r1]
 80058d4:	617b      	str	r3, [r7, #20]
   return(result);
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e3      	bne.n	80058a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058e6:	4619      	mov	r1, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f844 	bl	8005976 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058ee:	e023      	b.n	8005938 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d009      	beq.n	8005910 <HAL_UART_IRQHandler+0x4f4>
 80058fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f923 	bl	8005b54 <UART_Transmit_IT>
    return;
 800590e:	e014      	b.n	800593a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00e      	beq.n	800593a <HAL_UART_IRQHandler+0x51e>
 800591c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005924:	2b00      	cmp	r3, #0
 8005926:	d008      	beq.n	800593a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f962 	bl	8005bf2 <UART_EndTransmit_IT>
    return;
 800592e:	e004      	b.n	800593a <HAL_UART_IRQHandler+0x51e>
    return;
 8005930:	bf00      	nop
 8005932:	e002      	b.n	800593a <HAL_UART_IRQHandler+0x51e>
      return;
 8005934:	bf00      	nop
 8005936:	e000      	b.n	800593a <HAL_UART_IRQHandler+0x51e>
      return;
 8005938:	bf00      	nop
  }
}
 800593a:	37e8      	adds	r7, #232	@ 0xe8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	bc80      	pop	{r7}
 8005950:	4770      	bx	lr

08005952 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005952:	b480      	push	{r7}
 8005954:	b083      	sub	sp, #12
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800595a:	bf00      	nop
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	bc80      	pop	{r7}
 8005962:	4770      	bx	lr

08005964 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	bc80      	pop	{r7}
 8005974:	4770      	bx	lr

08005976 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	460b      	mov	r3, r1
 8005980:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	bc80      	pop	{r7}
 800598a:	4770      	bx	lr

0800598c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b090      	sub	sp, #64	@ 0x40
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	603b      	str	r3, [r7, #0]
 8005998:	4613      	mov	r3, r2
 800599a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800599c:	e050      	b.n	8005a40 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800599e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a4:	d04c      	beq.n	8005a40 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d007      	beq.n	80059bc <UART_WaitOnFlagUntilTimeout+0x30>
 80059ac:	f7fd ff16 	bl	80037dc <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d241      	bcs.n	8005a40 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	330c      	adds	r3, #12
 80059c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c6:	e853 3f00 	ldrex	r3, [r3]
 80059ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ce:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80059d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	330c      	adds	r3, #12
 80059da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80059dc:	637a      	str	r2, [r7, #52]	@ 0x34
 80059de:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059e4:	e841 2300 	strex	r3, r2, [r1]
 80059e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80059ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1e5      	bne.n	80059bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3314      	adds	r3, #20
 80059f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	e853 3f00 	ldrex	r3, [r3]
 80059fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	f023 0301 	bic.w	r3, r3, #1
 8005a06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3314      	adds	r3, #20
 8005a0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a10:	623a      	str	r2, [r7, #32]
 8005a12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a14:	69f9      	ldr	r1, [r7, #28]
 8005a16:	6a3a      	ldr	r2, [r7, #32]
 8005a18:	e841 2300 	strex	r3, r2, [r1]
 8005a1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1e5      	bne.n	80059f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e00f      	b.n	8005a60 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	bf0c      	ite	eq
 8005a50:	2301      	moveq	r3, #1
 8005a52:	2300      	movne	r3, #0
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	79fb      	ldrb	r3, [r7, #7]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d09f      	beq.n	800599e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3740      	adds	r7, #64	@ 0x40
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b095      	sub	sp, #84	@ 0x54
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	330c      	adds	r3, #12
 8005a76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a7a:	e853 3f00 	ldrex	r3, [r3]
 8005a7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	330c      	adds	r3, #12
 8005a8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a90:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a98:	e841 2300 	strex	r3, r2, [r1]
 8005a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e5      	bne.n	8005a70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3314      	adds	r3, #20
 8005aaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	f023 0301 	bic.w	r3, r3, #1
 8005aba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3314      	adds	r3, #20
 8005ac2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ac4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005aca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005acc:	e841 2300 	strex	r3, r2, [r1]
 8005ad0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1e5      	bne.n	8005aa4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d119      	bne.n	8005b14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	330c      	adds	r3, #12
 8005ae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	60bb      	str	r3, [r7, #8]
   return(result);
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f023 0310 	bic.w	r3, r3, #16
 8005af6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	330c      	adds	r3, #12
 8005afe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b00:	61ba      	str	r2, [r7, #24]
 8005b02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	6979      	ldr	r1, [r7, #20]
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e5      	bne.n	8005ae0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b22:	bf00      	nop
 8005b24:	3754      	adds	r7, #84	@ 0x54
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bc80      	pop	{r7}
 8005b2a:	4770      	bx	lr

08005b2c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f7ff ff0c 	bl	8005964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b4c:	bf00      	nop
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b21      	cmp	r3, #33	@ 0x21
 8005b66:	d13e      	bne.n	8005be6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b70:	d114      	bne.n	8005b9c <UART_Transmit_IT+0x48>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d110      	bne.n	8005b9c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	461a      	mov	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b8e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	1c9a      	adds	r2, r3, #2
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	621a      	str	r2, [r3, #32]
 8005b9a:	e008      	b.n	8005bae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	1c59      	adds	r1, r3, #1
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6211      	str	r1, [r2, #32]
 8005ba6:	781a      	ldrb	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	4619      	mov	r1, r3
 8005bbc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10f      	bne.n	8005be2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005bd0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005be0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	e000      	b.n	8005be8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005be6:	2302      	movs	r3, #2
  }
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bc80      	pop	{r7}
 8005bf0:	4770      	bx	lr

08005bf2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b082      	sub	sp, #8
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68da      	ldr	r2, [r3, #12]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7ff fe94 	bl	8005940 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b08c      	sub	sp, #48	@ 0x30
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b22      	cmp	r3, #34	@ 0x22
 8005c34:	f040 80ae 	bne.w	8005d94 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c40:	d117      	bne.n	8005c72 <UART_Receive_IT+0x50>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d113      	bne.n	8005c72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c52:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6a:	1c9a      	adds	r2, r3, #2
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c70:	e026      	b.n	8005cc0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c84:	d007      	beq.n	8005c96 <UART_Receive_IT+0x74>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10a      	bne.n	8005ca4 <UART_Receive_IT+0x82>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d106      	bne.n	8005ca4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ca0:	701a      	strb	r2, [r3, #0]
 8005ca2:	e008      	b.n	8005cb6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cb4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	4619      	mov	r1, r3
 8005cce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d15d      	bne.n	8005d90 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68da      	ldr	r2, [r3, #12]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0220 	bic.w	r2, r2, #32
 8005ce2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	695a      	ldr	r2, [r3, #20]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 0201 	bic.w	r2, r2, #1
 8005d02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2220      	movs	r2, #32
 8005d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d135      	bne.n	8005d86 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	330c      	adds	r3, #12
 8005d26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	e853 3f00 	ldrex	r3, [r3]
 8005d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f023 0310 	bic.w	r3, r3, #16
 8005d36:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	330c      	adds	r3, #12
 8005d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d40:	623a      	str	r2, [r7, #32]
 8005d42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d44:	69f9      	ldr	r1, [r7, #28]
 8005d46:	6a3a      	ldr	r2, [r7, #32]
 8005d48:	e841 2300 	strex	r3, r2, [r1]
 8005d4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1e5      	bne.n	8005d20 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0310 	and.w	r3, r3, #16
 8005d5e:	2b10      	cmp	r3, #16
 8005d60:	d10a      	bne.n	8005d78 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d62:	2300      	movs	r3, #0
 8005d64:	60fb      	str	r3, [r7, #12]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	60fb      	str	r3, [r7, #12]
 8005d76:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7ff fdf9 	bl	8005976 <HAL_UARTEx_RxEventCallback>
 8005d84:	e002      	b.n	8005d8c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7ff fde3 	bl	8005952 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	e002      	b.n	8005d96 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d90:	2300      	movs	r3, #0
 8005d92:	e000      	b.n	8005d96 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d94:	2302      	movs	r3, #2
  }
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3730      	adds	r7, #48	@ 0x30
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
	...

08005da0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689a      	ldr	r2, [r3, #8]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005dda:	f023 030c 	bic.w	r3, r3, #12
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	6812      	ldr	r2, [r2, #0]
 8005de2:	68b9      	ldr	r1, [r7, #8]
 8005de4:	430b      	orrs	r3, r1
 8005de6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a2c      	ldr	r2, [pc, #176]	@ (8005eb4 <UART_SetConfig+0x114>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d103      	bne.n	8005e10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005e08:	f7ff fa02 	bl	8005210 <HAL_RCC_GetPCLK2Freq>
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	e002      	b.n	8005e16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005e10:	f7ff f9ea 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 8005e14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	009a      	lsls	r2, r3, #2
 8005e20:	441a      	add	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2c:	4a22      	ldr	r2, [pc, #136]	@ (8005eb8 <UART_SetConfig+0x118>)
 8005e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e32:	095b      	lsrs	r3, r3, #5
 8005e34:	0119      	lsls	r1, r3, #4
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	009a      	lsls	r2, r3, #2
 8005e40:	441a      	add	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8005eb8 <UART_SetConfig+0x118>)
 8005e4e:	fba3 0302 	umull	r0, r3, r3, r2
 8005e52:	095b      	lsrs	r3, r3, #5
 8005e54:	2064      	movs	r0, #100	@ 0x64
 8005e56:	fb00 f303 	mul.w	r3, r0, r3
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	011b      	lsls	r3, r3, #4
 8005e5e:	3332      	adds	r3, #50	@ 0x32
 8005e60:	4a15      	ldr	r2, [pc, #84]	@ (8005eb8 <UART_SetConfig+0x118>)
 8005e62:	fba2 2303 	umull	r2, r3, r2, r3
 8005e66:	095b      	lsrs	r3, r3, #5
 8005e68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e6c:	4419      	add	r1, r3
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	4613      	mov	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	009a      	lsls	r2, r3, #2
 8005e78:	441a      	add	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e84:	4b0c      	ldr	r3, [pc, #48]	@ (8005eb8 <UART_SetConfig+0x118>)
 8005e86:	fba3 0302 	umull	r0, r3, r3, r2
 8005e8a:	095b      	lsrs	r3, r3, #5
 8005e8c:	2064      	movs	r0, #100	@ 0x64
 8005e8e:	fb00 f303 	mul.w	r3, r0, r3
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	011b      	lsls	r3, r3, #4
 8005e96:	3332      	adds	r3, #50	@ 0x32
 8005e98:	4a07      	ldr	r2, [pc, #28]	@ (8005eb8 <UART_SetConfig+0x118>)
 8005e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9e:	095b      	lsrs	r3, r3, #5
 8005ea0:	f003 020f 	and.w	r2, r3, #15
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	440a      	add	r2, r1
 8005eaa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005eac:	bf00      	nop
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	40013800 	.word	0x40013800
 8005eb8:	51eb851f 	.word	0x51eb851f

08005ebc <atof>:
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	f000 be05 	b.w	8006acc <strtod>

08005ec2 <atoi>:
 8005ec2:	220a      	movs	r2, #10
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	f000 be89 	b.w	8006bdc <strtol>

08005eca <sulp>:
 8005eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ece:	460f      	mov	r7, r1
 8005ed0:	4690      	mov	r8, r2
 8005ed2:	f003 fce5 	bl	80098a0 <__ulp>
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	460d      	mov	r5, r1
 8005eda:	f1b8 0f00 	cmp.w	r8, #0
 8005ede:	d011      	beq.n	8005f04 <sulp+0x3a>
 8005ee0:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005ee4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	dd0b      	ble.n	8005f04 <sulp+0x3a>
 8005eec:	2400      	movs	r4, #0
 8005eee:	051b      	lsls	r3, r3, #20
 8005ef0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005ef4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005ef8:	4622      	mov	r2, r4
 8005efa:	462b      	mov	r3, r5
 8005efc:	f7fa faec 	bl	80004d8 <__aeabi_dmul>
 8005f00:	4604      	mov	r4, r0
 8005f02:	460d      	mov	r5, r1
 8005f04:	4620      	mov	r0, r4
 8005f06:	4629      	mov	r1, r5
 8005f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f0c:	0000      	movs	r0, r0
	...

08005f10 <_strtod_l>:
 8005f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f14:	b09f      	sub	sp, #124	@ 0x7c
 8005f16:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005f18:	2200      	movs	r2, #0
 8005f1a:	460c      	mov	r4, r1
 8005f1c:	921a      	str	r2, [sp, #104]	@ 0x68
 8005f1e:	f04f 0a00 	mov.w	sl, #0
 8005f22:	f04f 0b00 	mov.w	fp, #0
 8005f26:	460a      	mov	r2, r1
 8005f28:	9005      	str	r0, [sp, #20]
 8005f2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8005f2c:	7811      	ldrb	r1, [r2, #0]
 8005f2e:	292b      	cmp	r1, #43	@ 0x2b
 8005f30:	d048      	beq.n	8005fc4 <_strtod_l+0xb4>
 8005f32:	d836      	bhi.n	8005fa2 <_strtod_l+0x92>
 8005f34:	290d      	cmp	r1, #13
 8005f36:	d830      	bhi.n	8005f9a <_strtod_l+0x8a>
 8005f38:	2908      	cmp	r1, #8
 8005f3a:	d830      	bhi.n	8005f9e <_strtod_l+0x8e>
 8005f3c:	2900      	cmp	r1, #0
 8005f3e:	d039      	beq.n	8005fb4 <_strtod_l+0xa4>
 8005f40:	2200      	movs	r2, #0
 8005f42:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005f44:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005f46:	782a      	ldrb	r2, [r5, #0]
 8005f48:	2a30      	cmp	r2, #48	@ 0x30
 8005f4a:	f040 80b1 	bne.w	80060b0 <_strtod_l+0x1a0>
 8005f4e:	786a      	ldrb	r2, [r5, #1]
 8005f50:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005f54:	2a58      	cmp	r2, #88	@ 0x58
 8005f56:	d16c      	bne.n	8006032 <_strtod_l+0x122>
 8005f58:	9302      	str	r3, [sp, #8]
 8005f5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f5c:	4a8e      	ldr	r2, [pc, #568]	@ (8006198 <_strtod_l+0x288>)
 8005f5e:	9301      	str	r3, [sp, #4]
 8005f60:	ab1a      	add	r3, sp, #104	@ 0x68
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	9805      	ldr	r0, [sp, #20]
 8005f66:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005f68:	a919      	add	r1, sp, #100	@ 0x64
 8005f6a:	f002 fd8d 	bl	8008a88 <__gethex>
 8005f6e:	f010 060f 	ands.w	r6, r0, #15
 8005f72:	4604      	mov	r4, r0
 8005f74:	d005      	beq.n	8005f82 <_strtod_l+0x72>
 8005f76:	2e06      	cmp	r6, #6
 8005f78:	d126      	bne.n	8005fc8 <_strtod_l+0xb8>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	3501      	adds	r5, #1
 8005f7e:	9519      	str	r5, [sp, #100]	@ 0x64
 8005f80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f040 8584 	bne.w	8006a92 <_strtod_l+0xb82>
 8005f8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f8c:	b1bb      	cbz	r3, 8005fbe <_strtod_l+0xae>
 8005f8e:	4650      	mov	r0, sl
 8005f90:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8005f94:	b01f      	add	sp, #124	@ 0x7c
 8005f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f9a:	2920      	cmp	r1, #32
 8005f9c:	d1d0      	bne.n	8005f40 <_strtod_l+0x30>
 8005f9e:	3201      	adds	r2, #1
 8005fa0:	e7c3      	b.n	8005f2a <_strtod_l+0x1a>
 8005fa2:	292d      	cmp	r1, #45	@ 0x2d
 8005fa4:	d1cc      	bne.n	8005f40 <_strtod_l+0x30>
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005faa:	1c51      	adds	r1, r2, #1
 8005fac:	9119      	str	r1, [sp, #100]	@ 0x64
 8005fae:	7852      	ldrb	r2, [r2, #1]
 8005fb0:	2a00      	cmp	r2, #0
 8005fb2:	d1c7      	bne.n	8005f44 <_strtod_l+0x34>
 8005fb4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005fb6:	9419      	str	r4, [sp, #100]	@ 0x64
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f040 8568 	bne.w	8006a8e <_strtod_l+0xb7e>
 8005fbe:	4650      	mov	r0, sl
 8005fc0:	4659      	mov	r1, fp
 8005fc2:	e7e7      	b.n	8005f94 <_strtod_l+0x84>
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	e7ef      	b.n	8005fa8 <_strtod_l+0x98>
 8005fc8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005fca:	b13a      	cbz	r2, 8005fdc <_strtod_l+0xcc>
 8005fcc:	2135      	movs	r1, #53	@ 0x35
 8005fce:	a81c      	add	r0, sp, #112	@ 0x70
 8005fd0:	f003 fd56 	bl	8009a80 <__copybits>
 8005fd4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005fd6:	9805      	ldr	r0, [sp, #20]
 8005fd8:	f003 f930 	bl	800923c <_Bfree>
 8005fdc:	3e01      	subs	r6, #1
 8005fde:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005fe0:	2e04      	cmp	r6, #4
 8005fe2:	d806      	bhi.n	8005ff2 <_strtod_l+0xe2>
 8005fe4:	e8df f006 	tbb	[pc, r6]
 8005fe8:	201d0314 	.word	0x201d0314
 8005fec:	14          	.byte	0x14
 8005fed:	00          	.byte	0x00
 8005fee:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005ff2:	05e1      	lsls	r1, r4, #23
 8005ff4:	bf48      	it	mi
 8005ff6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005ffa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005ffe:	0d1b      	lsrs	r3, r3, #20
 8006000:	051b      	lsls	r3, r3, #20
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1bd      	bne.n	8005f82 <_strtod_l+0x72>
 8006006:	f001 fde9 	bl	8007bdc <__errno>
 800600a:	2322      	movs	r3, #34	@ 0x22
 800600c:	6003      	str	r3, [r0, #0]
 800600e:	e7b8      	b.n	8005f82 <_strtod_l+0x72>
 8006010:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006014:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006018:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800601c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006020:	e7e7      	b.n	8005ff2 <_strtod_l+0xe2>
 8006022:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800619c <_strtod_l+0x28c>
 8006026:	e7e4      	b.n	8005ff2 <_strtod_l+0xe2>
 8006028:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800602c:	f04f 3aff 	mov.w	sl, #4294967295
 8006030:	e7df      	b.n	8005ff2 <_strtod_l+0xe2>
 8006032:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006034:	1c5a      	adds	r2, r3, #1
 8006036:	9219      	str	r2, [sp, #100]	@ 0x64
 8006038:	785b      	ldrb	r3, [r3, #1]
 800603a:	2b30      	cmp	r3, #48	@ 0x30
 800603c:	d0f9      	beq.n	8006032 <_strtod_l+0x122>
 800603e:	2b00      	cmp	r3, #0
 8006040:	d09f      	beq.n	8005f82 <_strtod_l+0x72>
 8006042:	2301      	movs	r3, #1
 8006044:	9309      	str	r3, [sp, #36]	@ 0x24
 8006046:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006048:	220a      	movs	r2, #10
 800604a:	930c      	str	r3, [sp, #48]	@ 0x30
 800604c:	2300      	movs	r3, #0
 800604e:	461f      	mov	r7, r3
 8006050:	9308      	str	r3, [sp, #32]
 8006052:	930a      	str	r3, [sp, #40]	@ 0x28
 8006054:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006056:	7805      	ldrb	r5, [r0, #0]
 8006058:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800605c:	b2d9      	uxtb	r1, r3
 800605e:	2909      	cmp	r1, #9
 8006060:	d928      	bls.n	80060b4 <_strtod_l+0x1a4>
 8006062:	2201      	movs	r2, #1
 8006064:	494e      	ldr	r1, [pc, #312]	@ (80061a0 <_strtod_l+0x290>)
 8006066:	f001 fd5c 	bl	8007b22 <strncmp>
 800606a:	2800      	cmp	r0, #0
 800606c:	d032      	beq.n	80060d4 <_strtod_l+0x1c4>
 800606e:	2000      	movs	r0, #0
 8006070:	462a      	mov	r2, r5
 8006072:	4681      	mov	r9, r0
 8006074:	463d      	mov	r5, r7
 8006076:	4603      	mov	r3, r0
 8006078:	2a65      	cmp	r2, #101	@ 0x65
 800607a:	d001      	beq.n	8006080 <_strtod_l+0x170>
 800607c:	2a45      	cmp	r2, #69	@ 0x45
 800607e:	d114      	bne.n	80060aa <_strtod_l+0x19a>
 8006080:	b91d      	cbnz	r5, 800608a <_strtod_l+0x17a>
 8006082:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006084:	4302      	orrs	r2, r0
 8006086:	d095      	beq.n	8005fb4 <_strtod_l+0xa4>
 8006088:	2500      	movs	r5, #0
 800608a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800608c:	1c62      	adds	r2, r4, #1
 800608e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006090:	7862      	ldrb	r2, [r4, #1]
 8006092:	2a2b      	cmp	r2, #43	@ 0x2b
 8006094:	d077      	beq.n	8006186 <_strtod_l+0x276>
 8006096:	2a2d      	cmp	r2, #45	@ 0x2d
 8006098:	d07b      	beq.n	8006192 <_strtod_l+0x282>
 800609a:	f04f 0c00 	mov.w	ip, #0
 800609e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80060a2:	2909      	cmp	r1, #9
 80060a4:	f240 8082 	bls.w	80061ac <_strtod_l+0x29c>
 80060a8:	9419      	str	r4, [sp, #100]	@ 0x64
 80060aa:	f04f 0800 	mov.w	r8, #0
 80060ae:	e0a2      	b.n	80061f6 <_strtod_l+0x2e6>
 80060b0:	2300      	movs	r3, #0
 80060b2:	e7c7      	b.n	8006044 <_strtod_l+0x134>
 80060b4:	2f08      	cmp	r7, #8
 80060b6:	bfd5      	itete	le
 80060b8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80060ba:	9908      	ldrgt	r1, [sp, #32]
 80060bc:	fb02 3301 	mlale	r3, r2, r1, r3
 80060c0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80060c4:	f100 0001 	add.w	r0, r0, #1
 80060c8:	bfd4      	ite	le
 80060ca:	930a      	strle	r3, [sp, #40]	@ 0x28
 80060cc:	9308      	strgt	r3, [sp, #32]
 80060ce:	3701      	adds	r7, #1
 80060d0:	9019      	str	r0, [sp, #100]	@ 0x64
 80060d2:	e7bf      	b.n	8006054 <_strtod_l+0x144>
 80060d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80060da:	785a      	ldrb	r2, [r3, #1]
 80060dc:	b37f      	cbz	r7, 800613e <_strtod_l+0x22e>
 80060de:	4681      	mov	r9, r0
 80060e0:	463d      	mov	r5, r7
 80060e2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80060e6:	2b09      	cmp	r3, #9
 80060e8:	d912      	bls.n	8006110 <_strtod_l+0x200>
 80060ea:	2301      	movs	r3, #1
 80060ec:	e7c4      	b.n	8006078 <_strtod_l+0x168>
 80060ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80060f0:	3001      	adds	r0, #1
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	9219      	str	r2, [sp, #100]	@ 0x64
 80060f6:	785a      	ldrb	r2, [r3, #1]
 80060f8:	2a30      	cmp	r2, #48	@ 0x30
 80060fa:	d0f8      	beq.n	80060ee <_strtod_l+0x1de>
 80060fc:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006100:	2b08      	cmp	r3, #8
 8006102:	f200 84cb 	bhi.w	8006a9c <_strtod_l+0xb8c>
 8006106:	4681      	mov	r9, r0
 8006108:	2000      	movs	r0, #0
 800610a:	4605      	mov	r5, r0
 800610c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800610e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006110:	3a30      	subs	r2, #48	@ 0x30
 8006112:	f100 0301 	add.w	r3, r0, #1
 8006116:	d02a      	beq.n	800616e <_strtod_l+0x25e>
 8006118:	4499      	add	r9, r3
 800611a:	210a      	movs	r1, #10
 800611c:	462b      	mov	r3, r5
 800611e:	eb00 0c05 	add.w	ip, r0, r5
 8006122:	4563      	cmp	r3, ip
 8006124:	d10d      	bne.n	8006142 <_strtod_l+0x232>
 8006126:	1c69      	adds	r1, r5, #1
 8006128:	4401      	add	r1, r0
 800612a:	4428      	add	r0, r5
 800612c:	2808      	cmp	r0, #8
 800612e:	dc16      	bgt.n	800615e <_strtod_l+0x24e>
 8006130:	230a      	movs	r3, #10
 8006132:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006134:	fb03 2300 	mla	r3, r3, r0, r2
 8006138:	930a      	str	r3, [sp, #40]	@ 0x28
 800613a:	2300      	movs	r3, #0
 800613c:	e018      	b.n	8006170 <_strtod_l+0x260>
 800613e:	4638      	mov	r0, r7
 8006140:	e7da      	b.n	80060f8 <_strtod_l+0x1e8>
 8006142:	2b08      	cmp	r3, #8
 8006144:	f103 0301 	add.w	r3, r3, #1
 8006148:	dc03      	bgt.n	8006152 <_strtod_l+0x242>
 800614a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800614c:	434e      	muls	r6, r1
 800614e:	960a      	str	r6, [sp, #40]	@ 0x28
 8006150:	e7e7      	b.n	8006122 <_strtod_l+0x212>
 8006152:	2b10      	cmp	r3, #16
 8006154:	bfde      	ittt	le
 8006156:	9e08      	ldrle	r6, [sp, #32]
 8006158:	434e      	mulle	r6, r1
 800615a:	9608      	strle	r6, [sp, #32]
 800615c:	e7e1      	b.n	8006122 <_strtod_l+0x212>
 800615e:	280f      	cmp	r0, #15
 8006160:	dceb      	bgt.n	800613a <_strtod_l+0x22a>
 8006162:	230a      	movs	r3, #10
 8006164:	9808      	ldr	r0, [sp, #32]
 8006166:	fb03 2300 	mla	r3, r3, r0, r2
 800616a:	9308      	str	r3, [sp, #32]
 800616c:	e7e5      	b.n	800613a <_strtod_l+0x22a>
 800616e:	4629      	mov	r1, r5
 8006170:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006172:	460d      	mov	r5, r1
 8006174:	1c50      	adds	r0, r2, #1
 8006176:	9019      	str	r0, [sp, #100]	@ 0x64
 8006178:	7852      	ldrb	r2, [r2, #1]
 800617a:	4618      	mov	r0, r3
 800617c:	e7b1      	b.n	80060e2 <_strtod_l+0x1d2>
 800617e:	f04f 0900 	mov.w	r9, #0
 8006182:	2301      	movs	r3, #1
 8006184:	e77d      	b.n	8006082 <_strtod_l+0x172>
 8006186:	f04f 0c00 	mov.w	ip, #0
 800618a:	1ca2      	adds	r2, r4, #2
 800618c:	9219      	str	r2, [sp, #100]	@ 0x64
 800618e:	78a2      	ldrb	r2, [r4, #2]
 8006190:	e785      	b.n	800609e <_strtod_l+0x18e>
 8006192:	f04f 0c01 	mov.w	ip, #1
 8006196:	e7f8      	b.n	800618a <_strtod_l+0x27a>
 8006198:	0800c95c 	.word	0x0800c95c
 800619c:	7ff00000 	.word	0x7ff00000
 80061a0:	0800c946 	.word	0x0800c946
 80061a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80061a6:	1c51      	adds	r1, r2, #1
 80061a8:	9119      	str	r1, [sp, #100]	@ 0x64
 80061aa:	7852      	ldrb	r2, [r2, #1]
 80061ac:	2a30      	cmp	r2, #48	@ 0x30
 80061ae:	d0f9      	beq.n	80061a4 <_strtod_l+0x294>
 80061b0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80061b4:	2908      	cmp	r1, #8
 80061b6:	f63f af78 	bhi.w	80060aa <_strtod_l+0x19a>
 80061ba:	f04f 080a 	mov.w	r8, #10
 80061be:	3a30      	subs	r2, #48	@ 0x30
 80061c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80061c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80061c4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80061c6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80061c8:	1c56      	adds	r6, r2, #1
 80061ca:	9619      	str	r6, [sp, #100]	@ 0x64
 80061cc:	7852      	ldrb	r2, [r2, #1]
 80061ce:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80061d2:	f1be 0f09 	cmp.w	lr, #9
 80061d6:	d939      	bls.n	800624c <_strtod_l+0x33c>
 80061d8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80061da:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80061de:	1a76      	subs	r6, r6, r1
 80061e0:	2e08      	cmp	r6, #8
 80061e2:	dc03      	bgt.n	80061ec <_strtod_l+0x2dc>
 80061e4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80061e6:	4588      	cmp	r8, r1
 80061e8:	bfa8      	it	ge
 80061ea:	4688      	movge	r8, r1
 80061ec:	f1bc 0f00 	cmp.w	ip, #0
 80061f0:	d001      	beq.n	80061f6 <_strtod_l+0x2e6>
 80061f2:	f1c8 0800 	rsb	r8, r8, #0
 80061f6:	2d00      	cmp	r5, #0
 80061f8:	d14e      	bne.n	8006298 <_strtod_l+0x388>
 80061fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80061fc:	4308      	orrs	r0, r1
 80061fe:	f47f aec0 	bne.w	8005f82 <_strtod_l+0x72>
 8006202:	2b00      	cmp	r3, #0
 8006204:	f47f aed6 	bne.w	8005fb4 <_strtod_l+0xa4>
 8006208:	2a69      	cmp	r2, #105	@ 0x69
 800620a:	d028      	beq.n	800625e <_strtod_l+0x34e>
 800620c:	dc25      	bgt.n	800625a <_strtod_l+0x34a>
 800620e:	2a49      	cmp	r2, #73	@ 0x49
 8006210:	d025      	beq.n	800625e <_strtod_l+0x34e>
 8006212:	2a4e      	cmp	r2, #78	@ 0x4e
 8006214:	f47f aece 	bne.w	8005fb4 <_strtod_l+0xa4>
 8006218:	499a      	ldr	r1, [pc, #616]	@ (8006484 <_strtod_l+0x574>)
 800621a:	a819      	add	r0, sp, #100	@ 0x64
 800621c:	f002 fe56 	bl	8008ecc <__match>
 8006220:	2800      	cmp	r0, #0
 8006222:	f43f aec7 	beq.w	8005fb4 <_strtod_l+0xa4>
 8006226:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	2b28      	cmp	r3, #40	@ 0x28
 800622c:	d12e      	bne.n	800628c <_strtod_l+0x37c>
 800622e:	4996      	ldr	r1, [pc, #600]	@ (8006488 <_strtod_l+0x578>)
 8006230:	aa1c      	add	r2, sp, #112	@ 0x70
 8006232:	a819      	add	r0, sp, #100	@ 0x64
 8006234:	f002 fe5e 	bl	8008ef4 <__hexnan>
 8006238:	2805      	cmp	r0, #5
 800623a:	d127      	bne.n	800628c <_strtod_l+0x37c>
 800623c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800623e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006242:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006246:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800624a:	e69a      	b.n	8005f82 <_strtod_l+0x72>
 800624c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800624e:	fb08 2101 	mla	r1, r8, r1, r2
 8006252:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006256:	920e      	str	r2, [sp, #56]	@ 0x38
 8006258:	e7b5      	b.n	80061c6 <_strtod_l+0x2b6>
 800625a:	2a6e      	cmp	r2, #110	@ 0x6e
 800625c:	e7da      	b.n	8006214 <_strtod_l+0x304>
 800625e:	498b      	ldr	r1, [pc, #556]	@ (800648c <_strtod_l+0x57c>)
 8006260:	a819      	add	r0, sp, #100	@ 0x64
 8006262:	f002 fe33 	bl	8008ecc <__match>
 8006266:	2800      	cmp	r0, #0
 8006268:	f43f aea4 	beq.w	8005fb4 <_strtod_l+0xa4>
 800626c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800626e:	4988      	ldr	r1, [pc, #544]	@ (8006490 <_strtod_l+0x580>)
 8006270:	3b01      	subs	r3, #1
 8006272:	a819      	add	r0, sp, #100	@ 0x64
 8006274:	9319      	str	r3, [sp, #100]	@ 0x64
 8006276:	f002 fe29 	bl	8008ecc <__match>
 800627a:	b910      	cbnz	r0, 8006282 <_strtod_l+0x372>
 800627c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800627e:	3301      	adds	r3, #1
 8006280:	9319      	str	r3, [sp, #100]	@ 0x64
 8006282:	f04f 0a00 	mov.w	sl, #0
 8006286:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006494 <_strtod_l+0x584>
 800628a:	e67a      	b.n	8005f82 <_strtod_l+0x72>
 800628c:	4882      	ldr	r0, [pc, #520]	@ (8006498 <_strtod_l+0x588>)
 800628e:	f001 fcef 	bl	8007c70 <nan>
 8006292:	4682      	mov	sl, r0
 8006294:	468b      	mov	fp, r1
 8006296:	e674      	b.n	8005f82 <_strtod_l+0x72>
 8006298:	eba8 0309 	sub.w	r3, r8, r9
 800629c:	2f00      	cmp	r7, #0
 800629e:	bf08      	it	eq
 80062a0:	462f      	moveq	r7, r5
 80062a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80062a4:	2d10      	cmp	r5, #16
 80062a6:	462c      	mov	r4, r5
 80062a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80062aa:	bfa8      	it	ge
 80062ac:	2410      	movge	r4, #16
 80062ae:	f7fa f899 	bl	80003e4 <__aeabi_ui2d>
 80062b2:	2d09      	cmp	r5, #9
 80062b4:	4682      	mov	sl, r0
 80062b6:	468b      	mov	fp, r1
 80062b8:	dc11      	bgt.n	80062de <_strtod_l+0x3ce>
 80062ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f43f ae60 	beq.w	8005f82 <_strtod_l+0x72>
 80062c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062c4:	dd76      	ble.n	80063b4 <_strtod_l+0x4a4>
 80062c6:	2b16      	cmp	r3, #22
 80062c8:	dc5d      	bgt.n	8006386 <_strtod_l+0x476>
 80062ca:	4974      	ldr	r1, [pc, #464]	@ (800649c <_strtod_l+0x58c>)
 80062cc:	4652      	mov	r2, sl
 80062ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80062d2:	465b      	mov	r3, fp
 80062d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062d8:	f7fa f8fe 	bl	80004d8 <__aeabi_dmul>
 80062dc:	e7d9      	b.n	8006292 <_strtod_l+0x382>
 80062de:	4b6f      	ldr	r3, [pc, #444]	@ (800649c <_strtod_l+0x58c>)
 80062e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80062e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80062e8:	f7fa f8f6 	bl	80004d8 <__aeabi_dmul>
 80062ec:	4682      	mov	sl, r0
 80062ee:	9808      	ldr	r0, [sp, #32]
 80062f0:	468b      	mov	fp, r1
 80062f2:	f7fa f877 	bl	80003e4 <__aeabi_ui2d>
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	4650      	mov	r0, sl
 80062fc:	4659      	mov	r1, fp
 80062fe:	f7f9 ff35 	bl	800016c <__adddf3>
 8006302:	2d0f      	cmp	r5, #15
 8006304:	4682      	mov	sl, r0
 8006306:	468b      	mov	fp, r1
 8006308:	ddd7      	ble.n	80062ba <_strtod_l+0x3aa>
 800630a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800630c:	1b2c      	subs	r4, r5, r4
 800630e:	441c      	add	r4, r3
 8006310:	2c00      	cmp	r4, #0
 8006312:	f340 8096 	ble.w	8006442 <_strtod_l+0x532>
 8006316:	f014 030f 	ands.w	r3, r4, #15
 800631a:	d00a      	beq.n	8006332 <_strtod_l+0x422>
 800631c:	495f      	ldr	r1, [pc, #380]	@ (800649c <_strtod_l+0x58c>)
 800631e:	4652      	mov	r2, sl
 8006320:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006324:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006328:	465b      	mov	r3, fp
 800632a:	f7fa f8d5 	bl	80004d8 <__aeabi_dmul>
 800632e:	4682      	mov	sl, r0
 8006330:	468b      	mov	fp, r1
 8006332:	f034 040f 	bics.w	r4, r4, #15
 8006336:	d073      	beq.n	8006420 <_strtod_l+0x510>
 8006338:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800633c:	dd48      	ble.n	80063d0 <_strtod_l+0x4c0>
 800633e:	2400      	movs	r4, #0
 8006340:	46a0      	mov	r8, r4
 8006342:	46a1      	mov	r9, r4
 8006344:	940a      	str	r4, [sp, #40]	@ 0x28
 8006346:	2322      	movs	r3, #34	@ 0x22
 8006348:	f04f 0a00 	mov.w	sl, #0
 800634c:	9a05      	ldr	r2, [sp, #20]
 800634e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006494 <_strtod_l+0x584>
 8006352:	6013      	str	r3, [r2, #0]
 8006354:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006356:	2b00      	cmp	r3, #0
 8006358:	f43f ae13 	beq.w	8005f82 <_strtod_l+0x72>
 800635c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800635e:	9805      	ldr	r0, [sp, #20]
 8006360:	f002 ff6c 	bl	800923c <_Bfree>
 8006364:	4649      	mov	r1, r9
 8006366:	9805      	ldr	r0, [sp, #20]
 8006368:	f002 ff68 	bl	800923c <_Bfree>
 800636c:	4641      	mov	r1, r8
 800636e:	9805      	ldr	r0, [sp, #20]
 8006370:	f002 ff64 	bl	800923c <_Bfree>
 8006374:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006376:	9805      	ldr	r0, [sp, #20]
 8006378:	f002 ff60 	bl	800923c <_Bfree>
 800637c:	4621      	mov	r1, r4
 800637e:	9805      	ldr	r0, [sp, #20]
 8006380:	f002 ff5c 	bl	800923c <_Bfree>
 8006384:	e5fd      	b.n	8005f82 <_strtod_l+0x72>
 8006386:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006388:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800638c:	4293      	cmp	r3, r2
 800638e:	dbbc      	blt.n	800630a <_strtod_l+0x3fa>
 8006390:	4c42      	ldr	r4, [pc, #264]	@ (800649c <_strtod_l+0x58c>)
 8006392:	f1c5 050f 	rsb	r5, r5, #15
 8006396:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800639a:	4652      	mov	r2, sl
 800639c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063a0:	465b      	mov	r3, fp
 80063a2:	f7fa f899 	bl	80004d8 <__aeabi_dmul>
 80063a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063a8:	1b5d      	subs	r5, r3, r5
 80063aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80063ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80063b2:	e791      	b.n	80062d8 <_strtod_l+0x3c8>
 80063b4:	3316      	adds	r3, #22
 80063b6:	dba8      	blt.n	800630a <_strtod_l+0x3fa>
 80063b8:	4b38      	ldr	r3, [pc, #224]	@ (800649c <_strtod_l+0x58c>)
 80063ba:	eba9 0808 	sub.w	r8, r9, r8
 80063be:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80063c2:	4650      	mov	r0, sl
 80063c4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80063c8:	4659      	mov	r1, fp
 80063ca:	f7fa f9af 	bl	800072c <__aeabi_ddiv>
 80063ce:	e760      	b.n	8006292 <_strtod_l+0x382>
 80063d0:	4b33      	ldr	r3, [pc, #204]	@ (80064a0 <_strtod_l+0x590>)
 80063d2:	4650      	mov	r0, sl
 80063d4:	9308      	str	r3, [sp, #32]
 80063d6:	2300      	movs	r3, #0
 80063d8:	4659      	mov	r1, fp
 80063da:	461e      	mov	r6, r3
 80063dc:	1124      	asrs	r4, r4, #4
 80063de:	2c01      	cmp	r4, #1
 80063e0:	dc21      	bgt.n	8006426 <_strtod_l+0x516>
 80063e2:	b10b      	cbz	r3, 80063e8 <_strtod_l+0x4d8>
 80063e4:	4682      	mov	sl, r0
 80063e6:	468b      	mov	fp, r1
 80063e8:	492d      	ldr	r1, [pc, #180]	@ (80064a0 <_strtod_l+0x590>)
 80063ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80063ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80063f2:	4652      	mov	r2, sl
 80063f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063f8:	465b      	mov	r3, fp
 80063fa:	f7fa f86d 	bl	80004d8 <__aeabi_dmul>
 80063fe:	4b25      	ldr	r3, [pc, #148]	@ (8006494 <_strtod_l+0x584>)
 8006400:	460a      	mov	r2, r1
 8006402:	400b      	ands	r3, r1
 8006404:	4927      	ldr	r1, [pc, #156]	@ (80064a4 <_strtod_l+0x594>)
 8006406:	4682      	mov	sl, r0
 8006408:	428b      	cmp	r3, r1
 800640a:	d898      	bhi.n	800633e <_strtod_l+0x42e>
 800640c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006410:	428b      	cmp	r3, r1
 8006412:	bf86      	itte	hi
 8006414:	f04f 3aff 	movhi.w	sl, #4294967295
 8006418:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80064a8 <_strtod_l+0x598>
 800641c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006420:	2300      	movs	r3, #0
 8006422:	9308      	str	r3, [sp, #32]
 8006424:	e07a      	b.n	800651c <_strtod_l+0x60c>
 8006426:	07e2      	lsls	r2, r4, #31
 8006428:	d505      	bpl.n	8006436 <_strtod_l+0x526>
 800642a:	9b08      	ldr	r3, [sp, #32]
 800642c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006430:	f7fa f852 	bl	80004d8 <__aeabi_dmul>
 8006434:	2301      	movs	r3, #1
 8006436:	9a08      	ldr	r2, [sp, #32]
 8006438:	3601      	adds	r6, #1
 800643a:	3208      	adds	r2, #8
 800643c:	1064      	asrs	r4, r4, #1
 800643e:	9208      	str	r2, [sp, #32]
 8006440:	e7cd      	b.n	80063de <_strtod_l+0x4ce>
 8006442:	d0ed      	beq.n	8006420 <_strtod_l+0x510>
 8006444:	4264      	negs	r4, r4
 8006446:	f014 020f 	ands.w	r2, r4, #15
 800644a:	d00a      	beq.n	8006462 <_strtod_l+0x552>
 800644c:	4b13      	ldr	r3, [pc, #76]	@ (800649c <_strtod_l+0x58c>)
 800644e:	4650      	mov	r0, sl
 8006450:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006454:	4659      	mov	r1, fp
 8006456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645a:	f7fa f967 	bl	800072c <__aeabi_ddiv>
 800645e:	4682      	mov	sl, r0
 8006460:	468b      	mov	fp, r1
 8006462:	1124      	asrs	r4, r4, #4
 8006464:	d0dc      	beq.n	8006420 <_strtod_l+0x510>
 8006466:	2c1f      	cmp	r4, #31
 8006468:	dd20      	ble.n	80064ac <_strtod_l+0x59c>
 800646a:	2400      	movs	r4, #0
 800646c:	46a0      	mov	r8, r4
 800646e:	46a1      	mov	r9, r4
 8006470:	940a      	str	r4, [sp, #40]	@ 0x28
 8006472:	2322      	movs	r3, #34	@ 0x22
 8006474:	9a05      	ldr	r2, [sp, #20]
 8006476:	f04f 0a00 	mov.w	sl, #0
 800647a:	f04f 0b00 	mov.w	fp, #0
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	e768      	b.n	8006354 <_strtod_l+0x444>
 8006482:	bf00      	nop
 8006484:	0800caa6 	.word	0x0800caa6
 8006488:	0800c948 	.word	0x0800c948
 800648c:	0800ca9e 	.word	0x0800ca9e
 8006490:	0800cadd 	.word	0x0800cadd
 8006494:	7ff00000 	.word	0x7ff00000
 8006498:	0800cd6c 	.word	0x0800cd6c
 800649c:	0800cc58 	.word	0x0800cc58
 80064a0:	0800cc30 	.word	0x0800cc30
 80064a4:	7ca00000 	.word	0x7ca00000
 80064a8:	7fefffff 	.word	0x7fefffff
 80064ac:	f014 0310 	ands.w	r3, r4, #16
 80064b0:	bf18      	it	ne
 80064b2:	236a      	movne	r3, #106	@ 0x6a
 80064b4:	4650      	mov	r0, sl
 80064b6:	9308      	str	r3, [sp, #32]
 80064b8:	4659      	mov	r1, fp
 80064ba:	2300      	movs	r3, #0
 80064bc:	4ea9      	ldr	r6, [pc, #676]	@ (8006764 <_strtod_l+0x854>)
 80064be:	07e2      	lsls	r2, r4, #31
 80064c0:	d504      	bpl.n	80064cc <_strtod_l+0x5bc>
 80064c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064c6:	f7fa f807 	bl	80004d8 <__aeabi_dmul>
 80064ca:	2301      	movs	r3, #1
 80064cc:	1064      	asrs	r4, r4, #1
 80064ce:	f106 0608 	add.w	r6, r6, #8
 80064d2:	d1f4      	bne.n	80064be <_strtod_l+0x5ae>
 80064d4:	b10b      	cbz	r3, 80064da <_strtod_l+0x5ca>
 80064d6:	4682      	mov	sl, r0
 80064d8:	468b      	mov	fp, r1
 80064da:	9b08      	ldr	r3, [sp, #32]
 80064dc:	b1b3      	cbz	r3, 800650c <_strtod_l+0x5fc>
 80064de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80064e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	4659      	mov	r1, fp
 80064ea:	dd0f      	ble.n	800650c <_strtod_l+0x5fc>
 80064ec:	2b1f      	cmp	r3, #31
 80064ee:	dd57      	ble.n	80065a0 <_strtod_l+0x690>
 80064f0:	2b34      	cmp	r3, #52	@ 0x34
 80064f2:	bfd8      	it	le
 80064f4:	f04f 33ff 	movle.w	r3, #4294967295
 80064f8:	f04f 0a00 	mov.w	sl, #0
 80064fc:	bfcf      	iteee	gt
 80064fe:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006502:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006506:	4093      	lslle	r3, r2
 8006508:	ea03 0b01 	andle.w	fp, r3, r1
 800650c:	2200      	movs	r2, #0
 800650e:	2300      	movs	r3, #0
 8006510:	4650      	mov	r0, sl
 8006512:	4659      	mov	r1, fp
 8006514:	f7fa fa48 	bl	80009a8 <__aeabi_dcmpeq>
 8006518:	2800      	cmp	r0, #0
 800651a:	d1a6      	bne.n	800646a <_strtod_l+0x55a>
 800651c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800651e:	463a      	mov	r2, r7
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006524:	462b      	mov	r3, r5
 8006526:	9805      	ldr	r0, [sp, #20]
 8006528:	f002 fef0 	bl	800930c <__s2b>
 800652c:	900a      	str	r0, [sp, #40]	@ 0x28
 800652e:	2800      	cmp	r0, #0
 8006530:	f43f af05 	beq.w	800633e <_strtod_l+0x42e>
 8006534:	2400      	movs	r4, #0
 8006536:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006538:	eba9 0308 	sub.w	r3, r9, r8
 800653c:	2a00      	cmp	r2, #0
 800653e:	bfa8      	it	ge
 8006540:	2300      	movge	r3, #0
 8006542:	46a0      	mov	r8, r4
 8006544:	9312      	str	r3, [sp, #72]	@ 0x48
 8006546:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800654a:	9316      	str	r3, [sp, #88]	@ 0x58
 800654c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800654e:	9805      	ldr	r0, [sp, #20]
 8006550:	6859      	ldr	r1, [r3, #4]
 8006552:	f002 fe33 	bl	80091bc <_Balloc>
 8006556:	4681      	mov	r9, r0
 8006558:	2800      	cmp	r0, #0
 800655a:	f43f aef4 	beq.w	8006346 <_strtod_l+0x436>
 800655e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006560:	300c      	adds	r0, #12
 8006562:	691a      	ldr	r2, [r3, #16]
 8006564:	f103 010c 	add.w	r1, r3, #12
 8006568:	3202      	adds	r2, #2
 800656a:	0092      	lsls	r2, r2, #2
 800656c:	f001 fb71 	bl	8007c52 <memcpy>
 8006570:	ab1c      	add	r3, sp, #112	@ 0x70
 8006572:	9301      	str	r3, [sp, #4]
 8006574:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006576:	9300      	str	r3, [sp, #0]
 8006578:	4652      	mov	r2, sl
 800657a:	465b      	mov	r3, fp
 800657c:	9805      	ldr	r0, [sp, #20]
 800657e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006582:	f003 f9f5 	bl	8009970 <__d2b>
 8006586:	901a      	str	r0, [sp, #104]	@ 0x68
 8006588:	2800      	cmp	r0, #0
 800658a:	f43f aedc 	beq.w	8006346 <_strtod_l+0x436>
 800658e:	2101      	movs	r1, #1
 8006590:	9805      	ldr	r0, [sp, #20]
 8006592:	f002 ff51 	bl	8009438 <__i2b>
 8006596:	4680      	mov	r8, r0
 8006598:	b948      	cbnz	r0, 80065ae <_strtod_l+0x69e>
 800659a:	f04f 0800 	mov.w	r8, #0
 800659e:	e6d2      	b.n	8006346 <_strtod_l+0x436>
 80065a0:	f04f 32ff 	mov.w	r2, #4294967295
 80065a4:	fa02 f303 	lsl.w	r3, r2, r3
 80065a8:	ea03 0a0a 	and.w	sl, r3, sl
 80065ac:	e7ae      	b.n	800650c <_strtod_l+0x5fc>
 80065ae:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80065b0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80065b2:	2d00      	cmp	r5, #0
 80065b4:	bfab      	itete	ge
 80065b6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80065b8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80065ba:	18ef      	addge	r7, r5, r3
 80065bc:	1b5e      	sublt	r6, r3, r5
 80065be:	9b08      	ldr	r3, [sp, #32]
 80065c0:	bfa8      	it	ge
 80065c2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80065c4:	eba5 0503 	sub.w	r5, r5, r3
 80065c8:	4415      	add	r5, r2
 80065ca:	4b67      	ldr	r3, [pc, #412]	@ (8006768 <_strtod_l+0x858>)
 80065cc:	f105 35ff 	add.w	r5, r5, #4294967295
 80065d0:	bfb8      	it	lt
 80065d2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80065d4:	429d      	cmp	r5, r3
 80065d6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80065da:	da50      	bge.n	800667e <_strtod_l+0x76e>
 80065dc:	1b5b      	subs	r3, r3, r5
 80065de:	2b1f      	cmp	r3, #31
 80065e0:	f04f 0101 	mov.w	r1, #1
 80065e4:	eba2 0203 	sub.w	r2, r2, r3
 80065e8:	dc3d      	bgt.n	8006666 <_strtod_l+0x756>
 80065ea:	fa01 f303 	lsl.w	r3, r1, r3
 80065ee:	9313      	str	r3, [sp, #76]	@ 0x4c
 80065f0:	2300      	movs	r3, #0
 80065f2:	9310      	str	r3, [sp, #64]	@ 0x40
 80065f4:	18bd      	adds	r5, r7, r2
 80065f6:	9b08      	ldr	r3, [sp, #32]
 80065f8:	42af      	cmp	r7, r5
 80065fa:	4416      	add	r6, r2
 80065fc:	441e      	add	r6, r3
 80065fe:	463b      	mov	r3, r7
 8006600:	bfa8      	it	ge
 8006602:	462b      	movge	r3, r5
 8006604:	42b3      	cmp	r3, r6
 8006606:	bfa8      	it	ge
 8006608:	4633      	movge	r3, r6
 800660a:	2b00      	cmp	r3, #0
 800660c:	bfc2      	ittt	gt
 800660e:	1aed      	subgt	r5, r5, r3
 8006610:	1af6      	subgt	r6, r6, r3
 8006612:	1aff      	subgt	r7, r7, r3
 8006614:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006616:	2b00      	cmp	r3, #0
 8006618:	dd16      	ble.n	8006648 <_strtod_l+0x738>
 800661a:	4641      	mov	r1, r8
 800661c:	461a      	mov	r2, r3
 800661e:	9805      	ldr	r0, [sp, #20]
 8006620:	f002 ffc8 	bl	80095b4 <__pow5mult>
 8006624:	4680      	mov	r8, r0
 8006626:	2800      	cmp	r0, #0
 8006628:	d0b7      	beq.n	800659a <_strtod_l+0x68a>
 800662a:	4601      	mov	r1, r0
 800662c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800662e:	9805      	ldr	r0, [sp, #20]
 8006630:	f002 ff18 	bl	8009464 <__multiply>
 8006634:	900e      	str	r0, [sp, #56]	@ 0x38
 8006636:	2800      	cmp	r0, #0
 8006638:	f43f ae85 	beq.w	8006346 <_strtod_l+0x436>
 800663c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800663e:	9805      	ldr	r0, [sp, #20]
 8006640:	f002 fdfc 	bl	800923c <_Bfree>
 8006644:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006646:	931a      	str	r3, [sp, #104]	@ 0x68
 8006648:	2d00      	cmp	r5, #0
 800664a:	dc1d      	bgt.n	8006688 <_strtod_l+0x778>
 800664c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800664e:	2b00      	cmp	r3, #0
 8006650:	dd23      	ble.n	800669a <_strtod_l+0x78a>
 8006652:	4649      	mov	r1, r9
 8006654:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006656:	9805      	ldr	r0, [sp, #20]
 8006658:	f002 ffac 	bl	80095b4 <__pow5mult>
 800665c:	4681      	mov	r9, r0
 800665e:	b9e0      	cbnz	r0, 800669a <_strtod_l+0x78a>
 8006660:	f04f 0900 	mov.w	r9, #0
 8006664:	e66f      	b.n	8006346 <_strtod_l+0x436>
 8006666:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800666a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800666e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006672:	35e2      	adds	r5, #226	@ 0xe2
 8006674:	fa01 f305 	lsl.w	r3, r1, r5
 8006678:	9310      	str	r3, [sp, #64]	@ 0x40
 800667a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800667c:	e7ba      	b.n	80065f4 <_strtod_l+0x6e4>
 800667e:	2300      	movs	r3, #0
 8006680:	9310      	str	r3, [sp, #64]	@ 0x40
 8006682:	2301      	movs	r3, #1
 8006684:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006686:	e7b5      	b.n	80065f4 <_strtod_l+0x6e4>
 8006688:	462a      	mov	r2, r5
 800668a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800668c:	9805      	ldr	r0, [sp, #20]
 800668e:	f002 ffeb 	bl	8009668 <__lshift>
 8006692:	901a      	str	r0, [sp, #104]	@ 0x68
 8006694:	2800      	cmp	r0, #0
 8006696:	d1d9      	bne.n	800664c <_strtod_l+0x73c>
 8006698:	e655      	b.n	8006346 <_strtod_l+0x436>
 800669a:	2e00      	cmp	r6, #0
 800669c:	dd07      	ble.n	80066ae <_strtod_l+0x79e>
 800669e:	4649      	mov	r1, r9
 80066a0:	4632      	mov	r2, r6
 80066a2:	9805      	ldr	r0, [sp, #20]
 80066a4:	f002 ffe0 	bl	8009668 <__lshift>
 80066a8:	4681      	mov	r9, r0
 80066aa:	2800      	cmp	r0, #0
 80066ac:	d0d8      	beq.n	8006660 <_strtod_l+0x750>
 80066ae:	2f00      	cmp	r7, #0
 80066b0:	dd08      	ble.n	80066c4 <_strtod_l+0x7b4>
 80066b2:	4641      	mov	r1, r8
 80066b4:	463a      	mov	r2, r7
 80066b6:	9805      	ldr	r0, [sp, #20]
 80066b8:	f002 ffd6 	bl	8009668 <__lshift>
 80066bc:	4680      	mov	r8, r0
 80066be:	2800      	cmp	r0, #0
 80066c0:	f43f ae41 	beq.w	8006346 <_strtod_l+0x436>
 80066c4:	464a      	mov	r2, r9
 80066c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80066c8:	9805      	ldr	r0, [sp, #20]
 80066ca:	f003 f855 	bl	8009778 <__mdiff>
 80066ce:	4604      	mov	r4, r0
 80066d0:	2800      	cmp	r0, #0
 80066d2:	f43f ae38 	beq.w	8006346 <_strtod_l+0x436>
 80066d6:	68c3      	ldr	r3, [r0, #12]
 80066d8:	4641      	mov	r1, r8
 80066da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80066dc:	2300      	movs	r3, #0
 80066de:	60c3      	str	r3, [r0, #12]
 80066e0:	f003 f82e 	bl	8009740 <__mcmp>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	da45      	bge.n	8006774 <_strtod_l+0x864>
 80066e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066ea:	ea53 030a 	orrs.w	r3, r3, sl
 80066ee:	d16b      	bne.n	80067c8 <_strtod_l+0x8b8>
 80066f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d167      	bne.n	80067c8 <_strtod_l+0x8b8>
 80066f8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80066fc:	0d1b      	lsrs	r3, r3, #20
 80066fe:	051b      	lsls	r3, r3, #20
 8006700:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006704:	d960      	bls.n	80067c8 <_strtod_l+0x8b8>
 8006706:	6963      	ldr	r3, [r4, #20]
 8006708:	b913      	cbnz	r3, 8006710 <_strtod_l+0x800>
 800670a:	6923      	ldr	r3, [r4, #16]
 800670c:	2b01      	cmp	r3, #1
 800670e:	dd5b      	ble.n	80067c8 <_strtod_l+0x8b8>
 8006710:	4621      	mov	r1, r4
 8006712:	2201      	movs	r2, #1
 8006714:	9805      	ldr	r0, [sp, #20]
 8006716:	f002 ffa7 	bl	8009668 <__lshift>
 800671a:	4641      	mov	r1, r8
 800671c:	4604      	mov	r4, r0
 800671e:	f003 f80f 	bl	8009740 <__mcmp>
 8006722:	2800      	cmp	r0, #0
 8006724:	dd50      	ble.n	80067c8 <_strtod_l+0x8b8>
 8006726:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800672a:	9a08      	ldr	r2, [sp, #32]
 800672c:	0d1b      	lsrs	r3, r3, #20
 800672e:	051b      	lsls	r3, r3, #20
 8006730:	2a00      	cmp	r2, #0
 8006732:	d06a      	beq.n	800680a <_strtod_l+0x8fa>
 8006734:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006738:	d867      	bhi.n	800680a <_strtod_l+0x8fa>
 800673a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800673e:	f67f ae98 	bls.w	8006472 <_strtod_l+0x562>
 8006742:	4650      	mov	r0, sl
 8006744:	4659      	mov	r1, fp
 8006746:	4b09      	ldr	r3, [pc, #36]	@ (800676c <_strtod_l+0x85c>)
 8006748:	2200      	movs	r2, #0
 800674a:	f7f9 fec5 	bl	80004d8 <__aeabi_dmul>
 800674e:	4b08      	ldr	r3, [pc, #32]	@ (8006770 <_strtod_l+0x860>)
 8006750:	4682      	mov	sl, r0
 8006752:	400b      	ands	r3, r1
 8006754:	468b      	mov	fp, r1
 8006756:	2b00      	cmp	r3, #0
 8006758:	f47f ae00 	bne.w	800635c <_strtod_l+0x44c>
 800675c:	2322      	movs	r3, #34	@ 0x22
 800675e:	9a05      	ldr	r2, [sp, #20]
 8006760:	6013      	str	r3, [r2, #0]
 8006762:	e5fb      	b.n	800635c <_strtod_l+0x44c>
 8006764:	0800c970 	.word	0x0800c970
 8006768:	fffffc02 	.word	0xfffffc02
 800676c:	39500000 	.word	0x39500000
 8006770:	7ff00000 	.word	0x7ff00000
 8006774:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006778:	d165      	bne.n	8006846 <_strtod_l+0x936>
 800677a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800677c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006780:	b35a      	cbz	r2, 80067da <_strtod_l+0x8ca>
 8006782:	4a99      	ldr	r2, [pc, #612]	@ (80069e8 <_strtod_l+0xad8>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d12b      	bne.n	80067e0 <_strtod_l+0x8d0>
 8006788:	9b08      	ldr	r3, [sp, #32]
 800678a:	4651      	mov	r1, sl
 800678c:	b303      	cbz	r3, 80067d0 <_strtod_l+0x8c0>
 800678e:	465a      	mov	r2, fp
 8006790:	4b96      	ldr	r3, [pc, #600]	@ (80069ec <_strtod_l+0xadc>)
 8006792:	4013      	ands	r3, r2
 8006794:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006798:	f04f 32ff 	mov.w	r2, #4294967295
 800679c:	d81b      	bhi.n	80067d6 <_strtod_l+0x8c6>
 800679e:	0d1b      	lsrs	r3, r3, #20
 80067a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80067a4:	fa02 f303 	lsl.w	r3, r2, r3
 80067a8:	4299      	cmp	r1, r3
 80067aa:	d119      	bne.n	80067e0 <_strtod_l+0x8d0>
 80067ac:	4b90      	ldr	r3, [pc, #576]	@ (80069f0 <_strtod_l+0xae0>)
 80067ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d102      	bne.n	80067ba <_strtod_l+0x8aa>
 80067b4:	3101      	adds	r1, #1
 80067b6:	f43f adc6 	beq.w	8006346 <_strtod_l+0x436>
 80067ba:	f04f 0a00 	mov.w	sl, #0
 80067be:	4b8b      	ldr	r3, [pc, #556]	@ (80069ec <_strtod_l+0xadc>)
 80067c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067c2:	401a      	ands	r2, r3
 80067c4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80067c8:	9b08      	ldr	r3, [sp, #32]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1b9      	bne.n	8006742 <_strtod_l+0x832>
 80067ce:	e5c5      	b.n	800635c <_strtod_l+0x44c>
 80067d0:	f04f 33ff 	mov.w	r3, #4294967295
 80067d4:	e7e8      	b.n	80067a8 <_strtod_l+0x898>
 80067d6:	4613      	mov	r3, r2
 80067d8:	e7e6      	b.n	80067a8 <_strtod_l+0x898>
 80067da:	ea53 030a 	orrs.w	r3, r3, sl
 80067de:	d0a2      	beq.n	8006726 <_strtod_l+0x816>
 80067e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80067e2:	b1db      	cbz	r3, 800681c <_strtod_l+0x90c>
 80067e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067e6:	4213      	tst	r3, r2
 80067e8:	d0ee      	beq.n	80067c8 <_strtod_l+0x8b8>
 80067ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067ec:	4650      	mov	r0, sl
 80067ee:	4659      	mov	r1, fp
 80067f0:	9a08      	ldr	r2, [sp, #32]
 80067f2:	b1bb      	cbz	r3, 8006824 <_strtod_l+0x914>
 80067f4:	f7ff fb69 	bl	8005eca <sulp>
 80067f8:	4602      	mov	r2, r0
 80067fa:	460b      	mov	r3, r1
 80067fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006800:	f7f9 fcb4 	bl	800016c <__adddf3>
 8006804:	4682      	mov	sl, r0
 8006806:	468b      	mov	fp, r1
 8006808:	e7de      	b.n	80067c8 <_strtod_l+0x8b8>
 800680a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800680e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006812:	f04f 3aff 	mov.w	sl, #4294967295
 8006816:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800681a:	e7d5      	b.n	80067c8 <_strtod_l+0x8b8>
 800681c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800681e:	ea13 0f0a 	tst.w	r3, sl
 8006822:	e7e1      	b.n	80067e8 <_strtod_l+0x8d8>
 8006824:	f7ff fb51 	bl	8005eca <sulp>
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006830:	f7f9 fc9a 	bl	8000168 <__aeabi_dsub>
 8006834:	2200      	movs	r2, #0
 8006836:	2300      	movs	r3, #0
 8006838:	4682      	mov	sl, r0
 800683a:	468b      	mov	fp, r1
 800683c:	f7fa f8b4 	bl	80009a8 <__aeabi_dcmpeq>
 8006840:	2800      	cmp	r0, #0
 8006842:	d0c1      	beq.n	80067c8 <_strtod_l+0x8b8>
 8006844:	e615      	b.n	8006472 <_strtod_l+0x562>
 8006846:	4641      	mov	r1, r8
 8006848:	4620      	mov	r0, r4
 800684a:	f003 f8e9 	bl	8009a20 <__ratio>
 800684e:	2200      	movs	r2, #0
 8006850:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006854:	4606      	mov	r6, r0
 8006856:	460f      	mov	r7, r1
 8006858:	f7fa f8ba 	bl	80009d0 <__aeabi_dcmple>
 800685c:	2800      	cmp	r0, #0
 800685e:	d06d      	beq.n	800693c <_strtod_l+0xa2c>
 8006860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006862:	2b00      	cmp	r3, #0
 8006864:	d178      	bne.n	8006958 <_strtod_l+0xa48>
 8006866:	f1ba 0f00 	cmp.w	sl, #0
 800686a:	d156      	bne.n	800691a <_strtod_l+0xa0a>
 800686c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800686e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006872:	2b00      	cmp	r3, #0
 8006874:	d158      	bne.n	8006928 <_strtod_l+0xa18>
 8006876:	2200      	movs	r2, #0
 8006878:	4630      	mov	r0, r6
 800687a:	4639      	mov	r1, r7
 800687c:	4b5d      	ldr	r3, [pc, #372]	@ (80069f4 <_strtod_l+0xae4>)
 800687e:	f7fa f89d 	bl	80009bc <__aeabi_dcmplt>
 8006882:	2800      	cmp	r0, #0
 8006884:	d157      	bne.n	8006936 <_strtod_l+0xa26>
 8006886:	4630      	mov	r0, r6
 8006888:	4639      	mov	r1, r7
 800688a:	2200      	movs	r2, #0
 800688c:	4b5a      	ldr	r3, [pc, #360]	@ (80069f8 <_strtod_l+0xae8>)
 800688e:	f7f9 fe23 	bl	80004d8 <__aeabi_dmul>
 8006892:	4606      	mov	r6, r0
 8006894:	460f      	mov	r7, r1
 8006896:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800689a:	9606      	str	r6, [sp, #24]
 800689c:	9307      	str	r3, [sp, #28]
 800689e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068a2:	4d52      	ldr	r5, [pc, #328]	@ (80069ec <_strtod_l+0xadc>)
 80068a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80068a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068aa:	401d      	ands	r5, r3
 80068ac:	4b53      	ldr	r3, [pc, #332]	@ (80069fc <_strtod_l+0xaec>)
 80068ae:	429d      	cmp	r5, r3
 80068b0:	f040 80aa 	bne.w	8006a08 <_strtod_l+0xaf8>
 80068b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068b6:	4650      	mov	r0, sl
 80068b8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80068bc:	4659      	mov	r1, fp
 80068be:	f002 ffef 	bl	80098a0 <__ulp>
 80068c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068c6:	f7f9 fe07 	bl	80004d8 <__aeabi_dmul>
 80068ca:	4652      	mov	r2, sl
 80068cc:	465b      	mov	r3, fp
 80068ce:	f7f9 fc4d 	bl	800016c <__adddf3>
 80068d2:	460b      	mov	r3, r1
 80068d4:	4945      	ldr	r1, [pc, #276]	@ (80069ec <_strtod_l+0xadc>)
 80068d6:	4a4a      	ldr	r2, [pc, #296]	@ (8006a00 <_strtod_l+0xaf0>)
 80068d8:	4019      	ands	r1, r3
 80068da:	4291      	cmp	r1, r2
 80068dc:	4682      	mov	sl, r0
 80068de:	d942      	bls.n	8006966 <_strtod_l+0xa56>
 80068e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80068e2:	4b43      	ldr	r3, [pc, #268]	@ (80069f0 <_strtod_l+0xae0>)
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d103      	bne.n	80068f0 <_strtod_l+0x9e0>
 80068e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80068ea:	3301      	adds	r3, #1
 80068ec:	f43f ad2b 	beq.w	8006346 <_strtod_l+0x436>
 80068f0:	f04f 3aff 	mov.w	sl, #4294967295
 80068f4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80069f0 <_strtod_l+0xae0>
 80068f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80068fa:	9805      	ldr	r0, [sp, #20]
 80068fc:	f002 fc9e 	bl	800923c <_Bfree>
 8006900:	4649      	mov	r1, r9
 8006902:	9805      	ldr	r0, [sp, #20]
 8006904:	f002 fc9a 	bl	800923c <_Bfree>
 8006908:	4641      	mov	r1, r8
 800690a:	9805      	ldr	r0, [sp, #20]
 800690c:	f002 fc96 	bl	800923c <_Bfree>
 8006910:	4621      	mov	r1, r4
 8006912:	9805      	ldr	r0, [sp, #20]
 8006914:	f002 fc92 	bl	800923c <_Bfree>
 8006918:	e618      	b.n	800654c <_strtod_l+0x63c>
 800691a:	f1ba 0f01 	cmp.w	sl, #1
 800691e:	d103      	bne.n	8006928 <_strtod_l+0xa18>
 8006920:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006922:	2b00      	cmp	r3, #0
 8006924:	f43f ada5 	beq.w	8006472 <_strtod_l+0x562>
 8006928:	2200      	movs	r2, #0
 800692a:	4b36      	ldr	r3, [pc, #216]	@ (8006a04 <_strtod_l+0xaf4>)
 800692c:	2600      	movs	r6, #0
 800692e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006932:	4f30      	ldr	r7, [pc, #192]	@ (80069f4 <_strtod_l+0xae4>)
 8006934:	e7b3      	b.n	800689e <_strtod_l+0x98e>
 8006936:	2600      	movs	r6, #0
 8006938:	4f2f      	ldr	r7, [pc, #188]	@ (80069f8 <_strtod_l+0xae8>)
 800693a:	e7ac      	b.n	8006896 <_strtod_l+0x986>
 800693c:	4630      	mov	r0, r6
 800693e:	4639      	mov	r1, r7
 8006940:	4b2d      	ldr	r3, [pc, #180]	@ (80069f8 <_strtod_l+0xae8>)
 8006942:	2200      	movs	r2, #0
 8006944:	f7f9 fdc8 	bl	80004d8 <__aeabi_dmul>
 8006948:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800694a:	4606      	mov	r6, r0
 800694c:	460f      	mov	r7, r1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d0a1      	beq.n	8006896 <_strtod_l+0x986>
 8006952:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006956:	e7a2      	b.n	800689e <_strtod_l+0x98e>
 8006958:	2200      	movs	r2, #0
 800695a:	4b26      	ldr	r3, [pc, #152]	@ (80069f4 <_strtod_l+0xae4>)
 800695c:	4616      	mov	r6, r2
 800695e:	461f      	mov	r7, r3
 8006960:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006964:	e79b      	b.n	800689e <_strtod_l+0x98e>
 8006966:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800696a:	9b08      	ldr	r3, [sp, #32]
 800696c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1c1      	bne.n	80068f8 <_strtod_l+0x9e8>
 8006974:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006978:	0d1b      	lsrs	r3, r3, #20
 800697a:	051b      	lsls	r3, r3, #20
 800697c:	429d      	cmp	r5, r3
 800697e:	d1bb      	bne.n	80068f8 <_strtod_l+0x9e8>
 8006980:	4630      	mov	r0, r6
 8006982:	4639      	mov	r1, r7
 8006984:	f7fa fbea 	bl	800115c <__aeabi_d2lz>
 8006988:	f7f9 fd78 	bl	800047c <__aeabi_l2d>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	4630      	mov	r0, r6
 8006992:	4639      	mov	r1, r7
 8006994:	f7f9 fbe8 	bl	8000168 <__aeabi_dsub>
 8006998:	460b      	mov	r3, r1
 800699a:	4602      	mov	r2, r0
 800699c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80069a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80069a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069a6:	ea46 060a 	orr.w	r6, r6, sl
 80069aa:	431e      	orrs	r6, r3
 80069ac:	d069      	beq.n	8006a82 <_strtod_l+0xb72>
 80069ae:	a30a      	add	r3, pc, #40	@ (adr r3, 80069d8 <_strtod_l+0xac8>)
 80069b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b4:	f7fa f802 	bl	80009bc <__aeabi_dcmplt>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	f47f accf 	bne.w	800635c <_strtod_l+0x44c>
 80069be:	a308      	add	r3, pc, #32	@ (adr r3, 80069e0 <_strtod_l+0xad0>)
 80069c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069c8:	f7fa f816 	bl	80009f8 <__aeabi_dcmpgt>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	d093      	beq.n	80068f8 <_strtod_l+0x9e8>
 80069d0:	e4c4      	b.n	800635c <_strtod_l+0x44c>
 80069d2:	bf00      	nop
 80069d4:	f3af 8000 	nop.w
 80069d8:	94a03595 	.word	0x94a03595
 80069dc:	3fdfffff 	.word	0x3fdfffff
 80069e0:	35afe535 	.word	0x35afe535
 80069e4:	3fe00000 	.word	0x3fe00000
 80069e8:	000fffff 	.word	0x000fffff
 80069ec:	7ff00000 	.word	0x7ff00000
 80069f0:	7fefffff 	.word	0x7fefffff
 80069f4:	3ff00000 	.word	0x3ff00000
 80069f8:	3fe00000 	.word	0x3fe00000
 80069fc:	7fe00000 	.word	0x7fe00000
 8006a00:	7c9fffff 	.word	0x7c9fffff
 8006a04:	bff00000 	.word	0xbff00000
 8006a08:	9b08      	ldr	r3, [sp, #32]
 8006a0a:	b323      	cbz	r3, 8006a56 <_strtod_l+0xb46>
 8006a0c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006a10:	d821      	bhi.n	8006a56 <_strtod_l+0xb46>
 8006a12:	a327      	add	r3, pc, #156	@ (adr r3, 8006ab0 <_strtod_l+0xba0>)
 8006a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a18:	4630      	mov	r0, r6
 8006a1a:	4639      	mov	r1, r7
 8006a1c:	f7f9 ffd8 	bl	80009d0 <__aeabi_dcmple>
 8006a20:	b1a0      	cbz	r0, 8006a4c <_strtod_l+0xb3c>
 8006a22:	4639      	mov	r1, r7
 8006a24:	4630      	mov	r0, r6
 8006a26:	f7fa f82f 	bl	8000a88 <__aeabi_d2uiz>
 8006a2a:	2801      	cmp	r0, #1
 8006a2c:	bf38      	it	cc
 8006a2e:	2001      	movcc	r0, #1
 8006a30:	f7f9 fcd8 	bl	80003e4 <__aeabi_ui2d>
 8006a34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a36:	4606      	mov	r6, r0
 8006a38:	460f      	mov	r7, r1
 8006a3a:	b9fb      	cbnz	r3, 8006a7c <_strtod_l+0xb6c>
 8006a3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006a40:	9014      	str	r0, [sp, #80]	@ 0x50
 8006a42:	9315      	str	r3, [sp, #84]	@ 0x54
 8006a44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006a48:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006a4c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006a4e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006a52:	1b5b      	subs	r3, r3, r5
 8006a54:	9311      	str	r3, [sp, #68]	@ 0x44
 8006a56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a5a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006a5e:	f002 ff1f 	bl	80098a0 <__ulp>
 8006a62:	4602      	mov	r2, r0
 8006a64:	460b      	mov	r3, r1
 8006a66:	4650      	mov	r0, sl
 8006a68:	4659      	mov	r1, fp
 8006a6a:	f7f9 fd35 	bl	80004d8 <__aeabi_dmul>
 8006a6e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006a72:	f7f9 fb7b 	bl	800016c <__adddf3>
 8006a76:	4682      	mov	sl, r0
 8006a78:	468b      	mov	fp, r1
 8006a7a:	e776      	b.n	800696a <_strtod_l+0xa5a>
 8006a7c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006a80:	e7e0      	b.n	8006a44 <_strtod_l+0xb34>
 8006a82:	a30d      	add	r3, pc, #52	@ (adr r3, 8006ab8 <_strtod_l+0xba8>)
 8006a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a88:	f7f9 ff98 	bl	80009bc <__aeabi_dcmplt>
 8006a8c:	e79e      	b.n	80069cc <_strtod_l+0xabc>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a94:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	f7ff ba77 	b.w	8005f8a <_strtod_l+0x7a>
 8006a9c:	2a65      	cmp	r2, #101	@ 0x65
 8006a9e:	f43f ab6e 	beq.w	800617e <_strtod_l+0x26e>
 8006aa2:	2a45      	cmp	r2, #69	@ 0x45
 8006aa4:	f43f ab6b 	beq.w	800617e <_strtod_l+0x26e>
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	f7ff bba6 	b.w	80061fa <_strtod_l+0x2ea>
 8006aae:	bf00      	nop
 8006ab0:	ffc00000 	.word	0xffc00000
 8006ab4:	41dfffff 	.word	0x41dfffff
 8006ab8:	94a03595 	.word	0x94a03595
 8006abc:	3fcfffff 	.word	0x3fcfffff

08006ac0 <_strtod_r>:
 8006ac0:	4b01      	ldr	r3, [pc, #4]	@ (8006ac8 <_strtod_r+0x8>)
 8006ac2:	f7ff ba25 	b.w	8005f10 <_strtod_l>
 8006ac6:	bf00      	nop
 8006ac8:	20000030 	.word	0x20000030

08006acc <strtod>:
 8006acc:	460a      	mov	r2, r1
 8006ace:	4601      	mov	r1, r0
 8006ad0:	4802      	ldr	r0, [pc, #8]	@ (8006adc <strtod+0x10>)
 8006ad2:	4b03      	ldr	r3, [pc, #12]	@ (8006ae0 <strtod+0x14>)
 8006ad4:	6800      	ldr	r0, [r0, #0]
 8006ad6:	f7ff ba1b 	b.w	8005f10 <_strtod_l>
 8006ada:	bf00      	nop
 8006adc:	2000019c 	.word	0x2000019c
 8006ae0:	20000030 	.word	0x20000030

08006ae4 <_strtol_l.constprop.0>:
 8006ae4:	2b24      	cmp	r3, #36	@ 0x24
 8006ae6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aea:	4686      	mov	lr, r0
 8006aec:	4690      	mov	r8, r2
 8006aee:	d801      	bhi.n	8006af4 <_strtol_l.constprop.0+0x10>
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d106      	bne.n	8006b02 <_strtol_l.constprop.0+0x1e>
 8006af4:	f001 f872 	bl	8007bdc <__errno>
 8006af8:	2316      	movs	r3, #22
 8006afa:	6003      	str	r3, [r0, #0]
 8006afc:	2000      	movs	r0, #0
 8006afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b02:	460d      	mov	r5, r1
 8006b04:	4833      	ldr	r0, [pc, #204]	@ (8006bd4 <_strtol_l.constprop.0+0xf0>)
 8006b06:	462a      	mov	r2, r5
 8006b08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b0c:	5d06      	ldrb	r6, [r0, r4]
 8006b0e:	f016 0608 	ands.w	r6, r6, #8
 8006b12:	d1f8      	bne.n	8006b06 <_strtol_l.constprop.0+0x22>
 8006b14:	2c2d      	cmp	r4, #45	@ 0x2d
 8006b16:	d12d      	bne.n	8006b74 <_strtol_l.constprop.0+0x90>
 8006b18:	2601      	movs	r6, #1
 8006b1a:	782c      	ldrb	r4, [r5, #0]
 8006b1c:	1c95      	adds	r5, r2, #2
 8006b1e:	f033 0210 	bics.w	r2, r3, #16
 8006b22:	d109      	bne.n	8006b38 <_strtol_l.constprop.0+0x54>
 8006b24:	2c30      	cmp	r4, #48	@ 0x30
 8006b26:	d12a      	bne.n	8006b7e <_strtol_l.constprop.0+0x9a>
 8006b28:	782a      	ldrb	r2, [r5, #0]
 8006b2a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006b2e:	2a58      	cmp	r2, #88	@ 0x58
 8006b30:	d125      	bne.n	8006b7e <_strtol_l.constprop.0+0x9a>
 8006b32:	2310      	movs	r3, #16
 8006b34:	786c      	ldrb	r4, [r5, #1]
 8006b36:	3502      	adds	r5, #2
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006b3e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006b42:	fbbc f9f3 	udiv	r9, ip, r3
 8006b46:	4610      	mov	r0, r2
 8006b48:	fb03 ca19 	mls	sl, r3, r9, ip
 8006b4c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006b50:	2f09      	cmp	r7, #9
 8006b52:	d81b      	bhi.n	8006b8c <_strtol_l.constprop.0+0xa8>
 8006b54:	463c      	mov	r4, r7
 8006b56:	42a3      	cmp	r3, r4
 8006b58:	dd27      	ble.n	8006baa <_strtol_l.constprop.0+0xc6>
 8006b5a:	1c57      	adds	r7, r2, #1
 8006b5c:	d007      	beq.n	8006b6e <_strtol_l.constprop.0+0x8a>
 8006b5e:	4581      	cmp	r9, r0
 8006b60:	d320      	bcc.n	8006ba4 <_strtol_l.constprop.0+0xc0>
 8006b62:	d101      	bne.n	8006b68 <_strtol_l.constprop.0+0x84>
 8006b64:	45a2      	cmp	sl, r4
 8006b66:	db1d      	blt.n	8006ba4 <_strtol_l.constprop.0+0xc0>
 8006b68:	2201      	movs	r2, #1
 8006b6a:	fb00 4003 	mla	r0, r0, r3, r4
 8006b6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b72:	e7eb      	b.n	8006b4c <_strtol_l.constprop.0+0x68>
 8006b74:	2c2b      	cmp	r4, #43	@ 0x2b
 8006b76:	bf04      	itt	eq
 8006b78:	782c      	ldrbeq	r4, [r5, #0]
 8006b7a:	1c95      	addeq	r5, r2, #2
 8006b7c:	e7cf      	b.n	8006b1e <_strtol_l.constprop.0+0x3a>
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1da      	bne.n	8006b38 <_strtol_l.constprop.0+0x54>
 8006b82:	2c30      	cmp	r4, #48	@ 0x30
 8006b84:	bf0c      	ite	eq
 8006b86:	2308      	moveq	r3, #8
 8006b88:	230a      	movne	r3, #10
 8006b8a:	e7d5      	b.n	8006b38 <_strtol_l.constprop.0+0x54>
 8006b8c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006b90:	2f19      	cmp	r7, #25
 8006b92:	d801      	bhi.n	8006b98 <_strtol_l.constprop.0+0xb4>
 8006b94:	3c37      	subs	r4, #55	@ 0x37
 8006b96:	e7de      	b.n	8006b56 <_strtol_l.constprop.0+0x72>
 8006b98:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006b9c:	2f19      	cmp	r7, #25
 8006b9e:	d804      	bhi.n	8006baa <_strtol_l.constprop.0+0xc6>
 8006ba0:	3c57      	subs	r4, #87	@ 0x57
 8006ba2:	e7d8      	b.n	8006b56 <_strtol_l.constprop.0+0x72>
 8006ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba8:	e7e1      	b.n	8006b6e <_strtol_l.constprop.0+0x8a>
 8006baa:	1c53      	adds	r3, r2, #1
 8006bac:	d108      	bne.n	8006bc0 <_strtol_l.constprop.0+0xdc>
 8006bae:	2322      	movs	r3, #34	@ 0x22
 8006bb0:	4660      	mov	r0, ip
 8006bb2:	f8ce 3000 	str.w	r3, [lr]
 8006bb6:	f1b8 0f00 	cmp.w	r8, #0
 8006bba:	d0a0      	beq.n	8006afe <_strtol_l.constprop.0+0x1a>
 8006bbc:	1e69      	subs	r1, r5, #1
 8006bbe:	e006      	b.n	8006bce <_strtol_l.constprop.0+0xea>
 8006bc0:	b106      	cbz	r6, 8006bc4 <_strtol_l.constprop.0+0xe0>
 8006bc2:	4240      	negs	r0, r0
 8006bc4:	f1b8 0f00 	cmp.w	r8, #0
 8006bc8:	d099      	beq.n	8006afe <_strtol_l.constprop.0+0x1a>
 8006bca:	2a00      	cmp	r2, #0
 8006bcc:	d1f6      	bne.n	8006bbc <_strtol_l.constprop.0+0xd8>
 8006bce:	f8c8 1000 	str.w	r1, [r8]
 8006bd2:	e794      	b.n	8006afe <_strtol_l.constprop.0+0x1a>
 8006bd4:	0800c999 	.word	0x0800c999

08006bd8 <_strtol_r>:
 8006bd8:	f7ff bf84 	b.w	8006ae4 <_strtol_l.constprop.0>

08006bdc <strtol>:
 8006bdc:	4613      	mov	r3, r2
 8006bde:	460a      	mov	r2, r1
 8006be0:	4601      	mov	r1, r0
 8006be2:	4802      	ldr	r0, [pc, #8]	@ (8006bec <strtol+0x10>)
 8006be4:	6800      	ldr	r0, [r0, #0]
 8006be6:	f7ff bf7d 	b.w	8006ae4 <_strtol_l.constprop.0>
 8006bea:	bf00      	nop
 8006bec:	2000019c 	.word	0x2000019c

08006bf0 <__cvt>:
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf6:	461d      	mov	r5, r3
 8006bf8:	bfbb      	ittet	lt
 8006bfa:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006bfe:	461d      	movlt	r5, r3
 8006c00:	2300      	movge	r3, #0
 8006c02:	232d      	movlt	r3, #45	@ 0x2d
 8006c04:	b088      	sub	sp, #32
 8006c06:	4614      	mov	r4, r2
 8006c08:	bfb8      	it	lt
 8006c0a:	4614      	movlt	r4, r2
 8006c0c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006c0e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006c10:	7013      	strb	r3, [r2, #0]
 8006c12:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006c14:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006c18:	f023 0820 	bic.w	r8, r3, #32
 8006c1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006c20:	d005      	beq.n	8006c2e <__cvt+0x3e>
 8006c22:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006c26:	d100      	bne.n	8006c2a <__cvt+0x3a>
 8006c28:	3601      	adds	r6, #1
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	e000      	b.n	8006c30 <__cvt+0x40>
 8006c2e:	2303      	movs	r3, #3
 8006c30:	aa07      	add	r2, sp, #28
 8006c32:	9204      	str	r2, [sp, #16]
 8006c34:	aa06      	add	r2, sp, #24
 8006c36:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006c3a:	e9cd 3600 	strd	r3, r6, [sp]
 8006c3e:	4622      	mov	r2, r4
 8006c40:	462b      	mov	r3, r5
 8006c42:	f001 f8a9 	bl	8007d98 <_dtoa_r>
 8006c46:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006c4a:	4607      	mov	r7, r0
 8006c4c:	d119      	bne.n	8006c82 <__cvt+0x92>
 8006c4e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006c50:	07db      	lsls	r3, r3, #31
 8006c52:	d50e      	bpl.n	8006c72 <__cvt+0x82>
 8006c54:	eb00 0906 	add.w	r9, r0, r6
 8006c58:	2200      	movs	r2, #0
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	4629      	mov	r1, r5
 8006c60:	f7f9 fea2 	bl	80009a8 <__aeabi_dcmpeq>
 8006c64:	b108      	cbz	r0, 8006c6a <__cvt+0x7a>
 8006c66:	f8cd 901c 	str.w	r9, [sp, #28]
 8006c6a:	2230      	movs	r2, #48	@ 0x30
 8006c6c:	9b07      	ldr	r3, [sp, #28]
 8006c6e:	454b      	cmp	r3, r9
 8006c70:	d31e      	bcc.n	8006cb0 <__cvt+0xc0>
 8006c72:	4638      	mov	r0, r7
 8006c74:	9b07      	ldr	r3, [sp, #28]
 8006c76:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006c78:	1bdb      	subs	r3, r3, r7
 8006c7a:	6013      	str	r3, [r2, #0]
 8006c7c:	b008      	add	sp, #32
 8006c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c82:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006c86:	eb00 0906 	add.w	r9, r0, r6
 8006c8a:	d1e5      	bne.n	8006c58 <__cvt+0x68>
 8006c8c:	7803      	ldrb	r3, [r0, #0]
 8006c8e:	2b30      	cmp	r3, #48	@ 0x30
 8006c90:	d10a      	bne.n	8006ca8 <__cvt+0xb8>
 8006c92:	2200      	movs	r2, #0
 8006c94:	2300      	movs	r3, #0
 8006c96:	4620      	mov	r0, r4
 8006c98:	4629      	mov	r1, r5
 8006c9a:	f7f9 fe85 	bl	80009a8 <__aeabi_dcmpeq>
 8006c9e:	b918      	cbnz	r0, 8006ca8 <__cvt+0xb8>
 8006ca0:	f1c6 0601 	rsb	r6, r6, #1
 8006ca4:	f8ca 6000 	str.w	r6, [sl]
 8006ca8:	f8da 3000 	ldr.w	r3, [sl]
 8006cac:	4499      	add	r9, r3
 8006cae:	e7d3      	b.n	8006c58 <__cvt+0x68>
 8006cb0:	1c59      	adds	r1, r3, #1
 8006cb2:	9107      	str	r1, [sp, #28]
 8006cb4:	701a      	strb	r2, [r3, #0]
 8006cb6:	e7d9      	b.n	8006c6c <__cvt+0x7c>

08006cb8 <__exponent>:
 8006cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cba:	2900      	cmp	r1, #0
 8006cbc:	bfb6      	itet	lt
 8006cbe:	232d      	movlt	r3, #45	@ 0x2d
 8006cc0:	232b      	movge	r3, #43	@ 0x2b
 8006cc2:	4249      	neglt	r1, r1
 8006cc4:	2909      	cmp	r1, #9
 8006cc6:	7002      	strb	r2, [r0, #0]
 8006cc8:	7043      	strb	r3, [r0, #1]
 8006cca:	dd29      	ble.n	8006d20 <__exponent+0x68>
 8006ccc:	f10d 0307 	add.w	r3, sp, #7
 8006cd0:	461d      	mov	r5, r3
 8006cd2:	270a      	movs	r7, #10
 8006cd4:	fbb1 f6f7 	udiv	r6, r1, r7
 8006cd8:	461a      	mov	r2, r3
 8006cda:	fb07 1416 	mls	r4, r7, r6, r1
 8006cde:	3430      	adds	r4, #48	@ 0x30
 8006ce0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006ce4:	460c      	mov	r4, r1
 8006ce6:	2c63      	cmp	r4, #99	@ 0x63
 8006ce8:	4631      	mov	r1, r6
 8006cea:	f103 33ff 	add.w	r3, r3, #4294967295
 8006cee:	dcf1      	bgt.n	8006cd4 <__exponent+0x1c>
 8006cf0:	3130      	adds	r1, #48	@ 0x30
 8006cf2:	1e94      	subs	r4, r2, #2
 8006cf4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006cf8:	4623      	mov	r3, r4
 8006cfa:	1c41      	adds	r1, r0, #1
 8006cfc:	42ab      	cmp	r3, r5
 8006cfe:	d30a      	bcc.n	8006d16 <__exponent+0x5e>
 8006d00:	f10d 0309 	add.w	r3, sp, #9
 8006d04:	1a9b      	subs	r3, r3, r2
 8006d06:	42ac      	cmp	r4, r5
 8006d08:	bf88      	it	hi
 8006d0a:	2300      	movhi	r3, #0
 8006d0c:	3302      	adds	r3, #2
 8006d0e:	4403      	add	r3, r0
 8006d10:	1a18      	subs	r0, r3, r0
 8006d12:	b003      	add	sp, #12
 8006d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d16:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006d1a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006d1e:	e7ed      	b.n	8006cfc <__exponent+0x44>
 8006d20:	2330      	movs	r3, #48	@ 0x30
 8006d22:	3130      	adds	r1, #48	@ 0x30
 8006d24:	7083      	strb	r3, [r0, #2]
 8006d26:	70c1      	strb	r1, [r0, #3]
 8006d28:	1d03      	adds	r3, r0, #4
 8006d2a:	e7f1      	b.n	8006d10 <__exponent+0x58>

08006d2c <_printf_float>:
 8006d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d30:	b091      	sub	sp, #68	@ 0x44
 8006d32:	460c      	mov	r4, r1
 8006d34:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006d38:	4616      	mov	r6, r2
 8006d3a:	461f      	mov	r7, r3
 8006d3c:	4605      	mov	r5, r0
 8006d3e:	f000 ff03 	bl	8007b48 <_localeconv_r>
 8006d42:	6803      	ldr	r3, [r0, #0]
 8006d44:	4618      	mov	r0, r3
 8006d46:	9308      	str	r3, [sp, #32]
 8006d48:	f7f9 fa02 	bl	8000150 <strlen>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	930e      	str	r3, [sp, #56]	@ 0x38
 8006d50:	f8d8 3000 	ldr.w	r3, [r8]
 8006d54:	9009      	str	r0, [sp, #36]	@ 0x24
 8006d56:	3307      	adds	r3, #7
 8006d58:	f023 0307 	bic.w	r3, r3, #7
 8006d5c:	f103 0208 	add.w	r2, r3, #8
 8006d60:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006d64:	f8d4 b000 	ldr.w	fp, [r4]
 8006d68:	f8c8 2000 	str.w	r2, [r8]
 8006d6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d70:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006d74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d76:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d82:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006d86:	4b9c      	ldr	r3, [pc, #624]	@ (8006ff8 <_printf_float+0x2cc>)
 8006d88:	f7f9 fe40 	bl	8000a0c <__aeabi_dcmpun>
 8006d8c:	bb70      	cbnz	r0, 8006dec <_printf_float+0xc0>
 8006d8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d92:	f04f 32ff 	mov.w	r2, #4294967295
 8006d96:	4b98      	ldr	r3, [pc, #608]	@ (8006ff8 <_printf_float+0x2cc>)
 8006d98:	f7f9 fe1a 	bl	80009d0 <__aeabi_dcmple>
 8006d9c:	bb30      	cbnz	r0, 8006dec <_printf_float+0xc0>
 8006d9e:	2200      	movs	r2, #0
 8006da0:	2300      	movs	r3, #0
 8006da2:	4640      	mov	r0, r8
 8006da4:	4649      	mov	r1, r9
 8006da6:	f7f9 fe09 	bl	80009bc <__aeabi_dcmplt>
 8006daa:	b110      	cbz	r0, 8006db2 <_printf_float+0x86>
 8006dac:	232d      	movs	r3, #45	@ 0x2d
 8006dae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006db2:	4a92      	ldr	r2, [pc, #584]	@ (8006ffc <_printf_float+0x2d0>)
 8006db4:	4b92      	ldr	r3, [pc, #584]	@ (8007000 <_printf_float+0x2d4>)
 8006db6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006dba:	bf94      	ite	ls
 8006dbc:	4690      	movls	r8, r2
 8006dbe:	4698      	movhi	r8, r3
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	f04f 0900 	mov.w	r9, #0
 8006dc6:	6123      	str	r3, [r4, #16]
 8006dc8:	f02b 0304 	bic.w	r3, fp, #4
 8006dcc:	6023      	str	r3, [r4, #0]
 8006dce:	4633      	mov	r3, r6
 8006dd0:	4621      	mov	r1, r4
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	9700      	str	r7, [sp, #0]
 8006dd6:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006dd8:	f000 f9d4 	bl	8007184 <_printf_common>
 8006ddc:	3001      	adds	r0, #1
 8006dde:	f040 8090 	bne.w	8006f02 <_printf_float+0x1d6>
 8006de2:	f04f 30ff 	mov.w	r0, #4294967295
 8006de6:	b011      	add	sp, #68	@ 0x44
 8006de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dec:	4642      	mov	r2, r8
 8006dee:	464b      	mov	r3, r9
 8006df0:	4640      	mov	r0, r8
 8006df2:	4649      	mov	r1, r9
 8006df4:	f7f9 fe0a 	bl	8000a0c <__aeabi_dcmpun>
 8006df8:	b148      	cbz	r0, 8006e0e <_printf_float+0xe2>
 8006dfa:	464b      	mov	r3, r9
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	bfb8      	it	lt
 8006e00:	232d      	movlt	r3, #45	@ 0x2d
 8006e02:	4a80      	ldr	r2, [pc, #512]	@ (8007004 <_printf_float+0x2d8>)
 8006e04:	bfb8      	it	lt
 8006e06:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006e0a:	4b7f      	ldr	r3, [pc, #508]	@ (8007008 <_printf_float+0x2dc>)
 8006e0c:	e7d3      	b.n	8006db6 <_printf_float+0x8a>
 8006e0e:	6863      	ldr	r3, [r4, #4]
 8006e10:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006e14:	1c5a      	adds	r2, r3, #1
 8006e16:	d13f      	bne.n	8006e98 <_printf_float+0x16c>
 8006e18:	2306      	movs	r3, #6
 8006e1a:	6063      	str	r3, [r4, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006e22:	6023      	str	r3, [r4, #0]
 8006e24:	9206      	str	r2, [sp, #24]
 8006e26:	aa0e      	add	r2, sp, #56	@ 0x38
 8006e28:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006e2c:	aa0d      	add	r2, sp, #52	@ 0x34
 8006e2e:	9203      	str	r2, [sp, #12]
 8006e30:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006e34:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006e38:	6863      	ldr	r3, [r4, #4]
 8006e3a:	4642      	mov	r2, r8
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	4628      	mov	r0, r5
 8006e40:	464b      	mov	r3, r9
 8006e42:	910a      	str	r1, [sp, #40]	@ 0x28
 8006e44:	f7ff fed4 	bl	8006bf0 <__cvt>
 8006e48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e4a:	4680      	mov	r8, r0
 8006e4c:	2947      	cmp	r1, #71	@ 0x47
 8006e4e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006e50:	d128      	bne.n	8006ea4 <_printf_float+0x178>
 8006e52:	1cc8      	adds	r0, r1, #3
 8006e54:	db02      	blt.n	8006e5c <_printf_float+0x130>
 8006e56:	6863      	ldr	r3, [r4, #4]
 8006e58:	4299      	cmp	r1, r3
 8006e5a:	dd40      	ble.n	8006ede <_printf_float+0x1b2>
 8006e5c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006e60:	fa5f fa8a 	uxtb.w	sl, sl
 8006e64:	4652      	mov	r2, sl
 8006e66:	3901      	subs	r1, #1
 8006e68:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006e6c:	910d      	str	r1, [sp, #52]	@ 0x34
 8006e6e:	f7ff ff23 	bl	8006cb8 <__exponent>
 8006e72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e74:	4681      	mov	r9, r0
 8006e76:	1813      	adds	r3, r2, r0
 8006e78:	2a01      	cmp	r2, #1
 8006e7a:	6123      	str	r3, [r4, #16]
 8006e7c:	dc02      	bgt.n	8006e84 <_printf_float+0x158>
 8006e7e:	6822      	ldr	r2, [r4, #0]
 8006e80:	07d2      	lsls	r2, r2, #31
 8006e82:	d501      	bpl.n	8006e88 <_printf_float+0x15c>
 8006e84:	3301      	adds	r3, #1
 8006e86:	6123      	str	r3, [r4, #16]
 8006e88:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d09e      	beq.n	8006dce <_printf_float+0xa2>
 8006e90:	232d      	movs	r3, #45	@ 0x2d
 8006e92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e96:	e79a      	b.n	8006dce <_printf_float+0xa2>
 8006e98:	2947      	cmp	r1, #71	@ 0x47
 8006e9a:	d1bf      	bne.n	8006e1c <_printf_float+0xf0>
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1bd      	bne.n	8006e1c <_printf_float+0xf0>
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e7ba      	b.n	8006e1a <_printf_float+0xee>
 8006ea4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006ea8:	d9dc      	bls.n	8006e64 <_printf_float+0x138>
 8006eaa:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006eae:	d118      	bne.n	8006ee2 <_printf_float+0x1b6>
 8006eb0:	2900      	cmp	r1, #0
 8006eb2:	6863      	ldr	r3, [r4, #4]
 8006eb4:	dd0b      	ble.n	8006ece <_printf_float+0x1a2>
 8006eb6:	6121      	str	r1, [r4, #16]
 8006eb8:	b913      	cbnz	r3, 8006ec0 <_printf_float+0x194>
 8006eba:	6822      	ldr	r2, [r4, #0]
 8006ebc:	07d0      	lsls	r0, r2, #31
 8006ebe:	d502      	bpl.n	8006ec6 <_printf_float+0x19a>
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	440b      	add	r3, r1
 8006ec4:	6123      	str	r3, [r4, #16]
 8006ec6:	f04f 0900 	mov.w	r9, #0
 8006eca:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006ecc:	e7dc      	b.n	8006e88 <_printf_float+0x15c>
 8006ece:	b913      	cbnz	r3, 8006ed6 <_printf_float+0x1aa>
 8006ed0:	6822      	ldr	r2, [r4, #0]
 8006ed2:	07d2      	lsls	r2, r2, #31
 8006ed4:	d501      	bpl.n	8006eda <_printf_float+0x1ae>
 8006ed6:	3302      	adds	r3, #2
 8006ed8:	e7f4      	b.n	8006ec4 <_printf_float+0x198>
 8006eda:	2301      	movs	r3, #1
 8006edc:	e7f2      	b.n	8006ec4 <_printf_float+0x198>
 8006ede:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006ee2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ee4:	4299      	cmp	r1, r3
 8006ee6:	db05      	blt.n	8006ef4 <_printf_float+0x1c8>
 8006ee8:	6823      	ldr	r3, [r4, #0]
 8006eea:	6121      	str	r1, [r4, #16]
 8006eec:	07d8      	lsls	r0, r3, #31
 8006eee:	d5ea      	bpl.n	8006ec6 <_printf_float+0x19a>
 8006ef0:	1c4b      	adds	r3, r1, #1
 8006ef2:	e7e7      	b.n	8006ec4 <_printf_float+0x198>
 8006ef4:	2900      	cmp	r1, #0
 8006ef6:	bfcc      	ite	gt
 8006ef8:	2201      	movgt	r2, #1
 8006efa:	f1c1 0202 	rsble	r2, r1, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	e7e0      	b.n	8006ec4 <_printf_float+0x198>
 8006f02:	6823      	ldr	r3, [r4, #0]
 8006f04:	055a      	lsls	r2, r3, #21
 8006f06:	d407      	bmi.n	8006f18 <_printf_float+0x1ec>
 8006f08:	6923      	ldr	r3, [r4, #16]
 8006f0a:	4642      	mov	r2, r8
 8006f0c:	4631      	mov	r1, r6
 8006f0e:	4628      	mov	r0, r5
 8006f10:	47b8      	blx	r7
 8006f12:	3001      	adds	r0, #1
 8006f14:	d12b      	bne.n	8006f6e <_printf_float+0x242>
 8006f16:	e764      	b.n	8006de2 <_printf_float+0xb6>
 8006f18:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006f1c:	f240 80dc 	bls.w	80070d8 <_printf_float+0x3ac>
 8006f20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f24:	2200      	movs	r2, #0
 8006f26:	2300      	movs	r3, #0
 8006f28:	f7f9 fd3e 	bl	80009a8 <__aeabi_dcmpeq>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	d033      	beq.n	8006f98 <_printf_float+0x26c>
 8006f30:	2301      	movs	r3, #1
 8006f32:	4631      	mov	r1, r6
 8006f34:	4628      	mov	r0, r5
 8006f36:	4a35      	ldr	r2, [pc, #212]	@ (800700c <_printf_float+0x2e0>)
 8006f38:	47b8      	blx	r7
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	f43f af51 	beq.w	8006de2 <_printf_float+0xb6>
 8006f40:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006f44:	4543      	cmp	r3, r8
 8006f46:	db02      	blt.n	8006f4e <_printf_float+0x222>
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	07d8      	lsls	r0, r3, #31
 8006f4c:	d50f      	bpl.n	8006f6e <_printf_float+0x242>
 8006f4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006f52:	4631      	mov	r1, r6
 8006f54:	4628      	mov	r0, r5
 8006f56:	47b8      	blx	r7
 8006f58:	3001      	adds	r0, #1
 8006f5a:	f43f af42 	beq.w	8006de2 <_printf_float+0xb6>
 8006f5e:	f04f 0900 	mov.w	r9, #0
 8006f62:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f66:	f104 0a1a 	add.w	sl, r4, #26
 8006f6a:	45c8      	cmp	r8, r9
 8006f6c:	dc09      	bgt.n	8006f82 <_printf_float+0x256>
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	079b      	lsls	r3, r3, #30
 8006f72:	f100 8102 	bmi.w	800717a <_printf_float+0x44e>
 8006f76:	68e0      	ldr	r0, [r4, #12]
 8006f78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f7a:	4298      	cmp	r0, r3
 8006f7c:	bfb8      	it	lt
 8006f7e:	4618      	movlt	r0, r3
 8006f80:	e731      	b.n	8006de6 <_printf_float+0xba>
 8006f82:	2301      	movs	r3, #1
 8006f84:	4652      	mov	r2, sl
 8006f86:	4631      	mov	r1, r6
 8006f88:	4628      	mov	r0, r5
 8006f8a:	47b8      	blx	r7
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	f43f af28 	beq.w	8006de2 <_printf_float+0xb6>
 8006f92:	f109 0901 	add.w	r9, r9, #1
 8006f96:	e7e8      	b.n	8006f6a <_printf_float+0x23e>
 8006f98:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	dc38      	bgt.n	8007010 <_printf_float+0x2e4>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	4631      	mov	r1, r6
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	4a19      	ldr	r2, [pc, #100]	@ (800700c <_printf_float+0x2e0>)
 8006fa6:	47b8      	blx	r7
 8006fa8:	3001      	adds	r0, #1
 8006faa:	f43f af1a 	beq.w	8006de2 <_printf_float+0xb6>
 8006fae:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006fb2:	ea59 0303 	orrs.w	r3, r9, r3
 8006fb6:	d102      	bne.n	8006fbe <_printf_float+0x292>
 8006fb8:	6823      	ldr	r3, [r4, #0]
 8006fba:	07d9      	lsls	r1, r3, #31
 8006fbc:	d5d7      	bpl.n	8006f6e <_printf_float+0x242>
 8006fbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006fc2:	4631      	mov	r1, r6
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	47b8      	blx	r7
 8006fc8:	3001      	adds	r0, #1
 8006fca:	f43f af0a 	beq.w	8006de2 <_printf_float+0xb6>
 8006fce:	f04f 0a00 	mov.w	sl, #0
 8006fd2:	f104 0b1a 	add.w	fp, r4, #26
 8006fd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fd8:	425b      	negs	r3, r3
 8006fda:	4553      	cmp	r3, sl
 8006fdc:	dc01      	bgt.n	8006fe2 <_printf_float+0x2b6>
 8006fde:	464b      	mov	r3, r9
 8006fe0:	e793      	b.n	8006f0a <_printf_float+0x1de>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	465a      	mov	r2, fp
 8006fe6:	4631      	mov	r1, r6
 8006fe8:	4628      	mov	r0, r5
 8006fea:	47b8      	blx	r7
 8006fec:	3001      	adds	r0, #1
 8006fee:	f43f aef8 	beq.w	8006de2 <_printf_float+0xb6>
 8006ff2:	f10a 0a01 	add.w	sl, sl, #1
 8006ff6:	e7ee      	b.n	8006fd6 <_printf_float+0x2aa>
 8006ff8:	7fefffff 	.word	0x7fefffff
 8006ffc:	0800ca99 	.word	0x0800ca99
 8007000:	0800ca9d 	.word	0x0800ca9d
 8007004:	0800caa1 	.word	0x0800caa1
 8007008:	0800caa5 	.word	0x0800caa5
 800700c:	0800caa9 	.word	0x0800caa9
 8007010:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007012:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007016:	4553      	cmp	r3, sl
 8007018:	bfa8      	it	ge
 800701a:	4653      	movge	r3, sl
 800701c:	2b00      	cmp	r3, #0
 800701e:	4699      	mov	r9, r3
 8007020:	dc36      	bgt.n	8007090 <_printf_float+0x364>
 8007022:	f04f 0b00 	mov.w	fp, #0
 8007026:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800702a:	f104 021a 	add.w	r2, r4, #26
 800702e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007030:	930a      	str	r3, [sp, #40]	@ 0x28
 8007032:	eba3 0309 	sub.w	r3, r3, r9
 8007036:	455b      	cmp	r3, fp
 8007038:	dc31      	bgt.n	800709e <_printf_float+0x372>
 800703a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800703c:	459a      	cmp	sl, r3
 800703e:	dc3a      	bgt.n	80070b6 <_printf_float+0x38a>
 8007040:	6823      	ldr	r3, [r4, #0]
 8007042:	07da      	lsls	r2, r3, #31
 8007044:	d437      	bmi.n	80070b6 <_printf_float+0x38a>
 8007046:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007048:	ebaa 0903 	sub.w	r9, sl, r3
 800704c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800704e:	ebaa 0303 	sub.w	r3, sl, r3
 8007052:	4599      	cmp	r9, r3
 8007054:	bfa8      	it	ge
 8007056:	4699      	movge	r9, r3
 8007058:	f1b9 0f00 	cmp.w	r9, #0
 800705c:	dc33      	bgt.n	80070c6 <_printf_float+0x39a>
 800705e:	f04f 0800 	mov.w	r8, #0
 8007062:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007066:	f104 0b1a 	add.w	fp, r4, #26
 800706a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800706c:	ebaa 0303 	sub.w	r3, sl, r3
 8007070:	eba3 0309 	sub.w	r3, r3, r9
 8007074:	4543      	cmp	r3, r8
 8007076:	f77f af7a 	ble.w	8006f6e <_printf_float+0x242>
 800707a:	2301      	movs	r3, #1
 800707c:	465a      	mov	r2, fp
 800707e:	4631      	mov	r1, r6
 8007080:	4628      	mov	r0, r5
 8007082:	47b8      	blx	r7
 8007084:	3001      	adds	r0, #1
 8007086:	f43f aeac 	beq.w	8006de2 <_printf_float+0xb6>
 800708a:	f108 0801 	add.w	r8, r8, #1
 800708e:	e7ec      	b.n	800706a <_printf_float+0x33e>
 8007090:	4642      	mov	r2, r8
 8007092:	4631      	mov	r1, r6
 8007094:	4628      	mov	r0, r5
 8007096:	47b8      	blx	r7
 8007098:	3001      	adds	r0, #1
 800709a:	d1c2      	bne.n	8007022 <_printf_float+0x2f6>
 800709c:	e6a1      	b.n	8006de2 <_printf_float+0xb6>
 800709e:	2301      	movs	r3, #1
 80070a0:	4631      	mov	r1, r6
 80070a2:	4628      	mov	r0, r5
 80070a4:	920a      	str	r2, [sp, #40]	@ 0x28
 80070a6:	47b8      	blx	r7
 80070a8:	3001      	adds	r0, #1
 80070aa:	f43f ae9a 	beq.w	8006de2 <_printf_float+0xb6>
 80070ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070b0:	f10b 0b01 	add.w	fp, fp, #1
 80070b4:	e7bb      	b.n	800702e <_printf_float+0x302>
 80070b6:	4631      	mov	r1, r6
 80070b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80070bc:	4628      	mov	r0, r5
 80070be:	47b8      	blx	r7
 80070c0:	3001      	adds	r0, #1
 80070c2:	d1c0      	bne.n	8007046 <_printf_float+0x31a>
 80070c4:	e68d      	b.n	8006de2 <_printf_float+0xb6>
 80070c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070c8:	464b      	mov	r3, r9
 80070ca:	4631      	mov	r1, r6
 80070cc:	4628      	mov	r0, r5
 80070ce:	4442      	add	r2, r8
 80070d0:	47b8      	blx	r7
 80070d2:	3001      	adds	r0, #1
 80070d4:	d1c3      	bne.n	800705e <_printf_float+0x332>
 80070d6:	e684      	b.n	8006de2 <_printf_float+0xb6>
 80070d8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80070dc:	f1ba 0f01 	cmp.w	sl, #1
 80070e0:	dc01      	bgt.n	80070e6 <_printf_float+0x3ba>
 80070e2:	07db      	lsls	r3, r3, #31
 80070e4:	d536      	bpl.n	8007154 <_printf_float+0x428>
 80070e6:	2301      	movs	r3, #1
 80070e8:	4642      	mov	r2, r8
 80070ea:	4631      	mov	r1, r6
 80070ec:	4628      	mov	r0, r5
 80070ee:	47b8      	blx	r7
 80070f0:	3001      	adds	r0, #1
 80070f2:	f43f ae76 	beq.w	8006de2 <_printf_float+0xb6>
 80070f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80070fa:	4631      	mov	r1, r6
 80070fc:	4628      	mov	r0, r5
 80070fe:	47b8      	blx	r7
 8007100:	3001      	adds	r0, #1
 8007102:	f43f ae6e 	beq.w	8006de2 <_printf_float+0xb6>
 8007106:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800710a:	2200      	movs	r2, #0
 800710c:	2300      	movs	r3, #0
 800710e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007112:	f7f9 fc49 	bl	80009a8 <__aeabi_dcmpeq>
 8007116:	b9c0      	cbnz	r0, 800714a <_printf_float+0x41e>
 8007118:	4653      	mov	r3, sl
 800711a:	f108 0201 	add.w	r2, r8, #1
 800711e:	4631      	mov	r1, r6
 8007120:	4628      	mov	r0, r5
 8007122:	47b8      	blx	r7
 8007124:	3001      	adds	r0, #1
 8007126:	d10c      	bne.n	8007142 <_printf_float+0x416>
 8007128:	e65b      	b.n	8006de2 <_printf_float+0xb6>
 800712a:	2301      	movs	r3, #1
 800712c:	465a      	mov	r2, fp
 800712e:	4631      	mov	r1, r6
 8007130:	4628      	mov	r0, r5
 8007132:	47b8      	blx	r7
 8007134:	3001      	adds	r0, #1
 8007136:	f43f ae54 	beq.w	8006de2 <_printf_float+0xb6>
 800713a:	f108 0801 	add.w	r8, r8, #1
 800713e:	45d0      	cmp	r8, sl
 8007140:	dbf3      	blt.n	800712a <_printf_float+0x3fe>
 8007142:	464b      	mov	r3, r9
 8007144:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007148:	e6e0      	b.n	8006f0c <_printf_float+0x1e0>
 800714a:	f04f 0800 	mov.w	r8, #0
 800714e:	f104 0b1a 	add.w	fp, r4, #26
 8007152:	e7f4      	b.n	800713e <_printf_float+0x412>
 8007154:	2301      	movs	r3, #1
 8007156:	4642      	mov	r2, r8
 8007158:	e7e1      	b.n	800711e <_printf_float+0x3f2>
 800715a:	2301      	movs	r3, #1
 800715c:	464a      	mov	r2, r9
 800715e:	4631      	mov	r1, r6
 8007160:	4628      	mov	r0, r5
 8007162:	47b8      	blx	r7
 8007164:	3001      	adds	r0, #1
 8007166:	f43f ae3c 	beq.w	8006de2 <_printf_float+0xb6>
 800716a:	f108 0801 	add.w	r8, r8, #1
 800716e:	68e3      	ldr	r3, [r4, #12]
 8007170:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007172:	1a5b      	subs	r3, r3, r1
 8007174:	4543      	cmp	r3, r8
 8007176:	dcf0      	bgt.n	800715a <_printf_float+0x42e>
 8007178:	e6fd      	b.n	8006f76 <_printf_float+0x24a>
 800717a:	f04f 0800 	mov.w	r8, #0
 800717e:	f104 0919 	add.w	r9, r4, #25
 8007182:	e7f4      	b.n	800716e <_printf_float+0x442>

08007184 <_printf_common>:
 8007184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007188:	4616      	mov	r6, r2
 800718a:	4698      	mov	r8, r3
 800718c:	688a      	ldr	r2, [r1, #8]
 800718e:	690b      	ldr	r3, [r1, #16]
 8007190:	4607      	mov	r7, r0
 8007192:	4293      	cmp	r3, r2
 8007194:	bfb8      	it	lt
 8007196:	4613      	movlt	r3, r2
 8007198:	6033      	str	r3, [r6, #0]
 800719a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800719e:	460c      	mov	r4, r1
 80071a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071a4:	b10a      	cbz	r2, 80071aa <_printf_common+0x26>
 80071a6:	3301      	adds	r3, #1
 80071a8:	6033      	str	r3, [r6, #0]
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	0699      	lsls	r1, r3, #26
 80071ae:	bf42      	ittt	mi
 80071b0:	6833      	ldrmi	r3, [r6, #0]
 80071b2:	3302      	addmi	r3, #2
 80071b4:	6033      	strmi	r3, [r6, #0]
 80071b6:	6825      	ldr	r5, [r4, #0]
 80071b8:	f015 0506 	ands.w	r5, r5, #6
 80071bc:	d106      	bne.n	80071cc <_printf_common+0x48>
 80071be:	f104 0a19 	add.w	sl, r4, #25
 80071c2:	68e3      	ldr	r3, [r4, #12]
 80071c4:	6832      	ldr	r2, [r6, #0]
 80071c6:	1a9b      	subs	r3, r3, r2
 80071c8:	42ab      	cmp	r3, r5
 80071ca:	dc2b      	bgt.n	8007224 <_printf_common+0xa0>
 80071cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80071d0:	6822      	ldr	r2, [r4, #0]
 80071d2:	3b00      	subs	r3, #0
 80071d4:	bf18      	it	ne
 80071d6:	2301      	movne	r3, #1
 80071d8:	0692      	lsls	r2, r2, #26
 80071da:	d430      	bmi.n	800723e <_printf_common+0xba>
 80071dc:	4641      	mov	r1, r8
 80071de:	4638      	mov	r0, r7
 80071e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80071e4:	47c8      	blx	r9
 80071e6:	3001      	adds	r0, #1
 80071e8:	d023      	beq.n	8007232 <_printf_common+0xae>
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	6922      	ldr	r2, [r4, #16]
 80071ee:	f003 0306 	and.w	r3, r3, #6
 80071f2:	2b04      	cmp	r3, #4
 80071f4:	bf14      	ite	ne
 80071f6:	2500      	movne	r5, #0
 80071f8:	6833      	ldreq	r3, [r6, #0]
 80071fa:	f04f 0600 	mov.w	r6, #0
 80071fe:	bf08      	it	eq
 8007200:	68e5      	ldreq	r5, [r4, #12]
 8007202:	f104 041a 	add.w	r4, r4, #26
 8007206:	bf08      	it	eq
 8007208:	1aed      	subeq	r5, r5, r3
 800720a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800720e:	bf08      	it	eq
 8007210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007214:	4293      	cmp	r3, r2
 8007216:	bfc4      	itt	gt
 8007218:	1a9b      	subgt	r3, r3, r2
 800721a:	18ed      	addgt	r5, r5, r3
 800721c:	42b5      	cmp	r5, r6
 800721e:	d11a      	bne.n	8007256 <_printf_common+0xd2>
 8007220:	2000      	movs	r0, #0
 8007222:	e008      	b.n	8007236 <_printf_common+0xb2>
 8007224:	2301      	movs	r3, #1
 8007226:	4652      	mov	r2, sl
 8007228:	4641      	mov	r1, r8
 800722a:	4638      	mov	r0, r7
 800722c:	47c8      	blx	r9
 800722e:	3001      	adds	r0, #1
 8007230:	d103      	bne.n	800723a <_printf_common+0xb6>
 8007232:	f04f 30ff 	mov.w	r0, #4294967295
 8007236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800723a:	3501      	adds	r5, #1
 800723c:	e7c1      	b.n	80071c2 <_printf_common+0x3e>
 800723e:	2030      	movs	r0, #48	@ 0x30
 8007240:	18e1      	adds	r1, r4, r3
 8007242:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800724c:	4422      	add	r2, r4
 800724e:	3302      	adds	r3, #2
 8007250:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007254:	e7c2      	b.n	80071dc <_printf_common+0x58>
 8007256:	2301      	movs	r3, #1
 8007258:	4622      	mov	r2, r4
 800725a:	4641      	mov	r1, r8
 800725c:	4638      	mov	r0, r7
 800725e:	47c8      	blx	r9
 8007260:	3001      	adds	r0, #1
 8007262:	d0e6      	beq.n	8007232 <_printf_common+0xae>
 8007264:	3601      	adds	r6, #1
 8007266:	e7d9      	b.n	800721c <_printf_common+0x98>

08007268 <_printf_i>:
 8007268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800726c:	7e0f      	ldrb	r7, [r1, #24]
 800726e:	4691      	mov	r9, r2
 8007270:	2f78      	cmp	r7, #120	@ 0x78
 8007272:	4680      	mov	r8, r0
 8007274:	460c      	mov	r4, r1
 8007276:	469a      	mov	sl, r3
 8007278:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800727a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800727e:	d807      	bhi.n	8007290 <_printf_i+0x28>
 8007280:	2f62      	cmp	r7, #98	@ 0x62
 8007282:	d80a      	bhi.n	800729a <_printf_i+0x32>
 8007284:	2f00      	cmp	r7, #0
 8007286:	f000 80d3 	beq.w	8007430 <_printf_i+0x1c8>
 800728a:	2f58      	cmp	r7, #88	@ 0x58
 800728c:	f000 80ba 	beq.w	8007404 <_printf_i+0x19c>
 8007290:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007294:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007298:	e03a      	b.n	8007310 <_printf_i+0xa8>
 800729a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800729e:	2b15      	cmp	r3, #21
 80072a0:	d8f6      	bhi.n	8007290 <_printf_i+0x28>
 80072a2:	a101      	add	r1, pc, #4	@ (adr r1, 80072a8 <_printf_i+0x40>)
 80072a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072a8:	08007301 	.word	0x08007301
 80072ac:	08007315 	.word	0x08007315
 80072b0:	08007291 	.word	0x08007291
 80072b4:	08007291 	.word	0x08007291
 80072b8:	08007291 	.word	0x08007291
 80072bc:	08007291 	.word	0x08007291
 80072c0:	08007315 	.word	0x08007315
 80072c4:	08007291 	.word	0x08007291
 80072c8:	08007291 	.word	0x08007291
 80072cc:	08007291 	.word	0x08007291
 80072d0:	08007291 	.word	0x08007291
 80072d4:	08007417 	.word	0x08007417
 80072d8:	0800733f 	.word	0x0800733f
 80072dc:	080073d1 	.word	0x080073d1
 80072e0:	08007291 	.word	0x08007291
 80072e4:	08007291 	.word	0x08007291
 80072e8:	08007439 	.word	0x08007439
 80072ec:	08007291 	.word	0x08007291
 80072f0:	0800733f 	.word	0x0800733f
 80072f4:	08007291 	.word	0x08007291
 80072f8:	08007291 	.word	0x08007291
 80072fc:	080073d9 	.word	0x080073d9
 8007300:	6833      	ldr	r3, [r6, #0]
 8007302:	1d1a      	adds	r2, r3, #4
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	6032      	str	r2, [r6, #0]
 8007308:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800730c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007310:	2301      	movs	r3, #1
 8007312:	e09e      	b.n	8007452 <_printf_i+0x1ea>
 8007314:	6833      	ldr	r3, [r6, #0]
 8007316:	6820      	ldr	r0, [r4, #0]
 8007318:	1d19      	adds	r1, r3, #4
 800731a:	6031      	str	r1, [r6, #0]
 800731c:	0606      	lsls	r6, r0, #24
 800731e:	d501      	bpl.n	8007324 <_printf_i+0xbc>
 8007320:	681d      	ldr	r5, [r3, #0]
 8007322:	e003      	b.n	800732c <_printf_i+0xc4>
 8007324:	0645      	lsls	r5, r0, #25
 8007326:	d5fb      	bpl.n	8007320 <_printf_i+0xb8>
 8007328:	f9b3 5000 	ldrsh.w	r5, [r3]
 800732c:	2d00      	cmp	r5, #0
 800732e:	da03      	bge.n	8007338 <_printf_i+0xd0>
 8007330:	232d      	movs	r3, #45	@ 0x2d
 8007332:	426d      	negs	r5, r5
 8007334:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007338:	230a      	movs	r3, #10
 800733a:	4859      	ldr	r0, [pc, #356]	@ (80074a0 <_printf_i+0x238>)
 800733c:	e011      	b.n	8007362 <_printf_i+0xfa>
 800733e:	6821      	ldr	r1, [r4, #0]
 8007340:	6833      	ldr	r3, [r6, #0]
 8007342:	0608      	lsls	r0, r1, #24
 8007344:	f853 5b04 	ldr.w	r5, [r3], #4
 8007348:	d402      	bmi.n	8007350 <_printf_i+0xe8>
 800734a:	0649      	lsls	r1, r1, #25
 800734c:	bf48      	it	mi
 800734e:	b2ad      	uxthmi	r5, r5
 8007350:	2f6f      	cmp	r7, #111	@ 0x6f
 8007352:	6033      	str	r3, [r6, #0]
 8007354:	bf14      	ite	ne
 8007356:	230a      	movne	r3, #10
 8007358:	2308      	moveq	r3, #8
 800735a:	4851      	ldr	r0, [pc, #324]	@ (80074a0 <_printf_i+0x238>)
 800735c:	2100      	movs	r1, #0
 800735e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007362:	6866      	ldr	r6, [r4, #4]
 8007364:	2e00      	cmp	r6, #0
 8007366:	bfa8      	it	ge
 8007368:	6821      	ldrge	r1, [r4, #0]
 800736a:	60a6      	str	r6, [r4, #8]
 800736c:	bfa4      	itt	ge
 800736e:	f021 0104 	bicge.w	r1, r1, #4
 8007372:	6021      	strge	r1, [r4, #0]
 8007374:	b90d      	cbnz	r5, 800737a <_printf_i+0x112>
 8007376:	2e00      	cmp	r6, #0
 8007378:	d04b      	beq.n	8007412 <_printf_i+0x1aa>
 800737a:	4616      	mov	r6, r2
 800737c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007380:	fb03 5711 	mls	r7, r3, r1, r5
 8007384:	5dc7      	ldrb	r7, [r0, r7]
 8007386:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800738a:	462f      	mov	r7, r5
 800738c:	42bb      	cmp	r3, r7
 800738e:	460d      	mov	r5, r1
 8007390:	d9f4      	bls.n	800737c <_printf_i+0x114>
 8007392:	2b08      	cmp	r3, #8
 8007394:	d10b      	bne.n	80073ae <_printf_i+0x146>
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	07df      	lsls	r7, r3, #31
 800739a:	d508      	bpl.n	80073ae <_printf_i+0x146>
 800739c:	6923      	ldr	r3, [r4, #16]
 800739e:	6861      	ldr	r1, [r4, #4]
 80073a0:	4299      	cmp	r1, r3
 80073a2:	bfde      	ittt	le
 80073a4:	2330      	movle	r3, #48	@ 0x30
 80073a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80073ae:	1b92      	subs	r2, r2, r6
 80073b0:	6122      	str	r2, [r4, #16]
 80073b2:	464b      	mov	r3, r9
 80073b4:	4621      	mov	r1, r4
 80073b6:	4640      	mov	r0, r8
 80073b8:	f8cd a000 	str.w	sl, [sp]
 80073bc:	aa03      	add	r2, sp, #12
 80073be:	f7ff fee1 	bl	8007184 <_printf_common>
 80073c2:	3001      	adds	r0, #1
 80073c4:	d14a      	bne.n	800745c <_printf_i+0x1f4>
 80073c6:	f04f 30ff 	mov.w	r0, #4294967295
 80073ca:	b004      	add	sp, #16
 80073cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d0:	6823      	ldr	r3, [r4, #0]
 80073d2:	f043 0320 	orr.w	r3, r3, #32
 80073d6:	6023      	str	r3, [r4, #0]
 80073d8:	2778      	movs	r7, #120	@ 0x78
 80073da:	4832      	ldr	r0, [pc, #200]	@ (80074a4 <_printf_i+0x23c>)
 80073dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80073e0:	6823      	ldr	r3, [r4, #0]
 80073e2:	6831      	ldr	r1, [r6, #0]
 80073e4:	061f      	lsls	r7, r3, #24
 80073e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80073ea:	d402      	bmi.n	80073f2 <_printf_i+0x18a>
 80073ec:	065f      	lsls	r7, r3, #25
 80073ee:	bf48      	it	mi
 80073f0:	b2ad      	uxthmi	r5, r5
 80073f2:	6031      	str	r1, [r6, #0]
 80073f4:	07d9      	lsls	r1, r3, #31
 80073f6:	bf44      	itt	mi
 80073f8:	f043 0320 	orrmi.w	r3, r3, #32
 80073fc:	6023      	strmi	r3, [r4, #0]
 80073fe:	b11d      	cbz	r5, 8007408 <_printf_i+0x1a0>
 8007400:	2310      	movs	r3, #16
 8007402:	e7ab      	b.n	800735c <_printf_i+0xf4>
 8007404:	4826      	ldr	r0, [pc, #152]	@ (80074a0 <_printf_i+0x238>)
 8007406:	e7e9      	b.n	80073dc <_printf_i+0x174>
 8007408:	6823      	ldr	r3, [r4, #0]
 800740a:	f023 0320 	bic.w	r3, r3, #32
 800740e:	6023      	str	r3, [r4, #0]
 8007410:	e7f6      	b.n	8007400 <_printf_i+0x198>
 8007412:	4616      	mov	r6, r2
 8007414:	e7bd      	b.n	8007392 <_printf_i+0x12a>
 8007416:	6833      	ldr	r3, [r6, #0]
 8007418:	6825      	ldr	r5, [r4, #0]
 800741a:	1d18      	adds	r0, r3, #4
 800741c:	6961      	ldr	r1, [r4, #20]
 800741e:	6030      	str	r0, [r6, #0]
 8007420:	062e      	lsls	r6, r5, #24
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	d501      	bpl.n	800742a <_printf_i+0x1c2>
 8007426:	6019      	str	r1, [r3, #0]
 8007428:	e002      	b.n	8007430 <_printf_i+0x1c8>
 800742a:	0668      	lsls	r0, r5, #25
 800742c:	d5fb      	bpl.n	8007426 <_printf_i+0x1be>
 800742e:	8019      	strh	r1, [r3, #0]
 8007430:	2300      	movs	r3, #0
 8007432:	4616      	mov	r6, r2
 8007434:	6123      	str	r3, [r4, #16]
 8007436:	e7bc      	b.n	80073b2 <_printf_i+0x14a>
 8007438:	6833      	ldr	r3, [r6, #0]
 800743a:	2100      	movs	r1, #0
 800743c:	1d1a      	adds	r2, r3, #4
 800743e:	6032      	str	r2, [r6, #0]
 8007440:	681e      	ldr	r6, [r3, #0]
 8007442:	6862      	ldr	r2, [r4, #4]
 8007444:	4630      	mov	r0, r6
 8007446:	f000 fbf6 	bl	8007c36 <memchr>
 800744a:	b108      	cbz	r0, 8007450 <_printf_i+0x1e8>
 800744c:	1b80      	subs	r0, r0, r6
 800744e:	6060      	str	r0, [r4, #4]
 8007450:	6863      	ldr	r3, [r4, #4]
 8007452:	6123      	str	r3, [r4, #16]
 8007454:	2300      	movs	r3, #0
 8007456:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800745a:	e7aa      	b.n	80073b2 <_printf_i+0x14a>
 800745c:	4632      	mov	r2, r6
 800745e:	4649      	mov	r1, r9
 8007460:	4640      	mov	r0, r8
 8007462:	6923      	ldr	r3, [r4, #16]
 8007464:	47d0      	blx	sl
 8007466:	3001      	adds	r0, #1
 8007468:	d0ad      	beq.n	80073c6 <_printf_i+0x15e>
 800746a:	6823      	ldr	r3, [r4, #0]
 800746c:	079b      	lsls	r3, r3, #30
 800746e:	d413      	bmi.n	8007498 <_printf_i+0x230>
 8007470:	68e0      	ldr	r0, [r4, #12]
 8007472:	9b03      	ldr	r3, [sp, #12]
 8007474:	4298      	cmp	r0, r3
 8007476:	bfb8      	it	lt
 8007478:	4618      	movlt	r0, r3
 800747a:	e7a6      	b.n	80073ca <_printf_i+0x162>
 800747c:	2301      	movs	r3, #1
 800747e:	4632      	mov	r2, r6
 8007480:	4649      	mov	r1, r9
 8007482:	4640      	mov	r0, r8
 8007484:	47d0      	blx	sl
 8007486:	3001      	adds	r0, #1
 8007488:	d09d      	beq.n	80073c6 <_printf_i+0x15e>
 800748a:	3501      	adds	r5, #1
 800748c:	68e3      	ldr	r3, [r4, #12]
 800748e:	9903      	ldr	r1, [sp, #12]
 8007490:	1a5b      	subs	r3, r3, r1
 8007492:	42ab      	cmp	r3, r5
 8007494:	dcf2      	bgt.n	800747c <_printf_i+0x214>
 8007496:	e7eb      	b.n	8007470 <_printf_i+0x208>
 8007498:	2500      	movs	r5, #0
 800749a:	f104 0619 	add.w	r6, r4, #25
 800749e:	e7f5      	b.n	800748c <_printf_i+0x224>
 80074a0:	0800caab 	.word	0x0800caab
 80074a4:	0800cabc 	.word	0x0800cabc

080074a8 <_scanf_float>:
 80074a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ac:	b087      	sub	sp, #28
 80074ae:	9303      	str	r3, [sp, #12]
 80074b0:	688b      	ldr	r3, [r1, #8]
 80074b2:	4617      	mov	r7, r2
 80074b4:	1e5a      	subs	r2, r3, #1
 80074b6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80074ba:	bf82      	ittt	hi
 80074bc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80074c0:	eb03 0b05 	addhi.w	fp, r3, r5
 80074c4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80074c8:	460a      	mov	r2, r1
 80074ca:	f04f 0500 	mov.w	r5, #0
 80074ce:	bf88      	it	hi
 80074d0:	608b      	strhi	r3, [r1, #8]
 80074d2:	680b      	ldr	r3, [r1, #0]
 80074d4:	4680      	mov	r8, r0
 80074d6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80074da:	f842 3b1c 	str.w	r3, [r2], #28
 80074de:	460c      	mov	r4, r1
 80074e0:	bf98      	it	ls
 80074e2:	f04f 0b00 	movls.w	fp, #0
 80074e6:	4616      	mov	r6, r2
 80074e8:	46aa      	mov	sl, r5
 80074ea:	46a9      	mov	r9, r5
 80074ec:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80074f0:	9201      	str	r2, [sp, #4]
 80074f2:	9502      	str	r5, [sp, #8]
 80074f4:	68a2      	ldr	r2, [r4, #8]
 80074f6:	b152      	cbz	r2, 800750e <_scanf_float+0x66>
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	2b4e      	cmp	r3, #78	@ 0x4e
 80074fe:	d865      	bhi.n	80075cc <_scanf_float+0x124>
 8007500:	2b40      	cmp	r3, #64	@ 0x40
 8007502:	d83d      	bhi.n	8007580 <_scanf_float+0xd8>
 8007504:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007508:	b2c8      	uxtb	r0, r1
 800750a:	280e      	cmp	r0, #14
 800750c:	d93b      	bls.n	8007586 <_scanf_float+0xde>
 800750e:	f1b9 0f00 	cmp.w	r9, #0
 8007512:	d003      	beq.n	800751c <_scanf_float+0x74>
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800751a:	6023      	str	r3, [r4, #0]
 800751c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007520:	f1ba 0f01 	cmp.w	sl, #1
 8007524:	f200 8118 	bhi.w	8007758 <_scanf_float+0x2b0>
 8007528:	9b01      	ldr	r3, [sp, #4]
 800752a:	429e      	cmp	r6, r3
 800752c:	f200 8109 	bhi.w	8007742 <_scanf_float+0x29a>
 8007530:	2001      	movs	r0, #1
 8007532:	b007      	add	sp, #28
 8007534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007538:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800753c:	2a0d      	cmp	r2, #13
 800753e:	d8e6      	bhi.n	800750e <_scanf_float+0x66>
 8007540:	a101      	add	r1, pc, #4	@ (adr r1, 8007548 <_scanf_float+0xa0>)
 8007542:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007546:	bf00      	nop
 8007548:	0800768f 	.word	0x0800768f
 800754c:	0800750f 	.word	0x0800750f
 8007550:	0800750f 	.word	0x0800750f
 8007554:	0800750f 	.word	0x0800750f
 8007558:	080076ef 	.word	0x080076ef
 800755c:	080076c7 	.word	0x080076c7
 8007560:	0800750f 	.word	0x0800750f
 8007564:	0800750f 	.word	0x0800750f
 8007568:	0800769d 	.word	0x0800769d
 800756c:	0800750f 	.word	0x0800750f
 8007570:	0800750f 	.word	0x0800750f
 8007574:	0800750f 	.word	0x0800750f
 8007578:	0800750f 	.word	0x0800750f
 800757c:	08007655 	.word	0x08007655
 8007580:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007584:	e7da      	b.n	800753c <_scanf_float+0x94>
 8007586:	290e      	cmp	r1, #14
 8007588:	d8c1      	bhi.n	800750e <_scanf_float+0x66>
 800758a:	a001      	add	r0, pc, #4	@ (adr r0, 8007590 <_scanf_float+0xe8>)
 800758c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007590:	08007645 	.word	0x08007645
 8007594:	0800750f 	.word	0x0800750f
 8007598:	08007645 	.word	0x08007645
 800759c:	080076db 	.word	0x080076db
 80075a0:	0800750f 	.word	0x0800750f
 80075a4:	080075ed 	.word	0x080075ed
 80075a8:	0800762b 	.word	0x0800762b
 80075ac:	0800762b 	.word	0x0800762b
 80075b0:	0800762b 	.word	0x0800762b
 80075b4:	0800762b 	.word	0x0800762b
 80075b8:	0800762b 	.word	0x0800762b
 80075bc:	0800762b 	.word	0x0800762b
 80075c0:	0800762b 	.word	0x0800762b
 80075c4:	0800762b 	.word	0x0800762b
 80075c8:	0800762b 	.word	0x0800762b
 80075cc:	2b6e      	cmp	r3, #110	@ 0x6e
 80075ce:	d809      	bhi.n	80075e4 <_scanf_float+0x13c>
 80075d0:	2b60      	cmp	r3, #96	@ 0x60
 80075d2:	d8b1      	bhi.n	8007538 <_scanf_float+0x90>
 80075d4:	2b54      	cmp	r3, #84	@ 0x54
 80075d6:	d07b      	beq.n	80076d0 <_scanf_float+0x228>
 80075d8:	2b59      	cmp	r3, #89	@ 0x59
 80075da:	d198      	bne.n	800750e <_scanf_float+0x66>
 80075dc:	2d07      	cmp	r5, #7
 80075de:	d196      	bne.n	800750e <_scanf_float+0x66>
 80075e0:	2508      	movs	r5, #8
 80075e2:	e02c      	b.n	800763e <_scanf_float+0x196>
 80075e4:	2b74      	cmp	r3, #116	@ 0x74
 80075e6:	d073      	beq.n	80076d0 <_scanf_float+0x228>
 80075e8:	2b79      	cmp	r3, #121	@ 0x79
 80075ea:	e7f6      	b.n	80075da <_scanf_float+0x132>
 80075ec:	6821      	ldr	r1, [r4, #0]
 80075ee:	05c8      	lsls	r0, r1, #23
 80075f0:	d51b      	bpl.n	800762a <_scanf_float+0x182>
 80075f2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80075f6:	6021      	str	r1, [r4, #0]
 80075f8:	f109 0901 	add.w	r9, r9, #1
 80075fc:	f1bb 0f00 	cmp.w	fp, #0
 8007600:	d003      	beq.n	800760a <_scanf_float+0x162>
 8007602:	3201      	adds	r2, #1
 8007604:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007608:	60a2      	str	r2, [r4, #8]
 800760a:	68a3      	ldr	r3, [r4, #8]
 800760c:	3b01      	subs	r3, #1
 800760e:	60a3      	str	r3, [r4, #8]
 8007610:	6923      	ldr	r3, [r4, #16]
 8007612:	3301      	adds	r3, #1
 8007614:	6123      	str	r3, [r4, #16]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	3b01      	subs	r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	607b      	str	r3, [r7, #4]
 800761e:	f340 8087 	ble.w	8007730 <_scanf_float+0x288>
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	3301      	adds	r3, #1
 8007626:	603b      	str	r3, [r7, #0]
 8007628:	e764      	b.n	80074f4 <_scanf_float+0x4c>
 800762a:	eb1a 0105 	adds.w	r1, sl, r5
 800762e:	f47f af6e 	bne.w	800750e <_scanf_float+0x66>
 8007632:	460d      	mov	r5, r1
 8007634:	468a      	mov	sl, r1
 8007636:	6822      	ldr	r2, [r4, #0]
 8007638:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800763c:	6022      	str	r2, [r4, #0]
 800763e:	f806 3b01 	strb.w	r3, [r6], #1
 8007642:	e7e2      	b.n	800760a <_scanf_float+0x162>
 8007644:	6822      	ldr	r2, [r4, #0]
 8007646:	0610      	lsls	r0, r2, #24
 8007648:	f57f af61 	bpl.w	800750e <_scanf_float+0x66>
 800764c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007650:	6022      	str	r2, [r4, #0]
 8007652:	e7f4      	b.n	800763e <_scanf_float+0x196>
 8007654:	f1ba 0f00 	cmp.w	sl, #0
 8007658:	d10e      	bne.n	8007678 <_scanf_float+0x1d0>
 800765a:	f1b9 0f00 	cmp.w	r9, #0
 800765e:	d10e      	bne.n	800767e <_scanf_float+0x1d6>
 8007660:	6822      	ldr	r2, [r4, #0]
 8007662:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007666:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800766a:	d108      	bne.n	800767e <_scanf_float+0x1d6>
 800766c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007670:	f04f 0a01 	mov.w	sl, #1
 8007674:	6022      	str	r2, [r4, #0]
 8007676:	e7e2      	b.n	800763e <_scanf_float+0x196>
 8007678:	f1ba 0f02 	cmp.w	sl, #2
 800767c:	d055      	beq.n	800772a <_scanf_float+0x282>
 800767e:	2d01      	cmp	r5, #1
 8007680:	d002      	beq.n	8007688 <_scanf_float+0x1e0>
 8007682:	2d04      	cmp	r5, #4
 8007684:	f47f af43 	bne.w	800750e <_scanf_float+0x66>
 8007688:	3501      	adds	r5, #1
 800768a:	b2ed      	uxtb	r5, r5
 800768c:	e7d7      	b.n	800763e <_scanf_float+0x196>
 800768e:	f1ba 0f01 	cmp.w	sl, #1
 8007692:	f47f af3c 	bne.w	800750e <_scanf_float+0x66>
 8007696:	f04f 0a02 	mov.w	sl, #2
 800769a:	e7d0      	b.n	800763e <_scanf_float+0x196>
 800769c:	b97d      	cbnz	r5, 80076be <_scanf_float+0x216>
 800769e:	f1b9 0f00 	cmp.w	r9, #0
 80076a2:	f47f af37 	bne.w	8007514 <_scanf_float+0x6c>
 80076a6:	6822      	ldr	r2, [r4, #0]
 80076a8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80076ac:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80076b0:	f040 8103 	bne.w	80078ba <_scanf_float+0x412>
 80076b4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80076b8:	2501      	movs	r5, #1
 80076ba:	6022      	str	r2, [r4, #0]
 80076bc:	e7bf      	b.n	800763e <_scanf_float+0x196>
 80076be:	2d03      	cmp	r5, #3
 80076c0:	d0e2      	beq.n	8007688 <_scanf_float+0x1e0>
 80076c2:	2d05      	cmp	r5, #5
 80076c4:	e7de      	b.n	8007684 <_scanf_float+0x1dc>
 80076c6:	2d02      	cmp	r5, #2
 80076c8:	f47f af21 	bne.w	800750e <_scanf_float+0x66>
 80076cc:	2503      	movs	r5, #3
 80076ce:	e7b6      	b.n	800763e <_scanf_float+0x196>
 80076d0:	2d06      	cmp	r5, #6
 80076d2:	f47f af1c 	bne.w	800750e <_scanf_float+0x66>
 80076d6:	2507      	movs	r5, #7
 80076d8:	e7b1      	b.n	800763e <_scanf_float+0x196>
 80076da:	6822      	ldr	r2, [r4, #0]
 80076dc:	0591      	lsls	r1, r2, #22
 80076de:	f57f af16 	bpl.w	800750e <_scanf_float+0x66>
 80076e2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80076e6:	6022      	str	r2, [r4, #0]
 80076e8:	f8cd 9008 	str.w	r9, [sp, #8]
 80076ec:	e7a7      	b.n	800763e <_scanf_float+0x196>
 80076ee:	6822      	ldr	r2, [r4, #0]
 80076f0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80076f4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80076f8:	d006      	beq.n	8007708 <_scanf_float+0x260>
 80076fa:	0550      	lsls	r0, r2, #21
 80076fc:	f57f af07 	bpl.w	800750e <_scanf_float+0x66>
 8007700:	f1b9 0f00 	cmp.w	r9, #0
 8007704:	f000 80d9 	beq.w	80078ba <_scanf_float+0x412>
 8007708:	0591      	lsls	r1, r2, #22
 800770a:	bf58      	it	pl
 800770c:	9902      	ldrpl	r1, [sp, #8]
 800770e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007712:	bf58      	it	pl
 8007714:	eba9 0101 	subpl.w	r1, r9, r1
 8007718:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800771c:	f04f 0900 	mov.w	r9, #0
 8007720:	bf58      	it	pl
 8007722:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007726:	6022      	str	r2, [r4, #0]
 8007728:	e789      	b.n	800763e <_scanf_float+0x196>
 800772a:	f04f 0a03 	mov.w	sl, #3
 800772e:	e786      	b.n	800763e <_scanf_float+0x196>
 8007730:	4639      	mov	r1, r7
 8007732:	4640      	mov	r0, r8
 8007734:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007738:	4798      	blx	r3
 800773a:	2800      	cmp	r0, #0
 800773c:	f43f aeda 	beq.w	80074f4 <_scanf_float+0x4c>
 8007740:	e6e5      	b.n	800750e <_scanf_float+0x66>
 8007742:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007746:	463a      	mov	r2, r7
 8007748:	4640      	mov	r0, r8
 800774a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800774e:	4798      	blx	r3
 8007750:	6923      	ldr	r3, [r4, #16]
 8007752:	3b01      	subs	r3, #1
 8007754:	6123      	str	r3, [r4, #16]
 8007756:	e6e7      	b.n	8007528 <_scanf_float+0x80>
 8007758:	1e6b      	subs	r3, r5, #1
 800775a:	2b06      	cmp	r3, #6
 800775c:	d824      	bhi.n	80077a8 <_scanf_float+0x300>
 800775e:	2d02      	cmp	r5, #2
 8007760:	d836      	bhi.n	80077d0 <_scanf_float+0x328>
 8007762:	9b01      	ldr	r3, [sp, #4]
 8007764:	429e      	cmp	r6, r3
 8007766:	f67f aee3 	bls.w	8007530 <_scanf_float+0x88>
 800776a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800776e:	463a      	mov	r2, r7
 8007770:	4640      	mov	r0, r8
 8007772:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007776:	4798      	blx	r3
 8007778:	6923      	ldr	r3, [r4, #16]
 800777a:	3b01      	subs	r3, #1
 800777c:	6123      	str	r3, [r4, #16]
 800777e:	e7f0      	b.n	8007762 <_scanf_float+0x2ba>
 8007780:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007784:	463a      	mov	r2, r7
 8007786:	4640      	mov	r0, r8
 8007788:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800778c:	4798      	blx	r3
 800778e:	6923      	ldr	r3, [r4, #16]
 8007790:	3b01      	subs	r3, #1
 8007792:	6123      	str	r3, [r4, #16]
 8007794:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007798:	fa5f fa8a 	uxtb.w	sl, sl
 800779c:	f1ba 0f02 	cmp.w	sl, #2
 80077a0:	d1ee      	bne.n	8007780 <_scanf_float+0x2d8>
 80077a2:	3d03      	subs	r5, #3
 80077a4:	b2ed      	uxtb	r5, r5
 80077a6:	1b76      	subs	r6, r6, r5
 80077a8:	6823      	ldr	r3, [r4, #0]
 80077aa:	05da      	lsls	r2, r3, #23
 80077ac:	d530      	bpl.n	8007810 <_scanf_float+0x368>
 80077ae:	055b      	lsls	r3, r3, #21
 80077b0:	d511      	bpl.n	80077d6 <_scanf_float+0x32e>
 80077b2:	9b01      	ldr	r3, [sp, #4]
 80077b4:	429e      	cmp	r6, r3
 80077b6:	f67f aebb 	bls.w	8007530 <_scanf_float+0x88>
 80077ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80077be:	463a      	mov	r2, r7
 80077c0:	4640      	mov	r0, r8
 80077c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80077c6:	4798      	blx	r3
 80077c8:	6923      	ldr	r3, [r4, #16]
 80077ca:	3b01      	subs	r3, #1
 80077cc:	6123      	str	r3, [r4, #16]
 80077ce:	e7f0      	b.n	80077b2 <_scanf_float+0x30a>
 80077d0:	46aa      	mov	sl, r5
 80077d2:	46b3      	mov	fp, r6
 80077d4:	e7de      	b.n	8007794 <_scanf_float+0x2ec>
 80077d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80077da:	6923      	ldr	r3, [r4, #16]
 80077dc:	2965      	cmp	r1, #101	@ 0x65
 80077de:	f103 33ff 	add.w	r3, r3, #4294967295
 80077e2:	f106 35ff 	add.w	r5, r6, #4294967295
 80077e6:	6123      	str	r3, [r4, #16]
 80077e8:	d00c      	beq.n	8007804 <_scanf_float+0x35c>
 80077ea:	2945      	cmp	r1, #69	@ 0x45
 80077ec:	d00a      	beq.n	8007804 <_scanf_float+0x35c>
 80077ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80077f2:	463a      	mov	r2, r7
 80077f4:	4640      	mov	r0, r8
 80077f6:	4798      	blx	r3
 80077f8:	6923      	ldr	r3, [r4, #16]
 80077fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80077fe:	3b01      	subs	r3, #1
 8007800:	1eb5      	subs	r5, r6, #2
 8007802:	6123      	str	r3, [r4, #16]
 8007804:	463a      	mov	r2, r7
 8007806:	4640      	mov	r0, r8
 8007808:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800780c:	4798      	blx	r3
 800780e:	462e      	mov	r6, r5
 8007810:	6822      	ldr	r2, [r4, #0]
 8007812:	f012 0210 	ands.w	r2, r2, #16
 8007816:	d001      	beq.n	800781c <_scanf_float+0x374>
 8007818:	2000      	movs	r0, #0
 800781a:	e68a      	b.n	8007532 <_scanf_float+0x8a>
 800781c:	7032      	strb	r2, [r6, #0]
 800781e:	6823      	ldr	r3, [r4, #0]
 8007820:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007824:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007828:	d11c      	bne.n	8007864 <_scanf_float+0x3bc>
 800782a:	9b02      	ldr	r3, [sp, #8]
 800782c:	454b      	cmp	r3, r9
 800782e:	eba3 0209 	sub.w	r2, r3, r9
 8007832:	d123      	bne.n	800787c <_scanf_float+0x3d4>
 8007834:	2200      	movs	r2, #0
 8007836:	4640      	mov	r0, r8
 8007838:	9901      	ldr	r1, [sp, #4]
 800783a:	f7ff f941 	bl	8006ac0 <_strtod_r>
 800783e:	9b03      	ldr	r3, [sp, #12]
 8007840:	6825      	ldr	r5, [r4, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f015 0f02 	tst.w	r5, #2
 8007848:	4606      	mov	r6, r0
 800784a:	460f      	mov	r7, r1
 800784c:	f103 0204 	add.w	r2, r3, #4
 8007850:	d01f      	beq.n	8007892 <_scanf_float+0x3ea>
 8007852:	9903      	ldr	r1, [sp, #12]
 8007854:	600a      	str	r2, [r1, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	e9c3 6700 	strd	r6, r7, [r3]
 800785c:	68e3      	ldr	r3, [r4, #12]
 800785e:	3301      	adds	r3, #1
 8007860:	60e3      	str	r3, [r4, #12]
 8007862:	e7d9      	b.n	8007818 <_scanf_float+0x370>
 8007864:	9b04      	ldr	r3, [sp, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d0e4      	beq.n	8007834 <_scanf_float+0x38c>
 800786a:	9905      	ldr	r1, [sp, #20]
 800786c:	230a      	movs	r3, #10
 800786e:	4640      	mov	r0, r8
 8007870:	3101      	adds	r1, #1
 8007872:	f7ff f9b1 	bl	8006bd8 <_strtol_r>
 8007876:	9b04      	ldr	r3, [sp, #16]
 8007878:	9e05      	ldr	r6, [sp, #20]
 800787a:	1ac2      	subs	r2, r0, r3
 800787c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007880:	429e      	cmp	r6, r3
 8007882:	bf28      	it	cs
 8007884:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007888:	4630      	mov	r0, r6
 800788a:	490d      	ldr	r1, [pc, #52]	@ (80078c0 <_scanf_float+0x418>)
 800788c:	f000 f8de 	bl	8007a4c <siprintf>
 8007890:	e7d0      	b.n	8007834 <_scanf_float+0x38c>
 8007892:	076d      	lsls	r5, r5, #29
 8007894:	d4dd      	bmi.n	8007852 <_scanf_float+0x3aa>
 8007896:	9d03      	ldr	r5, [sp, #12]
 8007898:	602a      	str	r2, [r5, #0]
 800789a:	681d      	ldr	r5, [r3, #0]
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	f7f9 f8b4 	bl	8000a0c <__aeabi_dcmpun>
 80078a4:	b120      	cbz	r0, 80078b0 <_scanf_float+0x408>
 80078a6:	4807      	ldr	r0, [pc, #28]	@ (80078c4 <_scanf_float+0x41c>)
 80078a8:	f000 f9e8 	bl	8007c7c <nanf>
 80078ac:	6028      	str	r0, [r5, #0]
 80078ae:	e7d5      	b.n	800785c <_scanf_float+0x3b4>
 80078b0:	4630      	mov	r0, r6
 80078b2:	4639      	mov	r1, r7
 80078b4:	f7f9 f908 	bl	8000ac8 <__aeabi_d2f>
 80078b8:	e7f8      	b.n	80078ac <_scanf_float+0x404>
 80078ba:	f04f 0900 	mov.w	r9, #0
 80078be:	e62d      	b.n	800751c <_scanf_float+0x74>
 80078c0:	0800cacd 	.word	0x0800cacd
 80078c4:	0800cd6c 	.word	0x0800cd6c

080078c8 <std>:
 80078c8:	2300      	movs	r3, #0
 80078ca:	b510      	push	{r4, lr}
 80078cc:	4604      	mov	r4, r0
 80078ce:	e9c0 3300 	strd	r3, r3, [r0]
 80078d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078d6:	6083      	str	r3, [r0, #8]
 80078d8:	8181      	strh	r1, [r0, #12]
 80078da:	6643      	str	r3, [r0, #100]	@ 0x64
 80078dc:	81c2      	strh	r2, [r0, #14]
 80078de:	6183      	str	r3, [r0, #24]
 80078e0:	4619      	mov	r1, r3
 80078e2:	2208      	movs	r2, #8
 80078e4:	305c      	adds	r0, #92	@ 0x5c
 80078e6:	f000 f914 	bl	8007b12 <memset>
 80078ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007920 <std+0x58>)
 80078ec:	6224      	str	r4, [r4, #32]
 80078ee:	6263      	str	r3, [r4, #36]	@ 0x24
 80078f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007924 <std+0x5c>)
 80078f2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80078f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007928 <std+0x60>)
 80078f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80078f8:	4b0c      	ldr	r3, [pc, #48]	@ (800792c <std+0x64>)
 80078fa:	6323      	str	r3, [r4, #48]	@ 0x30
 80078fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007930 <std+0x68>)
 80078fe:	429c      	cmp	r4, r3
 8007900:	d006      	beq.n	8007910 <std+0x48>
 8007902:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007906:	4294      	cmp	r4, r2
 8007908:	d002      	beq.n	8007910 <std+0x48>
 800790a:	33d0      	adds	r3, #208	@ 0xd0
 800790c:	429c      	cmp	r4, r3
 800790e:	d105      	bne.n	800791c <std+0x54>
 8007910:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007918:	f000 b98a 	b.w	8007c30 <__retarget_lock_init_recursive>
 800791c:	bd10      	pop	{r4, pc}
 800791e:	bf00      	nop
 8007920:	08007a8d 	.word	0x08007a8d
 8007924:	08007aaf 	.word	0x08007aaf
 8007928:	08007ae7 	.word	0x08007ae7
 800792c:	08007b0b 	.word	0x08007b0b
 8007930:	20000a7c 	.word	0x20000a7c

08007934 <stdio_exit_handler>:
 8007934:	4a02      	ldr	r2, [pc, #8]	@ (8007940 <stdio_exit_handler+0xc>)
 8007936:	4903      	ldr	r1, [pc, #12]	@ (8007944 <stdio_exit_handler+0x10>)
 8007938:	4803      	ldr	r0, [pc, #12]	@ (8007948 <stdio_exit_handler+0x14>)
 800793a:	f000 b869 	b.w	8007a10 <_fwalk_sglue>
 800793e:	bf00      	nop
 8007940:	20000024 	.word	0x20000024
 8007944:	08009ed1 	.word	0x08009ed1
 8007948:	200001a0 	.word	0x200001a0

0800794c <cleanup_stdio>:
 800794c:	6841      	ldr	r1, [r0, #4]
 800794e:	4b0c      	ldr	r3, [pc, #48]	@ (8007980 <cleanup_stdio+0x34>)
 8007950:	b510      	push	{r4, lr}
 8007952:	4299      	cmp	r1, r3
 8007954:	4604      	mov	r4, r0
 8007956:	d001      	beq.n	800795c <cleanup_stdio+0x10>
 8007958:	f002 faba 	bl	8009ed0 <_fflush_r>
 800795c:	68a1      	ldr	r1, [r4, #8]
 800795e:	4b09      	ldr	r3, [pc, #36]	@ (8007984 <cleanup_stdio+0x38>)
 8007960:	4299      	cmp	r1, r3
 8007962:	d002      	beq.n	800796a <cleanup_stdio+0x1e>
 8007964:	4620      	mov	r0, r4
 8007966:	f002 fab3 	bl	8009ed0 <_fflush_r>
 800796a:	68e1      	ldr	r1, [r4, #12]
 800796c:	4b06      	ldr	r3, [pc, #24]	@ (8007988 <cleanup_stdio+0x3c>)
 800796e:	4299      	cmp	r1, r3
 8007970:	d004      	beq.n	800797c <cleanup_stdio+0x30>
 8007972:	4620      	mov	r0, r4
 8007974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007978:	f002 baaa 	b.w	8009ed0 <_fflush_r>
 800797c:	bd10      	pop	{r4, pc}
 800797e:	bf00      	nop
 8007980:	20000a7c 	.word	0x20000a7c
 8007984:	20000ae4 	.word	0x20000ae4
 8007988:	20000b4c 	.word	0x20000b4c

0800798c <global_stdio_init.part.0>:
 800798c:	b510      	push	{r4, lr}
 800798e:	4b0b      	ldr	r3, [pc, #44]	@ (80079bc <global_stdio_init.part.0+0x30>)
 8007990:	4c0b      	ldr	r4, [pc, #44]	@ (80079c0 <global_stdio_init.part.0+0x34>)
 8007992:	4a0c      	ldr	r2, [pc, #48]	@ (80079c4 <global_stdio_init.part.0+0x38>)
 8007994:	4620      	mov	r0, r4
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	2104      	movs	r1, #4
 800799a:	2200      	movs	r2, #0
 800799c:	f7ff ff94 	bl	80078c8 <std>
 80079a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80079a4:	2201      	movs	r2, #1
 80079a6:	2109      	movs	r1, #9
 80079a8:	f7ff ff8e 	bl	80078c8 <std>
 80079ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80079b0:	2202      	movs	r2, #2
 80079b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079b6:	2112      	movs	r1, #18
 80079b8:	f7ff bf86 	b.w	80078c8 <std>
 80079bc:	20000bb4 	.word	0x20000bb4
 80079c0:	20000a7c 	.word	0x20000a7c
 80079c4:	08007935 	.word	0x08007935

080079c8 <__sfp_lock_acquire>:
 80079c8:	4801      	ldr	r0, [pc, #4]	@ (80079d0 <__sfp_lock_acquire+0x8>)
 80079ca:	f000 b932 	b.w	8007c32 <__retarget_lock_acquire_recursive>
 80079ce:	bf00      	nop
 80079d0:	20000bbd 	.word	0x20000bbd

080079d4 <__sfp_lock_release>:
 80079d4:	4801      	ldr	r0, [pc, #4]	@ (80079dc <__sfp_lock_release+0x8>)
 80079d6:	f000 b92d 	b.w	8007c34 <__retarget_lock_release_recursive>
 80079da:	bf00      	nop
 80079dc:	20000bbd 	.word	0x20000bbd

080079e0 <__sinit>:
 80079e0:	b510      	push	{r4, lr}
 80079e2:	4604      	mov	r4, r0
 80079e4:	f7ff fff0 	bl	80079c8 <__sfp_lock_acquire>
 80079e8:	6a23      	ldr	r3, [r4, #32]
 80079ea:	b11b      	cbz	r3, 80079f4 <__sinit+0x14>
 80079ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079f0:	f7ff bff0 	b.w	80079d4 <__sfp_lock_release>
 80079f4:	4b04      	ldr	r3, [pc, #16]	@ (8007a08 <__sinit+0x28>)
 80079f6:	6223      	str	r3, [r4, #32]
 80079f8:	4b04      	ldr	r3, [pc, #16]	@ (8007a0c <__sinit+0x2c>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1f5      	bne.n	80079ec <__sinit+0xc>
 8007a00:	f7ff ffc4 	bl	800798c <global_stdio_init.part.0>
 8007a04:	e7f2      	b.n	80079ec <__sinit+0xc>
 8007a06:	bf00      	nop
 8007a08:	0800794d 	.word	0x0800794d
 8007a0c:	20000bb4 	.word	0x20000bb4

08007a10 <_fwalk_sglue>:
 8007a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a14:	4607      	mov	r7, r0
 8007a16:	4688      	mov	r8, r1
 8007a18:	4614      	mov	r4, r2
 8007a1a:	2600      	movs	r6, #0
 8007a1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a20:	f1b9 0901 	subs.w	r9, r9, #1
 8007a24:	d505      	bpl.n	8007a32 <_fwalk_sglue+0x22>
 8007a26:	6824      	ldr	r4, [r4, #0]
 8007a28:	2c00      	cmp	r4, #0
 8007a2a:	d1f7      	bne.n	8007a1c <_fwalk_sglue+0xc>
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a32:	89ab      	ldrh	r3, [r5, #12]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d907      	bls.n	8007a48 <_fwalk_sglue+0x38>
 8007a38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	d003      	beq.n	8007a48 <_fwalk_sglue+0x38>
 8007a40:	4629      	mov	r1, r5
 8007a42:	4638      	mov	r0, r7
 8007a44:	47c0      	blx	r8
 8007a46:	4306      	orrs	r6, r0
 8007a48:	3568      	adds	r5, #104	@ 0x68
 8007a4a:	e7e9      	b.n	8007a20 <_fwalk_sglue+0x10>

08007a4c <siprintf>:
 8007a4c:	b40e      	push	{r1, r2, r3}
 8007a4e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007a52:	b500      	push	{lr}
 8007a54:	b09c      	sub	sp, #112	@ 0x70
 8007a56:	ab1d      	add	r3, sp, #116	@ 0x74
 8007a58:	9002      	str	r0, [sp, #8]
 8007a5a:	9006      	str	r0, [sp, #24]
 8007a5c:	9107      	str	r1, [sp, #28]
 8007a5e:	9104      	str	r1, [sp, #16]
 8007a60:	4808      	ldr	r0, [pc, #32]	@ (8007a84 <siprintf+0x38>)
 8007a62:	4909      	ldr	r1, [pc, #36]	@ (8007a88 <siprintf+0x3c>)
 8007a64:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a68:	9105      	str	r1, [sp, #20]
 8007a6a:	6800      	ldr	r0, [r0, #0]
 8007a6c:	a902      	add	r1, sp, #8
 8007a6e:	9301      	str	r3, [sp, #4]
 8007a70:	f002 f8b2 	bl	8009bd8 <_svfiprintf_r>
 8007a74:	2200      	movs	r2, #0
 8007a76:	9b02      	ldr	r3, [sp, #8]
 8007a78:	701a      	strb	r2, [r3, #0]
 8007a7a:	b01c      	add	sp, #112	@ 0x70
 8007a7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a80:	b003      	add	sp, #12
 8007a82:	4770      	bx	lr
 8007a84:	2000019c 	.word	0x2000019c
 8007a88:	ffff0208 	.word	0xffff0208

08007a8c <__sread>:
 8007a8c:	b510      	push	{r4, lr}
 8007a8e:	460c      	mov	r4, r1
 8007a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a94:	f000 f87e 	bl	8007b94 <_read_r>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	bfab      	itete	ge
 8007a9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007a9e:	89a3      	ldrhlt	r3, [r4, #12]
 8007aa0:	181b      	addge	r3, r3, r0
 8007aa2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007aa6:	bfac      	ite	ge
 8007aa8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007aaa:	81a3      	strhlt	r3, [r4, #12]
 8007aac:	bd10      	pop	{r4, pc}

08007aae <__swrite>:
 8007aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab2:	461f      	mov	r7, r3
 8007ab4:	898b      	ldrh	r3, [r1, #12]
 8007ab6:	4605      	mov	r5, r0
 8007ab8:	05db      	lsls	r3, r3, #23
 8007aba:	460c      	mov	r4, r1
 8007abc:	4616      	mov	r6, r2
 8007abe:	d505      	bpl.n	8007acc <__swrite+0x1e>
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac8:	f000 f852 	bl	8007b70 <_lseek_r>
 8007acc:	89a3      	ldrh	r3, [r4, #12]
 8007ace:	4632      	mov	r2, r6
 8007ad0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ad4:	81a3      	strh	r3, [r4, #12]
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	463b      	mov	r3, r7
 8007ada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae2:	f000 b869 	b.w	8007bb8 <_write_r>

08007ae6 <__sseek>:
 8007ae6:	b510      	push	{r4, lr}
 8007ae8:	460c      	mov	r4, r1
 8007aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aee:	f000 f83f 	bl	8007b70 <_lseek_r>
 8007af2:	1c43      	adds	r3, r0, #1
 8007af4:	89a3      	ldrh	r3, [r4, #12]
 8007af6:	bf15      	itete	ne
 8007af8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007afa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007afe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b02:	81a3      	strheq	r3, [r4, #12]
 8007b04:	bf18      	it	ne
 8007b06:	81a3      	strhne	r3, [r4, #12]
 8007b08:	bd10      	pop	{r4, pc}

08007b0a <__sclose>:
 8007b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b0e:	f000 b81f 	b.w	8007b50 <_close_r>

08007b12 <memset>:
 8007b12:	4603      	mov	r3, r0
 8007b14:	4402      	add	r2, r0
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d100      	bne.n	8007b1c <memset+0xa>
 8007b1a:	4770      	bx	lr
 8007b1c:	f803 1b01 	strb.w	r1, [r3], #1
 8007b20:	e7f9      	b.n	8007b16 <memset+0x4>

08007b22 <strncmp>:
 8007b22:	b510      	push	{r4, lr}
 8007b24:	b16a      	cbz	r2, 8007b42 <strncmp+0x20>
 8007b26:	3901      	subs	r1, #1
 8007b28:	1884      	adds	r4, r0, r2
 8007b2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b2e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d103      	bne.n	8007b3e <strncmp+0x1c>
 8007b36:	42a0      	cmp	r0, r4
 8007b38:	d001      	beq.n	8007b3e <strncmp+0x1c>
 8007b3a:	2a00      	cmp	r2, #0
 8007b3c:	d1f5      	bne.n	8007b2a <strncmp+0x8>
 8007b3e:	1ad0      	subs	r0, r2, r3
 8007b40:	bd10      	pop	{r4, pc}
 8007b42:	4610      	mov	r0, r2
 8007b44:	e7fc      	b.n	8007b40 <strncmp+0x1e>
	...

08007b48 <_localeconv_r>:
 8007b48:	4800      	ldr	r0, [pc, #0]	@ (8007b4c <_localeconv_r+0x4>)
 8007b4a:	4770      	bx	lr
 8007b4c:	20000120 	.word	0x20000120

08007b50 <_close_r>:
 8007b50:	b538      	push	{r3, r4, r5, lr}
 8007b52:	2300      	movs	r3, #0
 8007b54:	4d05      	ldr	r5, [pc, #20]	@ (8007b6c <_close_r+0x1c>)
 8007b56:	4604      	mov	r4, r0
 8007b58:	4608      	mov	r0, r1
 8007b5a:	602b      	str	r3, [r5, #0]
 8007b5c:	f7fb fb43 	bl	80031e6 <_close>
 8007b60:	1c43      	adds	r3, r0, #1
 8007b62:	d102      	bne.n	8007b6a <_close_r+0x1a>
 8007b64:	682b      	ldr	r3, [r5, #0]
 8007b66:	b103      	cbz	r3, 8007b6a <_close_r+0x1a>
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
 8007b6c:	20000bb8 	.word	0x20000bb8

08007b70 <_lseek_r>:
 8007b70:	b538      	push	{r3, r4, r5, lr}
 8007b72:	4604      	mov	r4, r0
 8007b74:	4608      	mov	r0, r1
 8007b76:	4611      	mov	r1, r2
 8007b78:	2200      	movs	r2, #0
 8007b7a:	4d05      	ldr	r5, [pc, #20]	@ (8007b90 <_lseek_r+0x20>)
 8007b7c:	602a      	str	r2, [r5, #0]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	f7fb fb55 	bl	800322e <_lseek>
 8007b84:	1c43      	adds	r3, r0, #1
 8007b86:	d102      	bne.n	8007b8e <_lseek_r+0x1e>
 8007b88:	682b      	ldr	r3, [r5, #0]
 8007b8a:	b103      	cbz	r3, 8007b8e <_lseek_r+0x1e>
 8007b8c:	6023      	str	r3, [r4, #0]
 8007b8e:	bd38      	pop	{r3, r4, r5, pc}
 8007b90:	20000bb8 	.word	0x20000bb8

08007b94 <_read_r>:
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	4604      	mov	r4, r0
 8007b98:	4608      	mov	r0, r1
 8007b9a:	4611      	mov	r1, r2
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	4d05      	ldr	r5, [pc, #20]	@ (8007bb4 <_read_r+0x20>)
 8007ba0:	602a      	str	r2, [r5, #0]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	f7fb fae6 	bl	8003174 <_read>
 8007ba8:	1c43      	adds	r3, r0, #1
 8007baa:	d102      	bne.n	8007bb2 <_read_r+0x1e>
 8007bac:	682b      	ldr	r3, [r5, #0]
 8007bae:	b103      	cbz	r3, 8007bb2 <_read_r+0x1e>
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}
 8007bb4:	20000bb8 	.word	0x20000bb8

08007bb8 <_write_r>:
 8007bb8:	b538      	push	{r3, r4, r5, lr}
 8007bba:	4604      	mov	r4, r0
 8007bbc:	4608      	mov	r0, r1
 8007bbe:	4611      	mov	r1, r2
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	4d05      	ldr	r5, [pc, #20]	@ (8007bd8 <_write_r+0x20>)
 8007bc4:	602a      	str	r2, [r5, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	f7fb faf1 	bl	80031ae <_write>
 8007bcc:	1c43      	adds	r3, r0, #1
 8007bce:	d102      	bne.n	8007bd6 <_write_r+0x1e>
 8007bd0:	682b      	ldr	r3, [r5, #0]
 8007bd2:	b103      	cbz	r3, 8007bd6 <_write_r+0x1e>
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	bd38      	pop	{r3, r4, r5, pc}
 8007bd8:	20000bb8 	.word	0x20000bb8

08007bdc <__errno>:
 8007bdc:	4b01      	ldr	r3, [pc, #4]	@ (8007be4 <__errno+0x8>)
 8007bde:	6818      	ldr	r0, [r3, #0]
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	2000019c 	.word	0x2000019c

08007be8 <__libc_init_array>:
 8007be8:	b570      	push	{r4, r5, r6, lr}
 8007bea:	2600      	movs	r6, #0
 8007bec:	4d0c      	ldr	r5, [pc, #48]	@ (8007c20 <__libc_init_array+0x38>)
 8007bee:	4c0d      	ldr	r4, [pc, #52]	@ (8007c24 <__libc_init_array+0x3c>)
 8007bf0:	1b64      	subs	r4, r4, r5
 8007bf2:	10a4      	asrs	r4, r4, #2
 8007bf4:	42a6      	cmp	r6, r4
 8007bf6:	d109      	bne.n	8007c0c <__libc_init_array+0x24>
 8007bf8:	f003 fbe6 	bl	800b3c8 <_init>
 8007bfc:	2600      	movs	r6, #0
 8007bfe:	4d0a      	ldr	r5, [pc, #40]	@ (8007c28 <__libc_init_array+0x40>)
 8007c00:	4c0a      	ldr	r4, [pc, #40]	@ (8007c2c <__libc_init_array+0x44>)
 8007c02:	1b64      	subs	r4, r4, r5
 8007c04:	10a4      	asrs	r4, r4, #2
 8007c06:	42a6      	cmp	r6, r4
 8007c08:	d105      	bne.n	8007c16 <__libc_init_array+0x2e>
 8007c0a:	bd70      	pop	{r4, r5, r6, pc}
 8007c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c10:	4798      	blx	r3
 8007c12:	3601      	adds	r6, #1
 8007c14:	e7ee      	b.n	8007bf4 <__libc_init_array+0xc>
 8007c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c1a:	4798      	blx	r3
 8007c1c:	3601      	adds	r6, #1
 8007c1e:	e7f2      	b.n	8007c06 <__libc_init_array+0x1e>
 8007c20:	0800cda8 	.word	0x0800cda8
 8007c24:	0800cda8 	.word	0x0800cda8
 8007c28:	0800cda8 	.word	0x0800cda8
 8007c2c:	0800cdac 	.word	0x0800cdac

08007c30 <__retarget_lock_init_recursive>:
 8007c30:	4770      	bx	lr

08007c32 <__retarget_lock_acquire_recursive>:
 8007c32:	4770      	bx	lr

08007c34 <__retarget_lock_release_recursive>:
 8007c34:	4770      	bx	lr

08007c36 <memchr>:
 8007c36:	4603      	mov	r3, r0
 8007c38:	b510      	push	{r4, lr}
 8007c3a:	b2c9      	uxtb	r1, r1
 8007c3c:	4402      	add	r2, r0
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	4618      	mov	r0, r3
 8007c42:	d101      	bne.n	8007c48 <memchr+0x12>
 8007c44:	2000      	movs	r0, #0
 8007c46:	e003      	b.n	8007c50 <memchr+0x1a>
 8007c48:	7804      	ldrb	r4, [r0, #0]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	428c      	cmp	r4, r1
 8007c4e:	d1f6      	bne.n	8007c3e <memchr+0x8>
 8007c50:	bd10      	pop	{r4, pc}

08007c52 <memcpy>:
 8007c52:	440a      	add	r2, r1
 8007c54:	4291      	cmp	r1, r2
 8007c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c5a:	d100      	bne.n	8007c5e <memcpy+0xc>
 8007c5c:	4770      	bx	lr
 8007c5e:	b510      	push	{r4, lr}
 8007c60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c64:	4291      	cmp	r1, r2
 8007c66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c6a:	d1f9      	bne.n	8007c60 <memcpy+0xe>
 8007c6c:	bd10      	pop	{r4, pc}
	...

08007c70 <nan>:
 8007c70:	2000      	movs	r0, #0
 8007c72:	4901      	ldr	r1, [pc, #4]	@ (8007c78 <nan+0x8>)
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	7ff80000 	.word	0x7ff80000

08007c7c <nanf>:
 8007c7c:	4800      	ldr	r0, [pc, #0]	@ (8007c80 <nanf+0x4>)
 8007c7e:	4770      	bx	lr
 8007c80:	7fc00000 	.word	0x7fc00000

08007c84 <quorem>:
 8007c84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c88:	6903      	ldr	r3, [r0, #16]
 8007c8a:	690c      	ldr	r4, [r1, #16]
 8007c8c:	4607      	mov	r7, r0
 8007c8e:	42a3      	cmp	r3, r4
 8007c90:	db7e      	blt.n	8007d90 <quorem+0x10c>
 8007c92:	3c01      	subs	r4, #1
 8007c94:	00a3      	lsls	r3, r4, #2
 8007c96:	f100 0514 	add.w	r5, r0, #20
 8007c9a:	f101 0814 	add.w	r8, r1, #20
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ca4:	9301      	str	r3, [sp, #4]
 8007ca6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007caa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	fbb2 f6f3 	udiv	r6, r2, r3
 8007cb6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007cba:	d32e      	bcc.n	8007d1a <quorem+0x96>
 8007cbc:	f04f 0a00 	mov.w	sl, #0
 8007cc0:	46c4      	mov	ip, r8
 8007cc2:	46ae      	mov	lr, r5
 8007cc4:	46d3      	mov	fp, sl
 8007cc6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007cca:	b298      	uxth	r0, r3
 8007ccc:	fb06 a000 	mla	r0, r6, r0, sl
 8007cd0:	0c1b      	lsrs	r3, r3, #16
 8007cd2:	0c02      	lsrs	r2, r0, #16
 8007cd4:	fb06 2303 	mla	r3, r6, r3, r2
 8007cd8:	f8de 2000 	ldr.w	r2, [lr]
 8007cdc:	b280      	uxth	r0, r0
 8007cde:	b292      	uxth	r2, r2
 8007ce0:	1a12      	subs	r2, r2, r0
 8007ce2:	445a      	add	r2, fp
 8007ce4:	f8de 0000 	ldr.w	r0, [lr]
 8007ce8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007cf2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007cf6:	b292      	uxth	r2, r2
 8007cf8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007cfc:	45e1      	cmp	r9, ip
 8007cfe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007d02:	f84e 2b04 	str.w	r2, [lr], #4
 8007d06:	d2de      	bcs.n	8007cc6 <quorem+0x42>
 8007d08:	9b00      	ldr	r3, [sp, #0]
 8007d0a:	58eb      	ldr	r3, [r5, r3]
 8007d0c:	b92b      	cbnz	r3, 8007d1a <quorem+0x96>
 8007d0e:	9b01      	ldr	r3, [sp, #4]
 8007d10:	3b04      	subs	r3, #4
 8007d12:	429d      	cmp	r5, r3
 8007d14:	461a      	mov	r2, r3
 8007d16:	d32f      	bcc.n	8007d78 <quorem+0xf4>
 8007d18:	613c      	str	r4, [r7, #16]
 8007d1a:	4638      	mov	r0, r7
 8007d1c:	f001 fd10 	bl	8009740 <__mcmp>
 8007d20:	2800      	cmp	r0, #0
 8007d22:	db25      	blt.n	8007d70 <quorem+0xec>
 8007d24:	4629      	mov	r1, r5
 8007d26:	2000      	movs	r0, #0
 8007d28:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d2c:	f8d1 c000 	ldr.w	ip, [r1]
 8007d30:	fa1f fe82 	uxth.w	lr, r2
 8007d34:	fa1f f38c 	uxth.w	r3, ip
 8007d38:	eba3 030e 	sub.w	r3, r3, lr
 8007d3c:	4403      	add	r3, r0
 8007d3e:	0c12      	lsrs	r2, r2, #16
 8007d40:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007d44:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d4e:	45c1      	cmp	r9, r8
 8007d50:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007d54:	f841 3b04 	str.w	r3, [r1], #4
 8007d58:	d2e6      	bcs.n	8007d28 <quorem+0xa4>
 8007d5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d62:	b922      	cbnz	r2, 8007d6e <quorem+0xea>
 8007d64:	3b04      	subs	r3, #4
 8007d66:	429d      	cmp	r5, r3
 8007d68:	461a      	mov	r2, r3
 8007d6a:	d30b      	bcc.n	8007d84 <quorem+0x100>
 8007d6c:	613c      	str	r4, [r7, #16]
 8007d6e:	3601      	adds	r6, #1
 8007d70:	4630      	mov	r0, r6
 8007d72:	b003      	add	sp, #12
 8007d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d78:	6812      	ldr	r2, [r2, #0]
 8007d7a:	3b04      	subs	r3, #4
 8007d7c:	2a00      	cmp	r2, #0
 8007d7e:	d1cb      	bne.n	8007d18 <quorem+0x94>
 8007d80:	3c01      	subs	r4, #1
 8007d82:	e7c6      	b.n	8007d12 <quorem+0x8e>
 8007d84:	6812      	ldr	r2, [r2, #0]
 8007d86:	3b04      	subs	r3, #4
 8007d88:	2a00      	cmp	r2, #0
 8007d8a:	d1ef      	bne.n	8007d6c <quorem+0xe8>
 8007d8c:	3c01      	subs	r4, #1
 8007d8e:	e7ea      	b.n	8007d66 <quorem+0xe2>
 8007d90:	2000      	movs	r0, #0
 8007d92:	e7ee      	b.n	8007d72 <quorem+0xee>
 8007d94:	0000      	movs	r0, r0
	...

08007d98 <_dtoa_r>:
 8007d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9c:	4614      	mov	r4, r2
 8007d9e:	461d      	mov	r5, r3
 8007da0:	69c7      	ldr	r7, [r0, #28]
 8007da2:	b097      	sub	sp, #92	@ 0x5c
 8007da4:	4683      	mov	fp, r0
 8007da6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007daa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007dac:	b97f      	cbnz	r7, 8007dce <_dtoa_r+0x36>
 8007dae:	2010      	movs	r0, #16
 8007db0:	f001 f93c 	bl	800902c <malloc>
 8007db4:	4602      	mov	r2, r0
 8007db6:	f8cb 001c 	str.w	r0, [fp, #28]
 8007dba:	b920      	cbnz	r0, 8007dc6 <_dtoa_r+0x2e>
 8007dbc:	21ef      	movs	r1, #239	@ 0xef
 8007dbe:	4ba8      	ldr	r3, [pc, #672]	@ (8008060 <_dtoa_r+0x2c8>)
 8007dc0:	48a8      	ldr	r0, [pc, #672]	@ (8008064 <_dtoa_r+0x2cc>)
 8007dc2:	f002 f8d7 	bl	8009f74 <__assert_func>
 8007dc6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007dca:	6007      	str	r7, [r0, #0]
 8007dcc:	60c7      	str	r7, [r0, #12]
 8007dce:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007dd2:	6819      	ldr	r1, [r3, #0]
 8007dd4:	b159      	cbz	r1, 8007dee <_dtoa_r+0x56>
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	2301      	movs	r3, #1
 8007dda:	4093      	lsls	r3, r2
 8007ddc:	604a      	str	r2, [r1, #4]
 8007dde:	608b      	str	r3, [r1, #8]
 8007de0:	4658      	mov	r0, fp
 8007de2:	f001 fa2b 	bl	800923c <_Bfree>
 8007de6:	2200      	movs	r2, #0
 8007de8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007dec:	601a      	str	r2, [r3, #0]
 8007dee:	1e2b      	subs	r3, r5, #0
 8007df0:	bfaf      	iteee	ge
 8007df2:	2300      	movge	r3, #0
 8007df4:	2201      	movlt	r2, #1
 8007df6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007dfa:	9303      	strlt	r3, [sp, #12]
 8007dfc:	bfa8      	it	ge
 8007dfe:	6033      	strge	r3, [r6, #0]
 8007e00:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007e04:	4b98      	ldr	r3, [pc, #608]	@ (8008068 <_dtoa_r+0x2d0>)
 8007e06:	bfb8      	it	lt
 8007e08:	6032      	strlt	r2, [r6, #0]
 8007e0a:	ea33 0308 	bics.w	r3, r3, r8
 8007e0e:	d112      	bne.n	8007e36 <_dtoa_r+0x9e>
 8007e10:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007e14:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007e16:	6013      	str	r3, [r2, #0]
 8007e18:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007e1c:	4323      	orrs	r3, r4
 8007e1e:	f000 8550 	beq.w	80088c2 <_dtoa_r+0xb2a>
 8007e22:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007e24:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800806c <_dtoa_r+0x2d4>
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 8552 	beq.w	80088d2 <_dtoa_r+0xb3a>
 8007e2e:	f10a 0303 	add.w	r3, sl, #3
 8007e32:	f000 bd4c 	b.w	80088ce <_dtoa_r+0xb36>
 8007e36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e3a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007e3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e42:	2200      	movs	r2, #0
 8007e44:	2300      	movs	r3, #0
 8007e46:	f7f8 fdaf 	bl	80009a8 <__aeabi_dcmpeq>
 8007e4a:	4607      	mov	r7, r0
 8007e4c:	b158      	cbz	r0, 8007e66 <_dtoa_r+0xce>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007e52:	6013      	str	r3, [r2, #0]
 8007e54:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007e56:	b113      	cbz	r3, 8007e5e <_dtoa_r+0xc6>
 8007e58:	4b85      	ldr	r3, [pc, #532]	@ (8008070 <_dtoa_r+0x2d8>)
 8007e5a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007e5c:	6013      	str	r3, [r2, #0]
 8007e5e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8008074 <_dtoa_r+0x2dc>
 8007e62:	f000 bd36 	b.w	80088d2 <_dtoa_r+0xb3a>
 8007e66:	ab14      	add	r3, sp, #80	@ 0x50
 8007e68:	9301      	str	r3, [sp, #4]
 8007e6a:	ab15      	add	r3, sp, #84	@ 0x54
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	4658      	mov	r0, fp
 8007e70:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007e74:	f001 fd7c 	bl	8009970 <__d2b>
 8007e78:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007e7c:	4681      	mov	r9, r0
 8007e7e:	2e00      	cmp	r6, #0
 8007e80:	d077      	beq.n	8007f72 <_dtoa_r+0x1da>
 8007e82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e88:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007e8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e90:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007e94:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007e98:	9712      	str	r7, [sp, #72]	@ 0x48
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	4b76      	ldr	r3, [pc, #472]	@ (8008078 <_dtoa_r+0x2e0>)
 8007ea0:	f7f8 f962 	bl	8000168 <__aeabi_dsub>
 8007ea4:	a368      	add	r3, pc, #416	@ (adr r3, 8008048 <_dtoa_r+0x2b0>)
 8007ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eaa:	f7f8 fb15 	bl	80004d8 <__aeabi_dmul>
 8007eae:	a368      	add	r3, pc, #416	@ (adr r3, 8008050 <_dtoa_r+0x2b8>)
 8007eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb4:	f7f8 f95a 	bl	800016c <__adddf3>
 8007eb8:	4604      	mov	r4, r0
 8007eba:	4630      	mov	r0, r6
 8007ebc:	460d      	mov	r5, r1
 8007ebe:	f7f8 faa1 	bl	8000404 <__aeabi_i2d>
 8007ec2:	a365      	add	r3, pc, #404	@ (adr r3, 8008058 <_dtoa_r+0x2c0>)
 8007ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec8:	f7f8 fb06 	bl	80004d8 <__aeabi_dmul>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	f7f8 f94a 	bl	800016c <__adddf3>
 8007ed8:	4604      	mov	r4, r0
 8007eda:	460d      	mov	r5, r1
 8007edc:	f7f8 fdac 	bl	8000a38 <__aeabi_d2iz>
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	4607      	mov	r7, r0
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	4629      	mov	r1, r5
 8007eea:	f7f8 fd67 	bl	80009bc <__aeabi_dcmplt>
 8007eee:	b140      	cbz	r0, 8007f02 <_dtoa_r+0x16a>
 8007ef0:	4638      	mov	r0, r7
 8007ef2:	f7f8 fa87 	bl	8000404 <__aeabi_i2d>
 8007ef6:	4622      	mov	r2, r4
 8007ef8:	462b      	mov	r3, r5
 8007efa:	f7f8 fd55 	bl	80009a8 <__aeabi_dcmpeq>
 8007efe:	b900      	cbnz	r0, 8007f02 <_dtoa_r+0x16a>
 8007f00:	3f01      	subs	r7, #1
 8007f02:	2f16      	cmp	r7, #22
 8007f04:	d853      	bhi.n	8007fae <_dtoa_r+0x216>
 8007f06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f0a:	4b5c      	ldr	r3, [pc, #368]	@ (800807c <_dtoa_r+0x2e4>)
 8007f0c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f14:	f7f8 fd52 	bl	80009bc <__aeabi_dcmplt>
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	d04a      	beq.n	8007fb2 <_dtoa_r+0x21a>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	3f01      	subs	r7, #1
 8007f20:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f22:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007f24:	1b9b      	subs	r3, r3, r6
 8007f26:	1e5a      	subs	r2, r3, #1
 8007f28:	bf46      	itte	mi
 8007f2a:	f1c3 0801 	rsbmi	r8, r3, #1
 8007f2e:	2300      	movmi	r3, #0
 8007f30:	f04f 0800 	movpl.w	r8, #0
 8007f34:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f36:	bf48      	it	mi
 8007f38:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007f3a:	2f00      	cmp	r7, #0
 8007f3c:	db3b      	blt.n	8007fb6 <_dtoa_r+0x21e>
 8007f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f40:	970e      	str	r7, [sp, #56]	@ 0x38
 8007f42:	443b      	add	r3, r7
 8007f44:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f46:	2300      	movs	r3, #0
 8007f48:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f4a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f4c:	2b09      	cmp	r3, #9
 8007f4e:	d866      	bhi.n	800801e <_dtoa_r+0x286>
 8007f50:	2b05      	cmp	r3, #5
 8007f52:	bfc4      	itt	gt
 8007f54:	3b04      	subgt	r3, #4
 8007f56:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007f58:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f5a:	bfc8      	it	gt
 8007f5c:	2400      	movgt	r4, #0
 8007f5e:	f1a3 0302 	sub.w	r3, r3, #2
 8007f62:	bfd8      	it	le
 8007f64:	2401      	movle	r4, #1
 8007f66:	2b03      	cmp	r3, #3
 8007f68:	d864      	bhi.n	8008034 <_dtoa_r+0x29c>
 8007f6a:	e8df f003 	tbb	[pc, r3]
 8007f6e:	382b      	.short	0x382b
 8007f70:	5636      	.short	0x5636
 8007f72:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007f76:	441e      	add	r6, r3
 8007f78:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007f7c:	2b20      	cmp	r3, #32
 8007f7e:	bfc1      	itttt	gt
 8007f80:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007f84:	fa08 f803 	lslgt.w	r8, r8, r3
 8007f88:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007f8c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007f90:	bfd6      	itet	le
 8007f92:	f1c3 0320 	rsble	r3, r3, #32
 8007f96:	ea48 0003 	orrgt.w	r0, r8, r3
 8007f9a:	fa04 f003 	lslle.w	r0, r4, r3
 8007f9e:	f7f8 fa21 	bl	80003e4 <__aeabi_ui2d>
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007fa8:	3e01      	subs	r6, #1
 8007faa:	9212      	str	r2, [sp, #72]	@ 0x48
 8007fac:	e775      	b.n	8007e9a <_dtoa_r+0x102>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e7b6      	b.n	8007f20 <_dtoa_r+0x188>
 8007fb2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007fb4:	e7b5      	b.n	8007f22 <_dtoa_r+0x18a>
 8007fb6:	427b      	negs	r3, r7
 8007fb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fba:	2300      	movs	r3, #0
 8007fbc:	eba8 0807 	sub.w	r8, r8, r7
 8007fc0:	930e      	str	r3, [sp, #56]	@ 0x38
 8007fc2:	e7c2      	b.n	8007f4a <_dtoa_r+0x1b2>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fc8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	dc35      	bgt.n	800803a <_dtoa_r+0x2a2>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007fd6:	9221      	str	r2, [sp, #132]	@ 0x84
 8007fd8:	e00b      	b.n	8007ff2 <_dtoa_r+0x25a>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e7f3      	b.n	8007fc6 <_dtoa_r+0x22e>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fe2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007fe4:	18fb      	adds	r3, r7, r3
 8007fe6:	9308      	str	r3, [sp, #32]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	9307      	str	r3, [sp, #28]
 8007fee:	bfb8      	it	lt
 8007ff0:	2301      	movlt	r3, #1
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	2204      	movs	r2, #4
 8007ff6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007ffa:	f102 0514 	add.w	r5, r2, #20
 8007ffe:	429d      	cmp	r5, r3
 8008000:	d91f      	bls.n	8008042 <_dtoa_r+0x2aa>
 8008002:	6041      	str	r1, [r0, #4]
 8008004:	4658      	mov	r0, fp
 8008006:	f001 f8d9 	bl	80091bc <_Balloc>
 800800a:	4682      	mov	sl, r0
 800800c:	2800      	cmp	r0, #0
 800800e:	d139      	bne.n	8008084 <_dtoa_r+0x2ec>
 8008010:	4602      	mov	r2, r0
 8008012:	f240 11af 	movw	r1, #431	@ 0x1af
 8008016:	4b1a      	ldr	r3, [pc, #104]	@ (8008080 <_dtoa_r+0x2e8>)
 8008018:	e6d2      	b.n	8007dc0 <_dtoa_r+0x28>
 800801a:	2301      	movs	r3, #1
 800801c:	e7e0      	b.n	8007fe0 <_dtoa_r+0x248>
 800801e:	2401      	movs	r4, #1
 8008020:	2300      	movs	r3, #0
 8008022:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008024:	9320      	str	r3, [sp, #128]	@ 0x80
 8008026:	f04f 33ff 	mov.w	r3, #4294967295
 800802a:	2200      	movs	r2, #0
 800802c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008030:	2312      	movs	r3, #18
 8008032:	e7d0      	b.n	8007fd6 <_dtoa_r+0x23e>
 8008034:	2301      	movs	r3, #1
 8008036:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008038:	e7f5      	b.n	8008026 <_dtoa_r+0x28e>
 800803a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800803c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008040:	e7d7      	b.n	8007ff2 <_dtoa_r+0x25a>
 8008042:	3101      	adds	r1, #1
 8008044:	0052      	lsls	r2, r2, #1
 8008046:	e7d8      	b.n	8007ffa <_dtoa_r+0x262>
 8008048:	636f4361 	.word	0x636f4361
 800804c:	3fd287a7 	.word	0x3fd287a7
 8008050:	8b60c8b3 	.word	0x8b60c8b3
 8008054:	3fc68a28 	.word	0x3fc68a28
 8008058:	509f79fb 	.word	0x509f79fb
 800805c:	3fd34413 	.word	0x3fd34413
 8008060:	0800cae7 	.word	0x0800cae7
 8008064:	0800cafe 	.word	0x0800cafe
 8008068:	7ff00000 	.word	0x7ff00000
 800806c:	0800cae3 	.word	0x0800cae3
 8008070:	0800caaa 	.word	0x0800caaa
 8008074:	0800caa9 	.word	0x0800caa9
 8008078:	3ff80000 	.word	0x3ff80000
 800807c:	0800cc58 	.word	0x0800cc58
 8008080:	0800cb56 	.word	0x0800cb56
 8008084:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008088:	6018      	str	r0, [r3, #0]
 800808a:	9b07      	ldr	r3, [sp, #28]
 800808c:	2b0e      	cmp	r3, #14
 800808e:	f200 80a4 	bhi.w	80081da <_dtoa_r+0x442>
 8008092:	2c00      	cmp	r4, #0
 8008094:	f000 80a1 	beq.w	80081da <_dtoa_r+0x442>
 8008098:	2f00      	cmp	r7, #0
 800809a:	dd33      	ble.n	8008104 <_dtoa_r+0x36c>
 800809c:	4b86      	ldr	r3, [pc, #536]	@ (80082b8 <_dtoa_r+0x520>)
 800809e:	f007 020f 	and.w	r2, r7, #15
 80080a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080a6:	05f8      	lsls	r0, r7, #23
 80080a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80080ac:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80080b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80080b4:	d516      	bpl.n	80080e4 <_dtoa_r+0x34c>
 80080b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080ba:	4b80      	ldr	r3, [pc, #512]	@ (80082bc <_dtoa_r+0x524>)
 80080bc:	2603      	movs	r6, #3
 80080be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080c2:	f7f8 fb33 	bl	800072c <__aeabi_ddiv>
 80080c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080ca:	f004 040f 	and.w	r4, r4, #15
 80080ce:	4d7b      	ldr	r5, [pc, #492]	@ (80082bc <_dtoa_r+0x524>)
 80080d0:	b954      	cbnz	r4, 80080e8 <_dtoa_r+0x350>
 80080d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080da:	f7f8 fb27 	bl	800072c <__aeabi_ddiv>
 80080de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080e2:	e028      	b.n	8008136 <_dtoa_r+0x39e>
 80080e4:	2602      	movs	r6, #2
 80080e6:	e7f2      	b.n	80080ce <_dtoa_r+0x336>
 80080e8:	07e1      	lsls	r1, r4, #31
 80080ea:	d508      	bpl.n	80080fe <_dtoa_r+0x366>
 80080ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80080f4:	f7f8 f9f0 	bl	80004d8 <__aeabi_dmul>
 80080f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080fc:	3601      	adds	r6, #1
 80080fe:	1064      	asrs	r4, r4, #1
 8008100:	3508      	adds	r5, #8
 8008102:	e7e5      	b.n	80080d0 <_dtoa_r+0x338>
 8008104:	f000 80d2 	beq.w	80082ac <_dtoa_r+0x514>
 8008108:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800810c:	427c      	negs	r4, r7
 800810e:	4b6a      	ldr	r3, [pc, #424]	@ (80082b8 <_dtoa_r+0x520>)
 8008110:	f004 020f 	and.w	r2, r4, #15
 8008114:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811c:	f7f8 f9dc 	bl	80004d8 <__aeabi_dmul>
 8008120:	2602      	movs	r6, #2
 8008122:	2300      	movs	r3, #0
 8008124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008128:	4d64      	ldr	r5, [pc, #400]	@ (80082bc <_dtoa_r+0x524>)
 800812a:	1124      	asrs	r4, r4, #4
 800812c:	2c00      	cmp	r4, #0
 800812e:	f040 80b2 	bne.w	8008296 <_dtoa_r+0x4fe>
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1d3      	bne.n	80080de <_dtoa_r+0x346>
 8008136:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800813a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 80b7 	beq.w	80082b0 <_dtoa_r+0x518>
 8008142:	2200      	movs	r2, #0
 8008144:	4620      	mov	r0, r4
 8008146:	4629      	mov	r1, r5
 8008148:	4b5d      	ldr	r3, [pc, #372]	@ (80082c0 <_dtoa_r+0x528>)
 800814a:	f7f8 fc37 	bl	80009bc <__aeabi_dcmplt>
 800814e:	2800      	cmp	r0, #0
 8008150:	f000 80ae 	beq.w	80082b0 <_dtoa_r+0x518>
 8008154:	9b07      	ldr	r3, [sp, #28]
 8008156:	2b00      	cmp	r3, #0
 8008158:	f000 80aa 	beq.w	80082b0 <_dtoa_r+0x518>
 800815c:	9b08      	ldr	r3, [sp, #32]
 800815e:	2b00      	cmp	r3, #0
 8008160:	dd37      	ble.n	80081d2 <_dtoa_r+0x43a>
 8008162:	1e7b      	subs	r3, r7, #1
 8008164:	4620      	mov	r0, r4
 8008166:	9304      	str	r3, [sp, #16]
 8008168:	2200      	movs	r2, #0
 800816a:	4629      	mov	r1, r5
 800816c:	4b55      	ldr	r3, [pc, #340]	@ (80082c4 <_dtoa_r+0x52c>)
 800816e:	f7f8 f9b3 	bl	80004d8 <__aeabi_dmul>
 8008172:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008176:	9c08      	ldr	r4, [sp, #32]
 8008178:	3601      	adds	r6, #1
 800817a:	4630      	mov	r0, r6
 800817c:	f7f8 f942 	bl	8000404 <__aeabi_i2d>
 8008180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008184:	f7f8 f9a8 	bl	80004d8 <__aeabi_dmul>
 8008188:	2200      	movs	r2, #0
 800818a:	4b4f      	ldr	r3, [pc, #316]	@ (80082c8 <_dtoa_r+0x530>)
 800818c:	f7f7 ffee 	bl	800016c <__adddf3>
 8008190:	4605      	mov	r5, r0
 8008192:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008196:	2c00      	cmp	r4, #0
 8008198:	f040 809a 	bne.w	80082d0 <_dtoa_r+0x538>
 800819c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081a0:	2200      	movs	r2, #0
 80081a2:	4b4a      	ldr	r3, [pc, #296]	@ (80082cc <_dtoa_r+0x534>)
 80081a4:	f7f7 ffe0 	bl	8000168 <__aeabi_dsub>
 80081a8:	4602      	mov	r2, r0
 80081aa:	460b      	mov	r3, r1
 80081ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081b0:	462a      	mov	r2, r5
 80081b2:	4633      	mov	r3, r6
 80081b4:	f7f8 fc20 	bl	80009f8 <__aeabi_dcmpgt>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	f040 828e 	bne.w	80086da <_dtoa_r+0x942>
 80081be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081c2:	462a      	mov	r2, r5
 80081c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80081c8:	f7f8 fbf8 	bl	80009bc <__aeabi_dcmplt>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	f040 8127 	bne.w	8008420 <_dtoa_r+0x688>
 80081d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80081d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80081da:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f2c0 8163 	blt.w	80084a8 <_dtoa_r+0x710>
 80081e2:	2f0e      	cmp	r7, #14
 80081e4:	f300 8160 	bgt.w	80084a8 <_dtoa_r+0x710>
 80081e8:	4b33      	ldr	r3, [pc, #204]	@ (80082b8 <_dtoa_r+0x520>)
 80081ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80081ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80081f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80081f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	da03      	bge.n	8008204 <_dtoa_r+0x46c>
 80081fc:	9b07      	ldr	r3, [sp, #28]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f340 8100 	ble.w	8008404 <_dtoa_r+0x66c>
 8008204:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008208:	4656      	mov	r6, sl
 800820a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800820e:	4620      	mov	r0, r4
 8008210:	4629      	mov	r1, r5
 8008212:	f7f8 fa8b 	bl	800072c <__aeabi_ddiv>
 8008216:	f7f8 fc0f 	bl	8000a38 <__aeabi_d2iz>
 800821a:	4680      	mov	r8, r0
 800821c:	f7f8 f8f2 	bl	8000404 <__aeabi_i2d>
 8008220:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008224:	f7f8 f958 	bl	80004d8 <__aeabi_dmul>
 8008228:	4602      	mov	r2, r0
 800822a:	460b      	mov	r3, r1
 800822c:	4620      	mov	r0, r4
 800822e:	4629      	mov	r1, r5
 8008230:	f7f7 ff9a 	bl	8000168 <__aeabi_dsub>
 8008234:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008238:	9d07      	ldr	r5, [sp, #28]
 800823a:	f806 4b01 	strb.w	r4, [r6], #1
 800823e:	eba6 040a 	sub.w	r4, r6, sl
 8008242:	42a5      	cmp	r5, r4
 8008244:	4602      	mov	r2, r0
 8008246:	460b      	mov	r3, r1
 8008248:	f040 8116 	bne.w	8008478 <_dtoa_r+0x6e0>
 800824c:	f7f7 ff8e 	bl	800016c <__adddf3>
 8008250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008254:	4604      	mov	r4, r0
 8008256:	460d      	mov	r5, r1
 8008258:	f7f8 fbce 	bl	80009f8 <__aeabi_dcmpgt>
 800825c:	2800      	cmp	r0, #0
 800825e:	f040 80f8 	bne.w	8008452 <_dtoa_r+0x6ba>
 8008262:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008266:	4620      	mov	r0, r4
 8008268:	4629      	mov	r1, r5
 800826a:	f7f8 fb9d 	bl	80009a8 <__aeabi_dcmpeq>
 800826e:	b118      	cbz	r0, 8008278 <_dtoa_r+0x4e0>
 8008270:	f018 0f01 	tst.w	r8, #1
 8008274:	f040 80ed 	bne.w	8008452 <_dtoa_r+0x6ba>
 8008278:	4649      	mov	r1, r9
 800827a:	4658      	mov	r0, fp
 800827c:	f000 ffde 	bl	800923c <_Bfree>
 8008280:	2300      	movs	r3, #0
 8008282:	7033      	strb	r3, [r6, #0]
 8008284:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008286:	3701      	adds	r7, #1
 8008288:	601f      	str	r7, [r3, #0]
 800828a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 8320 	beq.w	80088d2 <_dtoa_r+0xb3a>
 8008292:	601e      	str	r6, [r3, #0]
 8008294:	e31d      	b.n	80088d2 <_dtoa_r+0xb3a>
 8008296:	07e2      	lsls	r2, r4, #31
 8008298:	d505      	bpl.n	80082a6 <_dtoa_r+0x50e>
 800829a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800829e:	f7f8 f91b 	bl	80004d8 <__aeabi_dmul>
 80082a2:	2301      	movs	r3, #1
 80082a4:	3601      	adds	r6, #1
 80082a6:	1064      	asrs	r4, r4, #1
 80082a8:	3508      	adds	r5, #8
 80082aa:	e73f      	b.n	800812c <_dtoa_r+0x394>
 80082ac:	2602      	movs	r6, #2
 80082ae:	e742      	b.n	8008136 <_dtoa_r+0x39e>
 80082b0:	9c07      	ldr	r4, [sp, #28]
 80082b2:	9704      	str	r7, [sp, #16]
 80082b4:	e761      	b.n	800817a <_dtoa_r+0x3e2>
 80082b6:	bf00      	nop
 80082b8:	0800cc58 	.word	0x0800cc58
 80082bc:	0800cc30 	.word	0x0800cc30
 80082c0:	3ff00000 	.word	0x3ff00000
 80082c4:	40240000 	.word	0x40240000
 80082c8:	401c0000 	.word	0x401c0000
 80082cc:	40140000 	.word	0x40140000
 80082d0:	4b70      	ldr	r3, [pc, #448]	@ (8008494 <_dtoa_r+0x6fc>)
 80082d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80082d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80082d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80082dc:	4454      	add	r4, sl
 80082de:	2900      	cmp	r1, #0
 80082e0:	d045      	beq.n	800836e <_dtoa_r+0x5d6>
 80082e2:	2000      	movs	r0, #0
 80082e4:	496c      	ldr	r1, [pc, #432]	@ (8008498 <_dtoa_r+0x700>)
 80082e6:	f7f8 fa21 	bl	800072c <__aeabi_ddiv>
 80082ea:	4633      	mov	r3, r6
 80082ec:	462a      	mov	r2, r5
 80082ee:	f7f7 ff3b 	bl	8000168 <__aeabi_dsub>
 80082f2:	4656      	mov	r6, sl
 80082f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80082f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082fc:	f7f8 fb9c 	bl	8000a38 <__aeabi_d2iz>
 8008300:	4605      	mov	r5, r0
 8008302:	f7f8 f87f 	bl	8000404 <__aeabi_i2d>
 8008306:	4602      	mov	r2, r0
 8008308:	460b      	mov	r3, r1
 800830a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800830e:	f7f7 ff2b 	bl	8000168 <__aeabi_dsub>
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	3530      	adds	r5, #48	@ 0x30
 8008318:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800831c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008320:	f806 5b01 	strb.w	r5, [r6], #1
 8008324:	f7f8 fb4a 	bl	80009bc <__aeabi_dcmplt>
 8008328:	2800      	cmp	r0, #0
 800832a:	d163      	bne.n	80083f4 <_dtoa_r+0x65c>
 800832c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008330:	2000      	movs	r0, #0
 8008332:	495a      	ldr	r1, [pc, #360]	@ (800849c <_dtoa_r+0x704>)
 8008334:	f7f7 ff18 	bl	8000168 <__aeabi_dsub>
 8008338:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800833c:	f7f8 fb3e 	bl	80009bc <__aeabi_dcmplt>
 8008340:	2800      	cmp	r0, #0
 8008342:	f040 8087 	bne.w	8008454 <_dtoa_r+0x6bc>
 8008346:	42a6      	cmp	r6, r4
 8008348:	f43f af43 	beq.w	80081d2 <_dtoa_r+0x43a>
 800834c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008350:	2200      	movs	r2, #0
 8008352:	4b53      	ldr	r3, [pc, #332]	@ (80084a0 <_dtoa_r+0x708>)
 8008354:	f7f8 f8c0 	bl	80004d8 <__aeabi_dmul>
 8008358:	2200      	movs	r2, #0
 800835a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800835e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008362:	4b4f      	ldr	r3, [pc, #316]	@ (80084a0 <_dtoa_r+0x708>)
 8008364:	f7f8 f8b8 	bl	80004d8 <__aeabi_dmul>
 8008368:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800836c:	e7c4      	b.n	80082f8 <_dtoa_r+0x560>
 800836e:	4631      	mov	r1, r6
 8008370:	4628      	mov	r0, r5
 8008372:	f7f8 f8b1 	bl	80004d8 <__aeabi_dmul>
 8008376:	4656      	mov	r6, sl
 8008378:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800837c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800837e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008382:	f7f8 fb59 	bl	8000a38 <__aeabi_d2iz>
 8008386:	4605      	mov	r5, r0
 8008388:	f7f8 f83c 	bl	8000404 <__aeabi_i2d>
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
 8008390:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008394:	f7f7 fee8 	bl	8000168 <__aeabi_dsub>
 8008398:	4602      	mov	r2, r0
 800839a:	460b      	mov	r3, r1
 800839c:	3530      	adds	r5, #48	@ 0x30
 800839e:	f806 5b01 	strb.w	r5, [r6], #1
 80083a2:	42a6      	cmp	r6, r4
 80083a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083a8:	f04f 0200 	mov.w	r2, #0
 80083ac:	d124      	bne.n	80083f8 <_dtoa_r+0x660>
 80083ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80083b2:	4b39      	ldr	r3, [pc, #228]	@ (8008498 <_dtoa_r+0x700>)
 80083b4:	f7f7 feda 	bl	800016c <__adddf3>
 80083b8:	4602      	mov	r2, r0
 80083ba:	460b      	mov	r3, r1
 80083bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083c0:	f7f8 fb1a 	bl	80009f8 <__aeabi_dcmpgt>
 80083c4:	2800      	cmp	r0, #0
 80083c6:	d145      	bne.n	8008454 <_dtoa_r+0x6bc>
 80083c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80083cc:	2000      	movs	r0, #0
 80083ce:	4932      	ldr	r1, [pc, #200]	@ (8008498 <_dtoa_r+0x700>)
 80083d0:	f7f7 feca 	bl	8000168 <__aeabi_dsub>
 80083d4:	4602      	mov	r2, r0
 80083d6:	460b      	mov	r3, r1
 80083d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083dc:	f7f8 faee 	bl	80009bc <__aeabi_dcmplt>
 80083e0:	2800      	cmp	r0, #0
 80083e2:	f43f aef6 	beq.w	80081d2 <_dtoa_r+0x43a>
 80083e6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80083e8:	1e73      	subs	r3, r6, #1
 80083ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80083ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80083f0:	2b30      	cmp	r3, #48	@ 0x30
 80083f2:	d0f8      	beq.n	80083e6 <_dtoa_r+0x64e>
 80083f4:	9f04      	ldr	r7, [sp, #16]
 80083f6:	e73f      	b.n	8008278 <_dtoa_r+0x4e0>
 80083f8:	4b29      	ldr	r3, [pc, #164]	@ (80084a0 <_dtoa_r+0x708>)
 80083fa:	f7f8 f86d 	bl	80004d8 <__aeabi_dmul>
 80083fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008402:	e7bc      	b.n	800837e <_dtoa_r+0x5e6>
 8008404:	d10c      	bne.n	8008420 <_dtoa_r+0x688>
 8008406:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800840a:	2200      	movs	r2, #0
 800840c:	4b25      	ldr	r3, [pc, #148]	@ (80084a4 <_dtoa_r+0x70c>)
 800840e:	f7f8 f863 	bl	80004d8 <__aeabi_dmul>
 8008412:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008416:	f7f8 fae5 	bl	80009e4 <__aeabi_dcmpge>
 800841a:	2800      	cmp	r0, #0
 800841c:	f000 815b 	beq.w	80086d6 <_dtoa_r+0x93e>
 8008420:	2400      	movs	r4, #0
 8008422:	4625      	mov	r5, r4
 8008424:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008426:	4656      	mov	r6, sl
 8008428:	43db      	mvns	r3, r3
 800842a:	9304      	str	r3, [sp, #16]
 800842c:	2700      	movs	r7, #0
 800842e:	4621      	mov	r1, r4
 8008430:	4658      	mov	r0, fp
 8008432:	f000 ff03 	bl	800923c <_Bfree>
 8008436:	2d00      	cmp	r5, #0
 8008438:	d0dc      	beq.n	80083f4 <_dtoa_r+0x65c>
 800843a:	b12f      	cbz	r7, 8008448 <_dtoa_r+0x6b0>
 800843c:	42af      	cmp	r7, r5
 800843e:	d003      	beq.n	8008448 <_dtoa_r+0x6b0>
 8008440:	4639      	mov	r1, r7
 8008442:	4658      	mov	r0, fp
 8008444:	f000 fefa 	bl	800923c <_Bfree>
 8008448:	4629      	mov	r1, r5
 800844a:	4658      	mov	r0, fp
 800844c:	f000 fef6 	bl	800923c <_Bfree>
 8008450:	e7d0      	b.n	80083f4 <_dtoa_r+0x65c>
 8008452:	9704      	str	r7, [sp, #16]
 8008454:	4633      	mov	r3, r6
 8008456:	461e      	mov	r6, r3
 8008458:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800845c:	2a39      	cmp	r2, #57	@ 0x39
 800845e:	d107      	bne.n	8008470 <_dtoa_r+0x6d8>
 8008460:	459a      	cmp	sl, r3
 8008462:	d1f8      	bne.n	8008456 <_dtoa_r+0x6be>
 8008464:	9a04      	ldr	r2, [sp, #16]
 8008466:	3201      	adds	r2, #1
 8008468:	9204      	str	r2, [sp, #16]
 800846a:	2230      	movs	r2, #48	@ 0x30
 800846c:	f88a 2000 	strb.w	r2, [sl]
 8008470:	781a      	ldrb	r2, [r3, #0]
 8008472:	3201      	adds	r2, #1
 8008474:	701a      	strb	r2, [r3, #0]
 8008476:	e7bd      	b.n	80083f4 <_dtoa_r+0x65c>
 8008478:	2200      	movs	r2, #0
 800847a:	4b09      	ldr	r3, [pc, #36]	@ (80084a0 <_dtoa_r+0x708>)
 800847c:	f7f8 f82c 	bl	80004d8 <__aeabi_dmul>
 8008480:	2200      	movs	r2, #0
 8008482:	2300      	movs	r3, #0
 8008484:	4604      	mov	r4, r0
 8008486:	460d      	mov	r5, r1
 8008488:	f7f8 fa8e 	bl	80009a8 <__aeabi_dcmpeq>
 800848c:	2800      	cmp	r0, #0
 800848e:	f43f aebc 	beq.w	800820a <_dtoa_r+0x472>
 8008492:	e6f1      	b.n	8008278 <_dtoa_r+0x4e0>
 8008494:	0800cc58 	.word	0x0800cc58
 8008498:	3fe00000 	.word	0x3fe00000
 800849c:	3ff00000 	.word	0x3ff00000
 80084a0:	40240000 	.word	0x40240000
 80084a4:	40140000 	.word	0x40140000
 80084a8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80084aa:	2a00      	cmp	r2, #0
 80084ac:	f000 80db 	beq.w	8008666 <_dtoa_r+0x8ce>
 80084b0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80084b2:	2a01      	cmp	r2, #1
 80084b4:	f300 80bf 	bgt.w	8008636 <_dtoa_r+0x89e>
 80084b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80084ba:	2a00      	cmp	r2, #0
 80084bc:	f000 80b7 	beq.w	800862e <_dtoa_r+0x896>
 80084c0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80084c4:	4646      	mov	r6, r8
 80084c6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80084c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084ca:	2101      	movs	r1, #1
 80084cc:	441a      	add	r2, r3
 80084ce:	4658      	mov	r0, fp
 80084d0:	4498      	add	r8, r3
 80084d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80084d4:	f000 ffb0 	bl	8009438 <__i2b>
 80084d8:	4605      	mov	r5, r0
 80084da:	b15e      	cbz	r6, 80084f4 <_dtoa_r+0x75c>
 80084dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084de:	2b00      	cmp	r3, #0
 80084e0:	dd08      	ble.n	80084f4 <_dtoa_r+0x75c>
 80084e2:	42b3      	cmp	r3, r6
 80084e4:	bfa8      	it	ge
 80084e6:	4633      	movge	r3, r6
 80084e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084ea:	eba8 0803 	sub.w	r8, r8, r3
 80084ee:	1af6      	subs	r6, r6, r3
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80084f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084f6:	b1f3      	cbz	r3, 8008536 <_dtoa_r+0x79e>
 80084f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f000 80b7 	beq.w	800866e <_dtoa_r+0x8d6>
 8008500:	b18c      	cbz	r4, 8008526 <_dtoa_r+0x78e>
 8008502:	4629      	mov	r1, r5
 8008504:	4622      	mov	r2, r4
 8008506:	4658      	mov	r0, fp
 8008508:	f001 f854 	bl	80095b4 <__pow5mult>
 800850c:	464a      	mov	r2, r9
 800850e:	4601      	mov	r1, r0
 8008510:	4605      	mov	r5, r0
 8008512:	4658      	mov	r0, fp
 8008514:	f000 ffa6 	bl	8009464 <__multiply>
 8008518:	4649      	mov	r1, r9
 800851a:	9004      	str	r0, [sp, #16]
 800851c:	4658      	mov	r0, fp
 800851e:	f000 fe8d 	bl	800923c <_Bfree>
 8008522:	9b04      	ldr	r3, [sp, #16]
 8008524:	4699      	mov	r9, r3
 8008526:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008528:	1b1a      	subs	r2, r3, r4
 800852a:	d004      	beq.n	8008536 <_dtoa_r+0x79e>
 800852c:	4649      	mov	r1, r9
 800852e:	4658      	mov	r0, fp
 8008530:	f001 f840 	bl	80095b4 <__pow5mult>
 8008534:	4681      	mov	r9, r0
 8008536:	2101      	movs	r1, #1
 8008538:	4658      	mov	r0, fp
 800853a:	f000 ff7d 	bl	8009438 <__i2b>
 800853e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008540:	4604      	mov	r4, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	f000 81c9 	beq.w	80088da <_dtoa_r+0xb42>
 8008548:	461a      	mov	r2, r3
 800854a:	4601      	mov	r1, r0
 800854c:	4658      	mov	r0, fp
 800854e:	f001 f831 	bl	80095b4 <__pow5mult>
 8008552:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008554:	4604      	mov	r4, r0
 8008556:	2b01      	cmp	r3, #1
 8008558:	f300 808f 	bgt.w	800867a <_dtoa_r+0x8e2>
 800855c:	9b02      	ldr	r3, [sp, #8]
 800855e:	2b00      	cmp	r3, #0
 8008560:	f040 8087 	bne.w	8008672 <_dtoa_r+0x8da>
 8008564:	9b03      	ldr	r3, [sp, #12]
 8008566:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800856a:	2b00      	cmp	r3, #0
 800856c:	f040 8083 	bne.w	8008676 <_dtoa_r+0x8de>
 8008570:	9b03      	ldr	r3, [sp, #12]
 8008572:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008576:	0d1b      	lsrs	r3, r3, #20
 8008578:	051b      	lsls	r3, r3, #20
 800857a:	b12b      	cbz	r3, 8008588 <_dtoa_r+0x7f0>
 800857c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800857e:	f108 0801 	add.w	r8, r8, #1
 8008582:	3301      	adds	r3, #1
 8008584:	9309      	str	r3, [sp, #36]	@ 0x24
 8008586:	2301      	movs	r3, #1
 8008588:	930a      	str	r3, [sp, #40]	@ 0x28
 800858a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800858c:	2b00      	cmp	r3, #0
 800858e:	f000 81aa 	beq.w	80088e6 <_dtoa_r+0xb4e>
 8008592:	6923      	ldr	r3, [r4, #16]
 8008594:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008598:	6918      	ldr	r0, [r3, #16]
 800859a:	f000 ff01 	bl	80093a0 <__hi0bits>
 800859e:	f1c0 0020 	rsb	r0, r0, #32
 80085a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a4:	4418      	add	r0, r3
 80085a6:	f010 001f 	ands.w	r0, r0, #31
 80085aa:	d071      	beq.n	8008690 <_dtoa_r+0x8f8>
 80085ac:	f1c0 0320 	rsb	r3, r0, #32
 80085b0:	2b04      	cmp	r3, #4
 80085b2:	dd65      	ble.n	8008680 <_dtoa_r+0x8e8>
 80085b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085b6:	f1c0 001c 	rsb	r0, r0, #28
 80085ba:	4403      	add	r3, r0
 80085bc:	4480      	add	r8, r0
 80085be:	4406      	add	r6, r0
 80085c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80085c2:	f1b8 0f00 	cmp.w	r8, #0
 80085c6:	dd05      	ble.n	80085d4 <_dtoa_r+0x83c>
 80085c8:	4649      	mov	r1, r9
 80085ca:	4642      	mov	r2, r8
 80085cc:	4658      	mov	r0, fp
 80085ce:	f001 f84b 	bl	8009668 <__lshift>
 80085d2:	4681      	mov	r9, r0
 80085d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	dd05      	ble.n	80085e6 <_dtoa_r+0x84e>
 80085da:	4621      	mov	r1, r4
 80085dc:	461a      	mov	r2, r3
 80085de:	4658      	mov	r0, fp
 80085e0:	f001 f842 	bl	8009668 <__lshift>
 80085e4:	4604      	mov	r4, r0
 80085e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d053      	beq.n	8008694 <_dtoa_r+0x8fc>
 80085ec:	4621      	mov	r1, r4
 80085ee:	4648      	mov	r0, r9
 80085f0:	f001 f8a6 	bl	8009740 <__mcmp>
 80085f4:	2800      	cmp	r0, #0
 80085f6:	da4d      	bge.n	8008694 <_dtoa_r+0x8fc>
 80085f8:	1e7b      	subs	r3, r7, #1
 80085fa:	4649      	mov	r1, r9
 80085fc:	9304      	str	r3, [sp, #16]
 80085fe:	220a      	movs	r2, #10
 8008600:	2300      	movs	r3, #0
 8008602:	4658      	mov	r0, fp
 8008604:	f000 fe3c 	bl	8009280 <__multadd>
 8008608:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800860a:	4681      	mov	r9, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	f000 816c 	beq.w	80088ea <_dtoa_r+0xb52>
 8008612:	2300      	movs	r3, #0
 8008614:	4629      	mov	r1, r5
 8008616:	220a      	movs	r2, #10
 8008618:	4658      	mov	r0, fp
 800861a:	f000 fe31 	bl	8009280 <__multadd>
 800861e:	9b08      	ldr	r3, [sp, #32]
 8008620:	4605      	mov	r5, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	dc61      	bgt.n	80086ea <_dtoa_r+0x952>
 8008626:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008628:	2b02      	cmp	r3, #2
 800862a:	dc3b      	bgt.n	80086a4 <_dtoa_r+0x90c>
 800862c:	e05d      	b.n	80086ea <_dtoa_r+0x952>
 800862e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008630:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008634:	e746      	b.n	80084c4 <_dtoa_r+0x72c>
 8008636:	9b07      	ldr	r3, [sp, #28]
 8008638:	1e5c      	subs	r4, r3, #1
 800863a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800863c:	42a3      	cmp	r3, r4
 800863e:	bfbf      	itttt	lt
 8008640:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008642:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008644:	1ae3      	sublt	r3, r4, r3
 8008646:	18d2      	addlt	r2, r2, r3
 8008648:	bfa8      	it	ge
 800864a:	1b1c      	subge	r4, r3, r4
 800864c:	9b07      	ldr	r3, [sp, #28]
 800864e:	bfbe      	ittt	lt
 8008650:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008652:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008654:	2400      	movlt	r4, #0
 8008656:	2b00      	cmp	r3, #0
 8008658:	bfb5      	itete	lt
 800865a:	eba8 0603 	sublt.w	r6, r8, r3
 800865e:	4646      	movge	r6, r8
 8008660:	2300      	movlt	r3, #0
 8008662:	9b07      	ldrge	r3, [sp, #28]
 8008664:	e730      	b.n	80084c8 <_dtoa_r+0x730>
 8008666:	4646      	mov	r6, r8
 8008668:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800866a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800866c:	e735      	b.n	80084da <_dtoa_r+0x742>
 800866e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008670:	e75c      	b.n	800852c <_dtoa_r+0x794>
 8008672:	2300      	movs	r3, #0
 8008674:	e788      	b.n	8008588 <_dtoa_r+0x7f0>
 8008676:	9b02      	ldr	r3, [sp, #8]
 8008678:	e786      	b.n	8008588 <_dtoa_r+0x7f0>
 800867a:	2300      	movs	r3, #0
 800867c:	930a      	str	r3, [sp, #40]	@ 0x28
 800867e:	e788      	b.n	8008592 <_dtoa_r+0x7fa>
 8008680:	d09f      	beq.n	80085c2 <_dtoa_r+0x82a>
 8008682:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008684:	331c      	adds	r3, #28
 8008686:	441a      	add	r2, r3
 8008688:	4498      	add	r8, r3
 800868a:	441e      	add	r6, r3
 800868c:	9209      	str	r2, [sp, #36]	@ 0x24
 800868e:	e798      	b.n	80085c2 <_dtoa_r+0x82a>
 8008690:	4603      	mov	r3, r0
 8008692:	e7f6      	b.n	8008682 <_dtoa_r+0x8ea>
 8008694:	9b07      	ldr	r3, [sp, #28]
 8008696:	9704      	str	r7, [sp, #16]
 8008698:	2b00      	cmp	r3, #0
 800869a:	dc20      	bgt.n	80086de <_dtoa_r+0x946>
 800869c:	9308      	str	r3, [sp, #32]
 800869e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	dd1e      	ble.n	80086e2 <_dtoa_r+0x94a>
 80086a4:	9b08      	ldr	r3, [sp, #32]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f47f aebc 	bne.w	8008424 <_dtoa_r+0x68c>
 80086ac:	4621      	mov	r1, r4
 80086ae:	2205      	movs	r2, #5
 80086b0:	4658      	mov	r0, fp
 80086b2:	f000 fde5 	bl	8009280 <__multadd>
 80086b6:	4601      	mov	r1, r0
 80086b8:	4604      	mov	r4, r0
 80086ba:	4648      	mov	r0, r9
 80086bc:	f001 f840 	bl	8009740 <__mcmp>
 80086c0:	2800      	cmp	r0, #0
 80086c2:	f77f aeaf 	ble.w	8008424 <_dtoa_r+0x68c>
 80086c6:	2331      	movs	r3, #49	@ 0x31
 80086c8:	4656      	mov	r6, sl
 80086ca:	f806 3b01 	strb.w	r3, [r6], #1
 80086ce:	9b04      	ldr	r3, [sp, #16]
 80086d0:	3301      	adds	r3, #1
 80086d2:	9304      	str	r3, [sp, #16]
 80086d4:	e6aa      	b.n	800842c <_dtoa_r+0x694>
 80086d6:	9c07      	ldr	r4, [sp, #28]
 80086d8:	9704      	str	r7, [sp, #16]
 80086da:	4625      	mov	r5, r4
 80086dc:	e7f3      	b.n	80086c6 <_dtoa_r+0x92e>
 80086de:	9b07      	ldr	r3, [sp, #28]
 80086e0:	9308      	str	r3, [sp, #32]
 80086e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f000 8104 	beq.w	80088f2 <_dtoa_r+0xb5a>
 80086ea:	2e00      	cmp	r6, #0
 80086ec:	dd05      	ble.n	80086fa <_dtoa_r+0x962>
 80086ee:	4629      	mov	r1, r5
 80086f0:	4632      	mov	r2, r6
 80086f2:	4658      	mov	r0, fp
 80086f4:	f000 ffb8 	bl	8009668 <__lshift>
 80086f8:	4605      	mov	r5, r0
 80086fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d05a      	beq.n	80087b6 <_dtoa_r+0xa1e>
 8008700:	4658      	mov	r0, fp
 8008702:	6869      	ldr	r1, [r5, #4]
 8008704:	f000 fd5a 	bl	80091bc <_Balloc>
 8008708:	4606      	mov	r6, r0
 800870a:	b928      	cbnz	r0, 8008718 <_dtoa_r+0x980>
 800870c:	4602      	mov	r2, r0
 800870e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008712:	4b83      	ldr	r3, [pc, #524]	@ (8008920 <_dtoa_r+0xb88>)
 8008714:	f7ff bb54 	b.w	8007dc0 <_dtoa_r+0x28>
 8008718:	692a      	ldr	r2, [r5, #16]
 800871a:	f105 010c 	add.w	r1, r5, #12
 800871e:	3202      	adds	r2, #2
 8008720:	0092      	lsls	r2, r2, #2
 8008722:	300c      	adds	r0, #12
 8008724:	f7ff fa95 	bl	8007c52 <memcpy>
 8008728:	2201      	movs	r2, #1
 800872a:	4631      	mov	r1, r6
 800872c:	4658      	mov	r0, fp
 800872e:	f000 ff9b 	bl	8009668 <__lshift>
 8008732:	462f      	mov	r7, r5
 8008734:	4605      	mov	r5, r0
 8008736:	f10a 0301 	add.w	r3, sl, #1
 800873a:	9307      	str	r3, [sp, #28]
 800873c:	9b08      	ldr	r3, [sp, #32]
 800873e:	4453      	add	r3, sl
 8008740:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008742:	9b02      	ldr	r3, [sp, #8]
 8008744:	f003 0301 	and.w	r3, r3, #1
 8008748:	930a      	str	r3, [sp, #40]	@ 0x28
 800874a:	9b07      	ldr	r3, [sp, #28]
 800874c:	4621      	mov	r1, r4
 800874e:	3b01      	subs	r3, #1
 8008750:	4648      	mov	r0, r9
 8008752:	9302      	str	r3, [sp, #8]
 8008754:	f7ff fa96 	bl	8007c84 <quorem>
 8008758:	4639      	mov	r1, r7
 800875a:	9008      	str	r0, [sp, #32]
 800875c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008760:	4648      	mov	r0, r9
 8008762:	f000 ffed 	bl	8009740 <__mcmp>
 8008766:	462a      	mov	r2, r5
 8008768:	9009      	str	r0, [sp, #36]	@ 0x24
 800876a:	4621      	mov	r1, r4
 800876c:	4658      	mov	r0, fp
 800876e:	f001 f803 	bl	8009778 <__mdiff>
 8008772:	68c2      	ldr	r2, [r0, #12]
 8008774:	4606      	mov	r6, r0
 8008776:	bb02      	cbnz	r2, 80087ba <_dtoa_r+0xa22>
 8008778:	4601      	mov	r1, r0
 800877a:	4648      	mov	r0, r9
 800877c:	f000 ffe0 	bl	8009740 <__mcmp>
 8008780:	4602      	mov	r2, r0
 8008782:	4631      	mov	r1, r6
 8008784:	4658      	mov	r0, fp
 8008786:	920c      	str	r2, [sp, #48]	@ 0x30
 8008788:	f000 fd58 	bl	800923c <_Bfree>
 800878c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800878e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008790:	9e07      	ldr	r6, [sp, #28]
 8008792:	ea43 0102 	orr.w	r1, r3, r2
 8008796:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008798:	4319      	orrs	r1, r3
 800879a:	d110      	bne.n	80087be <_dtoa_r+0xa26>
 800879c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80087a0:	d029      	beq.n	80087f6 <_dtoa_r+0xa5e>
 80087a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	dd02      	ble.n	80087ae <_dtoa_r+0xa16>
 80087a8:	9b08      	ldr	r3, [sp, #32]
 80087aa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80087ae:	9b02      	ldr	r3, [sp, #8]
 80087b0:	f883 8000 	strb.w	r8, [r3]
 80087b4:	e63b      	b.n	800842e <_dtoa_r+0x696>
 80087b6:	4628      	mov	r0, r5
 80087b8:	e7bb      	b.n	8008732 <_dtoa_r+0x99a>
 80087ba:	2201      	movs	r2, #1
 80087bc:	e7e1      	b.n	8008782 <_dtoa_r+0x9ea>
 80087be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	db04      	blt.n	80087ce <_dtoa_r+0xa36>
 80087c4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80087c6:	430b      	orrs	r3, r1
 80087c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80087ca:	430b      	orrs	r3, r1
 80087cc:	d120      	bne.n	8008810 <_dtoa_r+0xa78>
 80087ce:	2a00      	cmp	r2, #0
 80087d0:	dded      	ble.n	80087ae <_dtoa_r+0xa16>
 80087d2:	4649      	mov	r1, r9
 80087d4:	2201      	movs	r2, #1
 80087d6:	4658      	mov	r0, fp
 80087d8:	f000 ff46 	bl	8009668 <__lshift>
 80087dc:	4621      	mov	r1, r4
 80087de:	4681      	mov	r9, r0
 80087e0:	f000 ffae 	bl	8009740 <__mcmp>
 80087e4:	2800      	cmp	r0, #0
 80087e6:	dc03      	bgt.n	80087f0 <_dtoa_r+0xa58>
 80087e8:	d1e1      	bne.n	80087ae <_dtoa_r+0xa16>
 80087ea:	f018 0f01 	tst.w	r8, #1
 80087ee:	d0de      	beq.n	80087ae <_dtoa_r+0xa16>
 80087f0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80087f4:	d1d8      	bne.n	80087a8 <_dtoa_r+0xa10>
 80087f6:	2339      	movs	r3, #57	@ 0x39
 80087f8:	9a02      	ldr	r2, [sp, #8]
 80087fa:	7013      	strb	r3, [r2, #0]
 80087fc:	4633      	mov	r3, r6
 80087fe:	461e      	mov	r6, r3
 8008800:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008804:	3b01      	subs	r3, #1
 8008806:	2a39      	cmp	r2, #57	@ 0x39
 8008808:	d052      	beq.n	80088b0 <_dtoa_r+0xb18>
 800880a:	3201      	adds	r2, #1
 800880c:	701a      	strb	r2, [r3, #0]
 800880e:	e60e      	b.n	800842e <_dtoa_r+0x696>
 8008810:	2a00      	cmp	r2, #0
 8008812:	dd07      	ble.n	8008824 <_dtoa_r+0xa8c>
 8008814:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008818:	d0ed      	beq.n	80087f6 <_dtoa_r+0xa5e>
 800881a:	9a02      	ldr	r2, [sp, #8]
 800881c:	f108 0301 	add.w	r3, r8, #1
 8008820:	7013      	strb	r3, [r2, #0]
 8008822:	e604      	b.n	800842e <_dtoa_r+0x696>
 8008824:	9b07      	ldr	r3, [sp, #28]
 8008826:	9a07      	ldr	r2, [sp, #28]
 8008828:	f803 8c01 	strb.w	r8, [r3, #-1]
 800882c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800882e:	4293      	cmp	r3, r2
 8008830:	d028      	beq.n	8008884 <_dtoa_r+0xaec>
 8008832:	4649      	mov	r1, r9
 8008834:	2300      	movs	r3, #0
 8008836:	220a      	movs	r2, #10
 8008838:	4658      	mov	r0, fp
 800883a:	f000 fd21 	bl	8009280 <__multadd>
 800883e:	42af      	cmp	r7, r5
 8008840:	4681      	mov	r9, r0
 8008842:	f04f 0300 	mov.w	r3, #0
 8008846:	f04f 020a 	mov.w	r2, #10
 800884a:	4639      	mov	r1, r7
 800884c:	4658      	mov	r0, fp
 800884e:	d107      	bne.n	8008860 <_dtoa_r+0xac8>
 8008850:	f000 fd16 	bl	8009280 <__multadd>
 8008854:	4607      	mov	r7, r0
 8008856:	4605      	mov	r5, r0
 8008858:	9b07      	ldr	r3, [sp, #28]
 800885a:	3301      	adds	r3, #1
 800885c:	9307      	str	r3, [sp, #28]
 800885e:	e774      	b.n	800874a <_dtoa_r+0x9b2>
 8008860:	f000 fd0e 	bl	8009280 <__multadd>
 8008864:	4629      	mov	r1, r5
 8008866:	4607      	mov	r7, r0
 8008868:	2300      	movs	r3, #0
 800886a:	220a      	movs	r2, #10
 800886c:	4658      	mov	r0, fp
 800886e:	f000 fd07 	bl	8009280 <__multadd>
 8008872:	4605      	mov	r5, r0
 8008874:	e7f0      	b.n	8008858 <_dtoa_r+0xac0>
 8008876:	9b08      	ldr	r3, [sp, #32]
 8008878:	2700      	movs	r7, #0
 800887a:	2b00      	cmp	r3, #0
 800887c:	bfcc      	ite	gt
 800887e:	461e      	movgt	r6, r3
 8008880:	2601      	movle	r6, #1
 8008882:	4456      	add	r6, sl
 8008884:	4649      	mov	r1, r9
 8008886:	2201      	movs	r2, #1
 8008888:	4658      	mov	r0, fp
 800888a:	f000 feed 	bl	8009668 <__lshift>
 800888e:	4621      	mov	r1, r4
 8008890:	4681      	mov	r9, r0
 8008892:	f000 ff55 	bl	8009740 <__mcmp>
 8008896:	2800      	cmp	r0, #0
 8008898:	dcb0      	bgt.n	80087fc <_dtoa_r+0xa64>
 800889a:	d102      	bne.n	80088a2 <_dtoa_r+0xb0a>
 800889c:	f018 0f01 	tst.w	r8, #1
 80088a0:	d1ac      	bne.n	80087fc <_dtoa_r+0xa64>
 80088a2:	4633      	mov	r3, r6
 80088a4:	461e      	mov	r6, r3
 80088a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088aa:	2a30      	cmp	r2, #48	@ 0x30
 80088ac:	d0fa      	beq.n	80088a4 <_dtoa_r+0xb0c>
 80088ae:	e5be      	b.n	800842e <_dtoa_r+0x696>
 80088b0:	459a      	cmp	sl, r3
 80088b2:	d1a4      	bne.n	80087fe <_dtoa_r+0xa66>
 80088b4:	9b04      	ldr	r3, [sp, #16]
 80088b6:	3301      	adds	r3, #1
 80088b8:	9304      	str	r3, [sp, #16]
 80088ba:	2331      	movs	r3, #49	@ 0x31
 80088bc:	f88a 3000 	strb.w	r3, [sl]
 80088c0:	e5b5      	b.n	800842e <_dtoa_r+0x696>
 80088c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80088c4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008924 <_dtoa_r+0xb8c>
 80088c8:	b11b      	cbz	r3, 80088d2 <_dtoa_r+0xb3a>
 80088ca:	f10a 0308 	add.w	r3, sl, #8
 80088ce:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80088d0:	6013      	str	r3, [r2, #0]
 80088d2:	4650      	mov	r0, sl
 80088d4:	b017      	add	sp, #92	@ 0x5c
 80088d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80088dc:	2b01      	cmp	r3, #1
 80088de:	f77f ae3d 	ble.w	800855c <_dtoa_r+0x7c4>
 80088e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80088e6:	2001      	movs	r0, #1
 80088e8:	e65b      	b.n	80085a2 <_dtoa_r+0x80a>
 80088ea:	9b08      	ldr	r3, [sp, #32]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f77f aed6 	ble.w	800869e <_dtoa_r+0x906>
 80088f2:	4656      	mov	r6, sl
 80088f4:	4621      	mov	r1, r4
 80088f6:	4648      	mov	r0, r9
 80088f8:	f7ff f9c4 	bl	8007c84 <quorem>
 80088fc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008900:	9b08      	ldr	r3, [sp, #32]
 8008902:	f806 8b01 	strb.w	r8, [r6], #1
 8008906:	eba6 020a 	sub.w	r2, r6, sl
 800890a:	4293      	cmp	r3, r2
 800890c:	ddb3      	ble.n	8008876 <_dtoa_r+0xade>
 800890e:	4649      	mov	r1, r9
 8008910:	2300      	movs	r3, #0
 8008912:	220a      	movs	r2, #10
 8008914:	4658      	mov	r0, fp
 8008916:	f000 fcb3 	bl	8009280 <__multadd>
 800891a:	4681      	mov	r9, r0
 800891c:	e7ea      	b.n	80088f4 <_dtoa_r+0xb5c>
 800891e:	bf00      	nop
 8008920:	0800cb56 	.word	0x0800cb56
 8008924:	0800cada 	.word	0x0800cada

08008928 <_free_r>:
 8008928:	b538      	push	{r3, r4, r5, lr}
 800892a:	4605      	mov	r5, r0
 800892c:	2900      	cmp	r1, #0
 800892e:	d040      	beq.n	80089b2 <_free_r+0x8a>
 8008930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008934:	1f0c      	subs	r4, r1, #4
 8008936:	2b00      	cmp	r3, #0
 8008938:	bfb8      	it	lt
 800893a:	18e4      	addlt	r4, r4, r3
 800893c:	f000 fc32 	bl	80091a4 <__malloc_lock>
 8008940:	4a1c      	ldr	r2, [pc, #112]	@ (80089b4 <_free_r+0x8c>)
 8008942:	6813      	ldr	r3, [r2, #0]
 8008944:	b933      	cbnz	r3, 8008954 <_free_r+0x2c>
 8008946:	6063      	str	r3, [r4, #4]
 8008948:	6014      	str	r4, [r2, #0]
 800894a:	4628      	mov	r0, r5
 800894c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008950:	f000 bc2e 	b.w	80091b0 <__malloc_unlock>
 8008954:	42a3      	cmp	r3, r4
 8008956:	d908      	bls.n	800896a <_free_r+0x42>
 8008958:	6820      	ldr	r0, [r4, #0]
 800895a:	1821      	adds	r1, r4, r0
 800895c:	428b      	cmp	r3, r1
 800895e:	bf01      	itttt	eq
 8008960:	6819      	ldreq	r1, [r3, #0]
 8008962:	685b      	ldreq	r3, [r3, #4]
 8008964:	1809      	addeq	r1, r1, r0
 8008966:	6021      	streq	r1, [r4, #0]
 8008968:	e7ed      	b.n	8008946 <_free_r+0x1e>
 800896a:	461a      	mov	r2, r3
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	b10b      	cbz	r3, 8008974 <_free_r+0x4c>
 8008970:	42a3      	cmp	r3, r4
 8008972:	d9fa      	bls.n	800896a <_free_r+0x42>
 8008974:	6811      	ldr	r1, [r2, #0]
 8008976:	1850      	adds	r0, r2, r1
 8008978:	42a0      	cmp	r0, r4
 800897a:	d10b      	bne.n	8008994 <_free_r+0x6c>
 800897c:	6820      	ldr	r0, [r4, #0]
 800897e:	4401      	add	r1, r0
 8008980:	1850      	adds	r0, r2, r1
 8008982:	4283      	cmp	r3, r0
 8008984:	6011      	str	r1, [r2, #0]
 8008986:	d1e0      	bne.n	800894a <_free_r+0x22>
 8008988:	6818      	ldr	r0, [r3, #0]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	4408      	add	r0, r1
 800898e:	6010      	str	r0, [r2, #0]
 8008990:	6053      	str	r3, [r2, #4]
 8008992:	e7da      	b.n	800894a <_free_r+0x22>
 8008994:	d902      	bls.n	800899c <_free_r+0x74>
 8008996:	230c      	movs	r3, #12
 8008998:	602b      	str	r3, [r5, #0]
 800899a:	e7d6      	b.n	800894a <_free_r+0x22>
 800899c:	6820      	ldr	r0, [r4, #0]
 800899e:	1821      	adds	r1, r4, r0
 80089a0:	428b      	cmp	r3, r1
 80089a2:	bf01      	itttt	eq
 80089a4:	6819      	ldreq	r1, [r3, #0]
 80089a6:	685b      	ldreq	r3, [r3, #4]
 80089a8:	1809      	addeq	r1, r1, r0
 80089aa:	6021      	streq	r1, [r4, #0]
 80089ac:	6063      	str	r3, [r4, #4]
 80089ae:	6054      	str	r4, [r2, #4]
 80089b0:	e7cb      	b.n	800894a <_free_r+0x22>
 80089b2:	bd38      	pop	{r3, r4, r5, pc}
 80089b4:	20000bc4 	.word	0x20000bc4

080089b8 <rshift>:
 80089b8:	6903      	ldr	r3, [r0, #16]
 80089ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80089c2:	f100 0414 	add.w	r4, r0, #20
 80089c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80089ca:	dd46      	ble.n	8008a5a <rshift+0xa2>
 80089cc:	f011 011f 	ands.w	r1, r1, #31
 80089d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80089d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80089d8:	d10c      	bne.n	80089f4 <rshift+0x3c>
 80089da:	4629      	mov	r1, r5
 80089dc:	f100 0710 	add.w	r7, r0, #16
 80089e0:	42b1      	cmp	r1, r6
 80089e2:	d335      	bcc.n	8008a50 <rshift+0x98>
 80089e4:	1a9b      	subs	r3, r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	1eea      	subs	r2, r5, #3
 80089ea:	4296      	cmp	r6, r2
 80089ec:	bf38      	it	cc
 80089ee:	2300      	movcc	r3, #0
 80089f0:	4423      	add	r3, r4
 80089f2:	e015      	b.n	8008a20 <rshift+0x68>
 80089f4:	46a1      	mov	r9, r4
 80089f6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80089fa:	f1c1 0820 	rsb	r8, r1, #32
 80089fe:	40cf      	lsrs	r7, r1
 8008a00:	f105 0e04 	add.w	lr, r5, #4
 8008a04:	4576      	cmp	r6, lr
 8008a06:	46f4      	mov	ip, lr
 8008a08:	d816      	bhi.n	8008a38 <rshift+0x80>
 8008a0a:	1a9a      	subs	r2, r3, r2
 8008a0c:	0092      	lsls	r2, r2, #2
 8008a0e:	3a04      	subs	r2, #4
 8008a10:	3501      	adds	r5, #1
 8008a12:	42ae      	cmp	r6, r5
 8008a14:	bf38      	it	cc
 8008a16:	2200      	movcc	r2, #0
 8008a18:	18a3      	adds	r3, r4, r2
 8008a1a:	50a7      	str	r7, [r4, r2]
 8008a1c:	b107      	cbz	r7, 8008a20 <rshift+0x68>
 8008a1e:	3304      	adds	r3, #4
 8008a20:	42a3      	cmp	r3, r4
 8008a22:	eba3 0204 	sub.w	r2, r3, r4
 8008a26:	bf08      	it	eq
 8008a28:	2300      	moveq	r3, #0
 8008a2a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008a2e:	6102      	str	r2, [r0, #16]
 8008a30:	bf08      	it	eq
 8008a32:	6143      	streq	r3, [r0, #20]
 8008a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a38:	f8dc c000 	ldr.w	ip, [ip]
 8008a3c:	fa0c fc08 	lsl.w	ip, ip, r8
 8008a40:	ea4c 0707 	orr.w	r7, ip, r7
 8008a44:	f849 7b04 	str.w	r7, [r9], #4
 8008a48:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008a4c:	40cf      	lsrs	r7, r1
 8008a4e:	e7d9      	b.n	8008a04 <rshift+0x4c>
 8008a50:	f851 cb04 	ldr.w	ip, [r1], #4
 8008a54:	f847 cf04 	str.w	ip, [r7, #4]!
 8008a58:	e7c2      	b.n	80089e0 <rshift+0x28>
 8008a5a:	4623      	mov	r3, r4
 8008a5c:	e7e0      	b.n	8008a20 <rshift+0x68>

08008a5e <__hexdig_fun>:
 8008a5e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008a62:	2b09      	cmp	r3, #9
 8008a64:	d802      	bhi.n	8008a6c <__hexdig_fun+0xe>
 8008a66:	3820      	subs	r0, #32
 8008a68:	b2c0      	uxtb	r0, r0
 8008a6a:	4770      	bx	lr
 8008a6c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008a70:	2b05      	cmp	r3, #5
 8008a72:	d801      	bhi.n	8008a78 <__hexdig_fun+0x1a>
 8008a74:	3847      	subs	r0, #71	@ 0x47
 8008a76:	e7f7      	b.n	8008a68 <__hexdig_fun+0xa>
 8008a78:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008a7c:	2b05      	cmp	r3, #5
 8008a7e:	d801      	bhi.n	8008a84 <__hexdig_fun+0x26>
 8008a80:	3827      	subs	r0, #39	@ 0x27
 8008a82:	e7f1      	b.n	8008a68 <__hexdig_fun+0xa>
 8008a84:	2000      	movs	r0, #0
 8008a86:	4770      	bx	lr

08008a88 <__gethex>:
 8008a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8c:	468a      	mov	sl, r1
 8008a8e:	4690      	mov	r8, r2
 8008a90:	b085      	sub	sp, #20
 8008a92:	9302      	str	r3, [sp, #8]
 8008a94:	680b      	ldr	r3, [r1, #0]
 8008a96:	9001      	str	r0, [sp, #4]
 8008a98:	1c9c      	adds	r4, r3, #2
 8008a9a:	46a1      	mov	r9, r4
 8008a9c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008aa0:	2830      	cmp	r0, #48	@ 0x30
 8008aa2:	d0fa      	beq.n	8008a9a <__gethex+0x12>
 8008aa4:	eba9 0303 	sub.w	r3, r9, r3
 8008aa8:	f1a3 0b02 	sub.w	fp, r3, #2
 8008aac:	f7ff ffd7 	bl	8008a5e <__hexdig_fun>
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d168      	bne.n	8008b88 <__gethex+0x100>
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	4648      	mov	r0, r9
 8008aba:	499f      	ldr	r1, [pc, #636]	@ (8008d38 <__gethex+0x2b0>)
 8008abc:	f7ff f831 	bl	8007b22 <strncmp>
 8008ac0:	4607      	mov	r7, r0
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	d167      	bne.n	8008b96 <__gethex+0x10e>
 8008ac6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008aca:	4626      	mov	r6, r4
 8008acc:	f7ff ffc7 	bl	8008a5e <__hexdig_fun>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	d062      	beq.n	8008b9a <__gethex+0x112>
 8008ad4:	4623      	mov	r3, r4
 8008ad6:	7818      	ldrb	r0, [r3, #0]
 8008ad8:	4699      	mov	r9, r3
 8008ada:	2830      	cmp	r0, #48	@ 0x30
 8008adc:	f103 0301 	add.w	r3, r3, #1
 8008ae0:	d0f9      	beq.n	8008ad6 <__gethex+0x4e>
 8008ae2:	f7ff ffbc 	bl	8008a5e <__hexdig_fun>
 8008ae6:	fab0 f580 	clz	r5, r0
 8008aea:	f04f 0b01 	mov.w	fp, #1
 8008aee:	096d      	lsrs	r5, r5, #5
 8008af0:	464a      	mov	r2, r9
 8008af2:	4616      	mov	r6, r2
 8008af4:	7830      	ldrb	r0, [r6, #0]
 8008af6:	3201      	adds	r2, #1
 8008af8:	f7ff ffb1 	bl	8008a5e <__hexdig_fun>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d1f8      	bne.n	8008af2 <__gethex+0x6a>
 8008b00:	2201      	movs	r2, #1
 8008b02:	4630      	mov	r0, r6
 8008b04:	498c      	ldr	r1, [pc, #560]	@ (8008d38 <__gethex+0x2b0>)
 8008b06:	f7ff f80c 	bl	8007b22 <strncmp>
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	d13f      	bne.n	8008b8e <__gethex+0x106>
 8008b0e:	b944      	cbnz	r4, 8008b22 <__gethex+0x9a>
 8008b10:	1c74      	adds	r4, r6, #1
 8008b12:	4622      	mov	r2, r4
 8008b14:	4616      	mov	r6, r2
 8008b16:	7830      	ldrb	r0, [r6, #0]
 8008b18:	3201      	adds	r2, #1
 8008b1a:	f7ff ffa0 	bl	8008a5e <__hexdig_fun>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d1f8      	bne.n	8008b14 <__gethex+0x8c>
 8008b22:	1ba4      	subs	r4, r4, r6
 8008b24:	00a7      	lsls	r7, r4, #2
 8008b26:	7833      	ldrb	r3, [r6, #0]
 8008b28:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008b2c:	2b50      	cmp	r3, #80	@ 0x50
 8008b2e:	d13e      	bne.n	8008bae <__gethex+0x126>
 8008b30:	7873      	ldrb	r3, [r6, #1]
 8008b32:	2b2b      	cmp	r3, #43	@ 0x2b
 8008b34:	d033      	beq.n	8008b9e <__gethex+0x116>
 8008b36:	2b2d      	cmp	r3, #45	@ 0x2d
 8008b38:	d034      	beq.n	8008ba4 <__gethex+0x11c>
 8008b3a:	2400      	movs	r4, #0
 8008b3c:	1c71      	adds	r1, r6, #1
 8008b3e:	7808      	ldrb	r0, [r1, #0]
 8008b40:	f7ff ff8d 	bl	8008a5e <__hexdig_fun>
 8008b44:	1e43      	subs	r3, r0, #1
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	2b18      	cmp	r3, #24
 8008b4a:	d830      	bhi.n	8008bae <__gethex+0x126>
 8008b4c:	f1a0 0210 	sub.w	r2, r0, #16
 8008b50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008b54:	f7ff ff83 	bl	8008a5e <__hexdig_fun>
 8008b58:	f100 3cff 	add.w	ip, r0, #4294967295
 8008b5c:	fa5f fc8c 	uxtb.w	ip, ip
 8008b60:	f1bc 0f18 	cmp.w	ip, #24
 8008b64:	f04f 030a 	mov.w	r3, #10
 8008b68:	d91e      	bls.n	8008ba8 <__gethex+0x120>
 8008b6a:	b104      	cbz	r4, 8008b6e <__gethex+0xe6>
 8008b6c:	4252      	negs	r2, r2
 8008b6e:	4417      	add	r7, r2
 8008b70:	f8ca 1000 	str.w	r1, [sl]
 8008b74:	b1ed      	cbz	r5, 8008bb2 <__gethex+0x12a>
 8008b76:	f1bb 0f00 	cmp.w	fp, #0
 8008b7a:	bf0c      	ite	eq
 8008b7c:	2506      	moveq	r5, #6
 8008b7e:	2500      	movne	r5, #0
 8008b80:	4628      	mov	r0, r5
 8008b82:	b005      	add	sp, #20
 8008b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b88:	2500      	movs	r5, #0
 8008b8a:	462c      	mov	r4, r5
 8008b8c:	e7b0      	b.n	8008af0 <__gethex+0x68>
 8008b8e:	2c00      	cmp	r4, #0
 8008b90:	d1c7      	bne.n	8008b22 <__gethex+0x9a>
 8008b92:	4627      	mov	r7, r4
 8008b94:	e7c7      	b.n	8008b26 <__gethex+0x9e>
 8008b96:	464e      	mov	r6, r9
 8008b98:	462f      	mov	r7, r5
 8008b9a:	2501      	movs	r5, #1
 8008b9c:	e7c3      	b.n	8008b26 <__gethex+0x9e>
 8008b9e:	2400      	movs	r4, #0
 8008ba0:	1cb1      	adds	r1, r6, #2
 8008ba2:	e7cc      	b.n	8008b3e <__gethex+0xb6>
 8008ba4:	2401      	movs	r4, #1
 8008ba6:	e7fb      	b.n	8008ba0 <__gethex+0x118>
 8008ba8:	fb03 0002 	mla	r0, r3, r2, r0
 8008bac:	e7ce      	b.n	8008b4c <__gethex+0xc4>
 8008bae:	4631      	mov	r1, r6
 8008bb0:	e7de      	b.n	8008b70 <__gethex+0xe8>
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	eba6 0309 	sub.w	r3, r6, r9
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	2b07      	cmp	r3, #7
 8008bbc:	dc0a      	bgt.n	8008bd4 <__gethex+0x14c>
 8008bbe:	9801      	ldr	r0, [sp, #4]
 8008bc0:	f000 fafc 	bl	80091bc <_Balloc>
 8008bc4:	4604      	mov	r4, r0
 8008bc6:	b940      	cbnz	r0, 8008bda <__gethex+0x152>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	21e4      	movs	r1, #228	@ 0xe4
 8008bcc:	4b5b      	ldr	r3, [pc, #364]	@ (8008d3c <__gethex+0x2b4>)
 8008bce:	485c      	ldr	r0, [pc, #368]	@ (8008d40 <__gethex+0x2b8>)
 8008bd0:	f001 f9d0 	bl	8009f74 <__assert_func>
 8008bd4:	3101      	adds	r1, #1
 8008bd6:	105b      	asrs	r3, r3, #1
 8008bd8:	e7ef      	b.n	8008bba <__gethex+0x132>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f100 0a14 	add.w	sl, r0, #20
 8008be0:	4655      	mov	r5, sl
 8008be2:	469b      	mov	fp, r3
 8008be4:	45b1      	cmp	r9, r6
 8008be6:	d337      	bcc.n	8008c58 <__gethex+0x1d0>
 8008be8:	f845 bb04 	str.w	fp, [r5], #4
 8008bec:	eba5 050a 	sub.w	r5, r5, sl
 8008bf0:	10ad      	asrs	r5, r5, #2
 8008bf2:	6125      	str	r5, [r4, #16]
 8008bf4:	4658      	mov	r0, fp
 8008bf6:	f000 fbd3 	bl	80093a0 <__hi0bits>
 8008bfa:	016d      	lsls	r5, r5, #5
 8008bfc:	f8d8 6000 	ldr.w	r6, [r8]
 8008c00:	1a2d      	subs	r5, r5, r0
 8008c02:	42b5      	cmp	r5, r6
 8008c04:	dd54      	ble.n	8008cb0 <__gethex+0x228>
 8008c06:	1bad      	subs	r5, r5, r6
 8008c08:	4629      	mov	r1, r5
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f000 ff5b 	bl	8009ac6 <__any_on>
 8008c10:	4681      	mov	r9, r0
 8008c12:	b178      	cbz	r0, 8008c34 <__gethex+0x1ac>
 8008c14:	f04f 0901 	mov.w	r9, #1
 8008c18:	1e6b      	subs	r3, r5, #1
 8008c1a:	1159      	asrs	r1, r3, #5
 8008c1c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008c20:	f003 021f 	and.w	r2, r3, #31
 8008c24:	fa09 f202 	lsl.w	r2, r9, r2
 8008c28:	420a      	tst	r2, r1
 8008c2a:	d003      	beq.n	8008c34 <__gethex+0x1ac>
 8008c2c:	454b      	cmp	r3, r9
 8008c2e:	dc36      	bgt.n	8008c9e <__gethex+0x216>
 8008c30:	f04f 0902 	mov.w	r9, #2
 8008c34:	4629      	mov	r1, r5
 8008c36:	4620      	mov	r0, r4
 8008c38:	f7ff febe 	bl	80089b8 <rshift>
 8008c3c:	442f      	add	r7, r5
 8008c3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c42:	42bb      	cmp	r3, r7
 8008c44:	da42      	bge.n	8008ccc <__gethex+0x244>
 8008c46:	4621      	mov	r1, r4
 8008c48:	9801      	ldr	r0, [sp, #4]
 8008c4a:	f000 faf7 	bl	800923c <_Bfree>
 8008c4e:	2300      	movs	r3, #0
 8008c50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c52:	25a3      	movs	r5, #163	@ 0xa3
 8008c54:	6013      	str	r3, [r2, #0]
 8008c56:	e793      	b.n	8008b80 <__gethex+0xf8>
 8008c58:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008c5c:	2a2e      	cmp	r2, #46	@ 0x2e
 8008c5e:	d012      	beq.n	8008c86 <__gethex+0x1fe>
 8008c60:	2b20      	cmp	r3, #32
 8008c62:	d104      	bne.n	8008c6e <__gethex+0x1e6>
 8008c64:	f845 bb04 	str.w	fp, [r5], #4
 8008c68:	f04f 0b00 	mov.w	fp, #0
 8008c6c:	465b      	mov	r3, fp
 8008c6e:	7830      	ldrb	r0, [r6, #0]
 8008c70:	9303      	str	r3, [sp, #12]
 8008c72:	f7ff fef4 	bl	8008a5e <__hexdig_fun>
 8008c76:	9b03      	ldr	r3, [sp, #12]
 8008c78:	f000 000f 	and.w	r0, r0, #15
 8008c7c:	4098      	lsls	r0, r3
 8008c7e:	ea4b 0b00 	orr.w	fp, fp, r0
 8008c82:	3304      	adds	r3, #4
 8008c84:	e7ae      	b.n	8008be4 <__gethex+0x15c>
 8008c86:	45b1      	cmp	r9, r6
 8008c88:	d8ea      	bhi.n	8008c60 <__gethex+0x1d8>
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	492a      	ldr	r1, [pc, #168]	@ (8008d38 <__gethex+0x2b0>)
 8008c90:	9303      	str	r3, [sp, #12]
 8008c92:	f7fe ff46 	bl	8007b22 <strncmp>
 8008c96:	9b03      	ldr	r3, [sp, #12]
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	d1e1      	bne.n	8008c60 <__gethex+0x1d8>
 8008c9c:	e7a2      	b.n	8008be4 <__gethex+0x15c>
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	1ea9      	subs	r1, r5, #2
 8008ca2:	f000 ff10 	bl	8009ac6 <__any_on>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d0c2      	beq.n	8008c30 <__gethex+0x1a8>
 8008caa:	f04f 0903 	mov.w	r9, #3
 8008cae:	e7c1      	b.n	8008c34 <__gethex+0x1ac>
 8008cb0:	da09      	bge.n	8008cc6 <__gethex+0x23e>
 8008cb2:	1b75      	subs	r5, r6, r5
 8008cb4:	4621      	mov	r1, r4
 8008cb6:	462a      	mov	r2, r5
 8008cb8:	9801      	ldr	r0, [sp, #4]
 8008cba:	f000 fcd5 	bl	8009668 <__lshift>
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	1b7f      	subs	r7, r7, r5
 8008cc2:	f100 0a14 	add.w	sl, r0, #20
 8008cc6:	f04f 0900 	mov.w	r9, #0
 8008cca:	e7b8      	b.n	8008c3e <__gethex+0x1b6>
 8008ccc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008cd0:	42bd      	cmp	r5, r7
 8008cd2:	dd6f      	ble.n	8008db4 <__gethex+0x32c>
 8008cd4:	1bed      	subs	r5, r5, r7
 8008cd6:	42ae      	cmp	r6, r5
 8008cd8:	dc34      	bgt.n	8008d44 <__gethex+0x2bc>
 8008cda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d022      	beq.n	8008d28 <__gethex+0x2a0>
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	d024      	beq.n	8008d30 <__gethex+0x2a8>
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d115      	bne.n	8008d16 <__gethex+0x28e>
 8008cea:	42ae      	cmp	r6, r5
 8008cec:	d113      	bne.n	8008d16 <__gethex+0x28e>
 8008cee:	2e01      	cmp	r6, #1
 8008cf0:	d10b      	bne.n	8008d0a <__gethex+0x282>
 8008cf2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008cf6:	9a02      	ldr	r2, [sp, #8]
 8008cf8:	2562      	movs	r5, #98	@ 0x62
 8008cfa:	6013      	str	r3, [r2, #0]
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	6123      	str	r3, [r4, #16]
 8008d00:	f8ca 3000 	str.w	r3, [sl]
 8008d04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d06:	601c      	str	r4, [r3, #0]
 8008d08:	e73a      	b.n	8008b80 <__gethex+0xf8>
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	1e71      	subs	r1, r6, #1
 8008d0e:	f000 feda 	bl	8009ac6 <__any_on>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	d1ed      	bne.n	8008cf2 <__gethex+0x26a>
 8008d16:	4621      	mov	r1, r4
 8008d18:	9801      	ldr	r0, [sp, #4]
 8008d1a:	f000 fa8f 	bl	800923c <_Bfree>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d22:	2550      	movs	r5, #80	@ 0x50
 8008d24:	6013      	str	r3, [r2, #0]
 8008d26:	e72b      	b.n	8008b80 <__gethex+0xf8>
 8008d28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1f3      	bne.n	8008d16 <__gethex+0x28e>
 8008d2e:	e7e0      	b.n	8008cf2 <__gethex+0x26a>
 8008d30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1dd      	bne.n	8008cf2 <__gethex+0x26a>
 8008d36:	e7ee      	b.n	8008d16 <__gethex+0x28e>
 8008d38:	0800c946 	.word	0x0800c946
 8008d3c:	0800cb56 	.word	0x0800cb56
 8008d40:	0800cb67 	.word	0x0800cb67
 8008d44:	1e6f      	subs	r7, r5, #1
 8008d46:	f1b9 0f00 	cmp.w	r9, #0
 8008d4a:	d130      	bne.n	8008dae <__gethex+0x326>
 8008d4c:	b127      	cbz	r7, 8008d58 <__gethex+0x2d0>
 8008d4e:	4639      	mov	r1, r7
 8008d50:	4620      	mov	r0, r4
 8008d52:	f000 feb8 	bl	8009ac6 <__any_on>
 8008d56:	4681      	mov	r9, r0
 8008d58:	2301      	movs	r3, #1
 8008d5a:	4629      	mov	r1, r5
 8008d5c:	1b76      	subs	r6, r6, r5
 8008d5e:	2502      	movs	r5, #2
 8008d60:	117a      	asrs	r2, r7, #5
 8008d62:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008d66:	f007 071f 	and.w	r7, r7, #31
 8008d6a:	40bb      	lsls	r3, r7
 8008d6c:	4213      	tst	r3, r2
 8008d6e:	4620      	mov	r0, r4
 8008d70:	bf18      	it	ne
 8008d72:	f049 0902 	orrne.w	r9, r9, #2
 8008d76:	f7ff fe1f 	bl	80089b8 <rshift>
 8008d7a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008d7e:	f1b9 0f00 	cmp.w	r9, #0
 8008d82:	d047      	beq.n	8008e14 <__gethex+0x38c>
 8008d84:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d015      	beq.n	8008db8 <__gethex+0x330>
 8008d8c:	2b03      	cmp	r3, #3
 8008d8e:	d017      	beq.n	8008dc0 <__gethex+0x338>
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d109      	bne.n	8008da8 <__gethex+0x320>
 8008d94:	f019 0f02 	tst.w	r9, #2
 8008d98:	d006      	beq.n	8008da8 <__gethex+0x320>
 8008d9a:	f8da 3000 	ldr.w	r3, [sl]
 8008d9e:	ea49 0903 	orr.w	r9, r9, r3
 8008da2:	f019 0f01 	tst.w	r9, #1
 8008da6:	d10e      	bne.n	8008dc6 <__gethex+0x33e>
 8008da8:	f045 0510 	orr.w	r5, r5, #16
 8008dac:	e032      	b.n	8008e14 <__gethex+0x38c>
 8008dae:	f04f 0901 	mov.w	r9, #1
 8008db2:	e7d1      	b.n	8008d58 <__gethex+0x2d0>
 8008db4:	2501      	movs	r5, #1
 8008db6:	e7e2      	b.n	8008d7e <__gethex+0x2f6>
 8008db8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dba:	f1c3 0301 	rsb	r3, r3, #1
 8008dbe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008dc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d0f0      	beq.n	8008da8 <__gethex+0x320>
 8008dc6:	f04f 0c00 	mov.w	ip, #0
 8008dca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008dce:	f104 0314 	add.w	r3, r4, #20
 8008dd2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008dd6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008de0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008de4:	d01b      	beq.n	8008e1e <__gethex+0x396>
 8008de6:	3201      	adds	r2, #1
 8008de8:	6002      	str	r2, [r0, #0]
 8008dea:	2d02      	cmp	r5, #2
 8008dec:	f104 0314 	add.w	r3, r4, #20
 8008df0:	d13c      	bne.n	8008e6c <__gethex+0x3e4>
 8008df2:	f8d8 2000 	ldr.w	r2, [r8]
 8008df6:	3a01      	subs	r2, #1
 8008df8:	42b2      	cmp	r2, r6
 8008dfa:	d109      	bne.n	8008e10 <__gethex+0x388>
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	1171      	asrs	r1, r6, #5
 8008e00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e04:	f006 061f 	and.w	r6, r6, #31
 8008e08:	fa02 f606 	lsl.w	r6, r2, r6
 8008e0c:	421e      	tst	r6, r3
 8008e0e:	d13a      	bne.n	8008e86 <__gethex+0x3fe>
 8008e10:	f045 0520 	orr.w	r5, r5, #32
 8008e14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e16:	601c      	str	r4, [r3, #0]
 8008e18:	9b02      	ldr	r3, [sp, #8]
 8008e1a:	601f      	str	r7, [r3, #0]
 8008e1c:	e6b0      	b.n	8008b80 <__gethex+0xf8>
 8008e1e:	4299      	cmp	r1, r3
 8008e20:	f843 cc04 	str.w	ip, [r3, #-4]
 8008e24:	d8d9      	bhi.n	8008dda <__gethex+0x352>
 8008e26:	68a3      	ldr	r3, [r4, #8]
 8008e28:	459b      	cmp	fp, r3
 8008e2a:	db17      	blt.n	8008e5c <__gethex+0x3d4>
 8008e2c:	6861      	ldr	r1, [r4, #4]
 8008e2e:	9801      	ldr	r0, [sp, #4]
 8008e30:	3101      	adds	r1, #1
 8008e32:	f000 f9c3 	bl	80091bc <_Balloc>
 8008e36:	4681      	mov	r9, r0
 8008e38:	b918      	cbnz	r0, 8008e42 <__gethex+0x3ba>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	2184      	movs	r1, #132	@ 0x84
 8008e3e:	4b19      	ldr	r3, [pc, #100]	@ (8008ea4 <__gethex+0x41c>)
 8008e40:	e6c5      	b.n	8008bce <__gethex+0x146>
 8008e42:	6922      	ldr	r2, [r4, #16]
 8008e44:	f104 010c 	add.w	r1, r4, #12
 8008e48:	3202      	adds	r2, #2
 8008e4a:	0092      	lsls	r2, r2, #2
 8008e4c:	300c      	adds	r0, #12
 8008e4e:	f7fe ff00 	bl	8007c52 <memcpy>
 8008e52:	4621      	mov	r1, r4
 8008e54:	9801      	ldr	r0, [sp, #4]
 8008e56:	f000 f9f1 	bl	800923c <_Bfree>
 8008e5a:	464c      	mov	r4, r9
 8008e5c:	6923      	ldr	r3, [r4, #16]
 8008e5e:	1c5a      	adds	r2, r3, #1
 8008e60:	6122      	str	r2, [r4, #16]
 8008e62:	2201      	movs	r2, #1
 8008e64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e68:	615a      	str	r2, [r3, #20]
 8008e6a:	e7be      	b.n	8008dea <__gethex+0x362>
 8008e6c:	6922      	ldr	r2, [r4, #16]
 8008e6e:	455a      	cmp	r2, fp
 8008e70:	dd0b      	ble.n	8008e8a <__gethex+0x402>
 8008e72:	2101      	movs	r1, #1
 8008e74:	4620      	mov	r0, r4
 8008e76:	f7ff fd9f 	bl	80089b8 <rshift>
 8008e7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e7e:	3701      	adds	r7, #1
 8008e80:	42bb      	cmp	r3, r7
 8008e82:	f6ff aee0 	blt.w	8008c46 <__gethex+0x1be>
 8008e86:	2501      	movs	r5, #1
 8008e88:	e7c2      	b.n	8008e10 <__gethex+0x388>
 8008e8a:	f016 061f 	ands.w	r6, r6, #31
 8008e8e:	d0fa      	beq.n	8008e86 <__gethex+0x3fe>
 8008e90:	4453      	add	r3, sl
 8008e92:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008e96:	f000 fa83 	bl	80093a0 <__hi0bits>
 8008e9a:	f1c6 0620 	rsb	r6, r6, #32
 8008e9e:	42b0      	cmp	r0, r6
 8008ea0:	dbe7      	blt.n	8008e72 <__gethex+0x3ea>
 8008ea2:	e7f0      	b.n	8008e86 <__gethex+0x3fe>
 8008ea4:	0800cb56 	.word	0x0800cb56

08008ea8 <L_shift>:
 8008ea8:	f1c2 0208 	rsb	r2, r2, #8
 8008eac:	0092      	lsls	r2, r2, #2
 8008eae:	b570      	push	{r4, r5, r6, lr}
 8008eb0:	f1c2 0620 	rsb	r6, r2, #32
 8008eb4:	6843      	ldr	r3, [r0, #4]
 8008eb6:	6804      	ldr	r4, [r0, #0]
 8008eb8:	fa03 f506 	lsl.w	r5, r3, r6
 8008ebc:	432c      	orrs	r4, r5
 8008ebe:	40d3      	lsrs	r3, r2
 8008ec0:	6004      	str	r4, [r0, #0]
 8008ec2:	f840 3f04 	str.w	r3, [r0, #4]!
 8008ec6:	4288      	cmp	r0, r1
 8008ec8:	d3f4      	bcc.n	8008eb4 <L_shift+0xc>
 8008eca:	bd70      	pop	{r4, r5, r6, pc}

08008ecc <__match>:
 8008ecc:	b530      	push	{r4, r5, lr}
 8008ece:	6803      	ldr	r3, [r0, #0]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ed6:	b914      	cbnz	r4, 8008ede <__match+0x12>
 8008ed8:	6003      	str	r3, [r0, #0]
 8008eda:	2001      	movs	r0, #1
 8008edc:	bd30      	pop	{r4, r5, pc}
 8008ede:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ee2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008ee6:	2d19      	cmp	r5, #25
 8008ee8:	bf98      	it	ls
 8008eea:	3220      	addls	r2, #32
 8008eec:	42a2      	cmp	r2, r4
 8008eee:	d0f0      	beq.n	8008ed2 <__match+0x6>
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	e7f3      	b.n	8008edc <__match+0x10>

08008ef4 <__hexnan>:
 8008ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef8:	2500      	movs	r5, #0
 8008efa:	680b      	ldr	r3, [r1, #0]
 8008efc:	4682      	mov	sl, r0
 8008efe:	115e      	asrs	r6, r3, #5
 8008f00:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008f04:	f013 031f 	ands.w	r3, r3, #31
 8008f08:	bf18      	it	ne
 8008f0a:	3604      	addne	r6, #4
 8008f0c:	1f37      	subs	r7, r6, #4
 8008f0e:	4690      	mov	r8, r2
 8008f10:	46b9      	mov	r9, r7
 8008f12:	463c      	mov	r4, r7
 8008f14:	46ab      	mov	fp, r5
 8008f16:	b087      	sub	sp, #28
 8008f18:	6801      	ldr	r1, [r0, #0]
 8008f1a:	9301      	str	r3, [sp, #4]
 8008f1c:	f846 5c04 	str.w	r5, [r6, #-4]
 8008f20:	9502      	str	r5, [sp, #8]
 8008f22:	784a      	ldrb	r2, [r1, #1]
 8008f24:	1c4b      	adds	r3, r1, #1
 8008f26:	9303      	str	r3, [sp, #12]
 8008f28:	b342      	cbz	r2, 8008f7c <__hexnan+0x88>
 8008f2a:	4610      	mov	r0, r2
 8008f2c:	9105      	str	r1, [sp, #20]
 8008f2e:	9204      	str	r2, [sp, #16]
 8008f30:	f7ff fd95 	bl	8008a5e <__hexdig_fun>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	d151      	bne.n	8008fdc <__hexnan+0xe8>
 8008f38:	9a04      	ldr	r2, [sp, #16]
 8008f3a:	9905      	ldr	r1, [sp, #20]
 8008f3c:	2a20      	cmp	r2, #32
 8008f3e:	d818      	bhi.n	8008f72 <__hexnan+0x7e>
 8008f40:	9b02      	ldr	r3, [sp, #8]
 8008f42:	459b      	cmp	fp, r3
 8008f44:	dd13      	ble.n	8008f6e <__hexnan+0x7a>
 8008f46:	454c      	cmp	r4, r9
 8008f48:	d206      	bcs.n	8008f58 <__hexnan+0x64>
 8008f4a:	2d07      	cmp	r5, #7
 8008f4c:	dc04      	bgt.n	8008f58 <__hexnan+0x64>
 8008f4e:	462a      	mov	r2, r5
 8008f50:	4649      	mov	r1, r9
 8008f52:	4620      	mov	r0, r4
 8008f54:	f7ff ffa8 	bl	8008ea8 <L_shift>
 8008f58:	4544      	cmp	r4, r8
 8008f5a:	d952      	bls.n	8009002 <__hexnan+0x10e>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	f1a4 0904 	sub.w	r9, r4, #4
 8008f62:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f66:	461d      	mov	r5, r3
 8008f68:	464c      	mov	r4, r9
 8008f6a:	f8cd b008 	str.w	fp, [sp, #8]
 8008f6e:	9903      	ldr	r1, [sp, #12]
 8008f70:	e7d7      	b.n	8008f22 <__hexnan+0x2e>
 8008f72:	2a29      	cmp	r2, #41	@ 0x29
 8008f74:	d157      	bne.n	8009026 <__hexnan+0x132>
 8008f76:	3102      	adds	r1, #2
 8008f78:	f8ca 1000 	str.w	r1, [sl]
 8008f7c:	f1bb 0f00 	cmp.w	fp, #0
 8008f80:	d051      	beq.n	8009026 <__hexnan+0x132>
 8008f82:	454c      	cmp	r4, r9
 8008f84:	d206      	bcs.n	8008f94 <__hexnan+0xa0>
 8008f86:	2d07      	cmp	r5, #7
 8008f88:	dc04      	bgt.n	8008f94 <__hexnan+0xa0>
 8008f8a:	462a      	mov	r2, r5
 8008f8c:	4649      	mov	r1, r9
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f7ff ff8a 	bl	8008ea8 <L_shift>
 8008f94:	4544      	cmp	r4, r8
 8008f96:	d936      	bls.n	8009006 <__hexnan+0x112>
 8008f98:	4623      	mov	r3, r4
 8008f9a:	f1a8 0204 	sub.w	r2, r8, #4
 8008f9e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008fa2:	429f      	cmp	r7, r3
 8008fa4:	f842 1f04 	str.w	r1, [r2, #4]!
 8008fa8:	d2f9      	bcs.n	8008f9e <__hexnan+0xaa>
 8008faa:	1b3b      	subs	r3, r7, r4
 8008fac:	f023 0303 	bic.w	r3, r3, #3
 8008fb0:	3304      	adds	r3, #4
 8008fb2:	3401      	adds	r4, #1
 8008fb4:	3e03      	subs	r6, #3
 8008fb6:	42b4      	cmp	r4, r6
 8008fb8:	bf88      	it	hi
 8008fba:	2304      	movhi	r3, #4
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	4443      	add	r3, r8
 8008fc0:	f843 2b04 	str.w	r2, [r3], #4
 8008fc4:	429f      	cmp	r7, r3
 8008fc6:	d2fb      	bcs.n	8008fc0 <__hexnan+0xcc>
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	b91b      	cbnz	r3, 8008fd4 <__hexnan+0xe0>
 8008fcc:	4547      	cmp	r7, r8
 8008fce:	d128      	bne.n	8009022 <__hexnan+0x12e>
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	603b      	str	r3, [r7, #0]
 8008fd4:	2005      	movs	r0, #5
 8008fd6:	b007      	add	sp, #28
 8008fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fdc:	3501      	adds	r5, #1
 8008fde:	2d08      	cmp	r5, #8
 8008fe0:	f10b 0b01 	add.w	fp, fp, #1
 8008fe4:	dd06      	ble.n	8008ff4 <__hexnan+0x100>
 8008fe6:	4544      	cmp	r4, r8
 8008fe8:	d9c1      	bls.n	8008f6e <__hexnan+0x7a>
 8008fea:	2300      	movs	r3, #0
 8008fec:	2501      	movs	r5, #1
 8008fee:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ff2:	3c04      	subs	r4, #4
 8008ff4:	6822      	ldr	r2, [r4, #0]
 8008ff6:	f000 000f 	and.w	r0, r0, #15
 8008ffa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008ffe:	6020      	str	r0, [r4, #0]
 8009000:	e7b5      	b.n	8008f6e <__hexnan+0x7a>
 8009002:	2508      	movs	r5, #8
 8009004:	e7b3      	b.n	8008f6e <__hexnan+0x7a>
 8009006:	9b01      	ldr	r3, [sp, #4]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d0dd      	beq.n	8008fc8 <__hexnan+0xd4>
 800900c:	f04f 32ff 	mov.w	r2, #4294967295
 8009010:	f1c3 0320 	rsb	r3, r3, #32
 8009014:	40da      	lsrs	r2, r3
 8009016:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800901a:	4013      	ands	r3, r2
 800901c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009020:	e7d2      	b.n	8008fc8 <__hexnan+0xd4>
 8009022:	3f04      	subs	r7, #4
 8009024:	e7d0      	b.n	8008fc8 <__hexnan+0xd4>
 8009026:	2004      	movs	r0, #4
 8009028:	e7d5      	b.n	8008fd6 <__hexnan+0xe2>
	...

0800902c <malloc>:
 800902c:	4b02      	ldr	r3, [pc, #8]	@ (8009038 <malloc+0xc>)
 800902e:	4601      	mov	r1, r0
 8009030:	6818      	ldr	r0, [r3, #0]
 8009032:	f000 b825 	b.w	8009080 <_malloc_r>
 8009036:	bf00      	nop
 8009038:	2000019c 	.word	0x2000019c

0800903c <sbrk_aligned>:
 800903c:	b570      	push	{r4, r5, r6, lr}
 800903e:	4e0f      	ldr	r6, [pc, #60]	@ (800907c <sbrk_aligned+0x40>)
 8009040:	460c      	mov	r4, r1
 8009042:	6831      	ldr	r1, [r6, #0]
 8009044:	4605      	mov	r5, r0
 8009046:	b911      	cbnz	r1, 800904e <sbrk_aligned+0x12>
 8009048:	f000 ff84 	bl	8009f54 <_sbrk_r>
 800904c:	6030      	str	r0, [r6, #0]
 800904e:	4621      	mov	r1, r4
 8009050:	4628      	mov	r0, r5
 8009052:	f000 ff7f 	bl	8009f54 <_sbrk_r>
 8009056:	1c43      	adds	r3, r0, #1
 8009058:	d103      	bne.n	8009062 <sbrk_aligned+0x26>
 800905a:	f04f 34ff 	mov.w	r4, #4294967295
 800905e:	4620      	mov	r0, r4
 8009060:	bd70      	pop	{r4, r5, r6, pc}
 8009062:	1cc4      	adds	r4, r0, #3
 8009064:	f024 0403 	bic.w	r4, r4, #3
 8009068:	42a0      	cmp	r0, r4
 800906a:	d0f8      	beq.n	800905e <sbrk_aligned+0x22>
 800906c:	1a21      	subs	r1, r4, r0
 800906e:	4628      	mov	r0, r5
 8009070:	f000 ff70 	bl	8009f54 <_sbrk_r>
 8009074:	3001      	adds	r0, #1
 8009076:	d1f2      	bne.n	800905e <sbrk_aligned+0x22>
 8009078:	e7ef      	b.n	800905a <sbrk_aligned+0x1e>
 800907a:	bf00      	nop
 800907c:	20000bc0 	.word	0x20000bc0

08009080 <_malloc_r>:
 8009080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009084:	1ccd      	adds	r5, r1, #3
 8009086:	f025 0503 	bic.w	r5, r5, #3
 800908a:	3508      	adds	r5, #8
 800908c:	2d0c      	cmp	r5, #12
 800908e:	bf38      	it	cc
 8009090:	250c      	movcc	r5, #12
 8009092:	2d00      	cmp	r5, #0
 8009094:	4606      	mov	r6, r0
 8009096:	db01      	blt.n	800909c <_malloc_r+0x1c>
 8009098:	42a9      	cmp	r1, r5
 800909a:	d904      	bls.n	80090a6 <_malloc_r+0x26>
 800909c:	230c      	movs	r3, #12
 800909e:	6033      	str	r3, [r6, #0]
 80090a0:	2000      	movs	r0, #0
 80090a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800917c <_malloc_r+0xfc>
 80090aa:	f000 f87b 	bl	80091a4 <__malloc_lock>
 80090ae:	f8d8 3000 	ldr.w	r3, [r8]
 80090b2:	461c      	mov	r4, r3
 80090b4:	bb44      	cbnz	r4, 8009108 <_malloc_r+0x88>
 80090b6:	4629      	mov	r1, r5
 80090b8:	4630      	mov	r0, r6
 80090ba:	f7ff ffbf 	bl	800903c <sbrk_aligned>
 80090be:	1c43      	adds	r3, r0, #1
 80090c0:	4604      	mov	r4, r0
 80090c2:	d158      	bne.n	8009176 <_malloc_r+0xf6>
 80090c4:	f8d8 4000 	ldr.w	r4, [r8]
 80090c8:	4627      	mov	r7, r4
 80090ca:	2f00      	cmp	r7, #0
 80090cc:	d143      	bne.n	8009156 <_malloc_r+0xd6>
 80090ce:	2c00      	cmp	r4, #0
 80090d0:	d04b      	beq.n	800916a <_malloc_r+0xea>
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	4639      	mov	r1, r7
 80090d6:	4630      	mov	r0, r6
 80090d8:	eb04 0903 	add.w	r9, r4, r3
 80090dc:	f000 ff3a 	bl	8009f54 <_sbrk_r>
 80090e0:	4581      	cmp	r9, r0
 80090e2:	d142      	bne.n	800916a <_malloc_r+0xea>
 80090e4:	6821      	ldr	r1, [r4, #0]
 80090e6:	4630      	mov	r0, r6
 80090e8:	1a6d      	subs	r5, r5, r1
 80090ea:	4629      	mov	r1, r5
 80090ec:	f7ff ffa6 	bl	800903c <sbrk_aligned>
 80090f0:	3001      	adds	r0, #1
 80090f2:	d03a      	beq.n	800916a <_malloc_r+0xea>
 80090f4:	6823      	ldr	r3, [r4, #0]
 80090f6:	442b      	add	r3, r5
 80090f8:	6023      	str	r3, [r4, #0]
 80090fa:	f8d8 3000 	ldr.w	r3, [r8]
 80090fe:	685a      	ldr	r2, [r3, #4]
 8009100:	bb62      	cbnz	r2, 800915c <_malloc_r+0xdc>
 8009102:	f8c8 7000 	str.w	r7, [r8]
 8009106:	e00f      	b.n	8009128 <_malloc_r+0xa8>
 8009108:	6822      	ldr	r2, [r4, #0]
 800910a:	1b52      	subs	r2, r2, r5
 800910c:	d420      	bmi.n	8009150 <_malloc_r+0xd0>
 800910e:	2a0b      	cmp	r2, #11
 8009110:	d917      	bls.n	8009142 <_malloc_r+0xc2>
 8009112:	1961      	adds	r1, r4, r5
 8009114:	42a3      	cmp	r3, r4
 8009116:	6025      	str	r5, [r4, #0]
 8009118:	bf18      	it	ne
 800911a:	6059      	strne	r1, [r3, #4]
 800911c:	6863      	ldr	r3, [r4, #4]
 800911e:	bf08      	it	eq
 8009120:	f8c8 1000 	streq.w	r1, [r8]
 8009124:	5162      	str	r2, [r4, r5]
 8009126:	604b      	str	r3, [r1, #4]
 8009128:	4630      	mov	r0, r6
 800912a:	f000 f841 	bl	80091b0 <__malloc_unlock>
 800912e:	f104 000b 	add.w	r0, r4, #11
 8009132:	1d23      	adds	r3, r4, #4
 8009134:	f020 0007 	bic.w	r0, r0, #7
 8009138:	1ac2      	subs	r2, r0, r3
 800913a:	bf1c      	itt	ne
 800913c:	1a1b      	subne	r3, r3, r0
 800913e:	50a3      	strne	r3, [r4, r2]
 8009140:	e7af      	b.n	80090a2 <_malloc_r+0x22>
 8009142:	6862      	ldr	r2, [r4, #4]
 8009144:	42a3      	cmp	r3, r4
 8009146:	bf0c      	ite	eq
 8009148:	f8c8 2000 	streq.w	r2, [r8]
 800914c:	605a      	strne	r2, [r3, #4]
 800914e:	e7eb      	b.n	8009128 <_malloc_r+0xa8>
 8009150:	4623      	mov	r3, r4
 8009152:	6864      	ldr	r4, [r4, #4]
 8009154:	e7ae      	b.n	80090b4 <_malloc_r+0x34>
 8009156:	463c      	mov	r4, r7
 8009158:	687f      	ldr	r7, [r7, #4]
 800915a:	e7b6      	b.n	80090ca <_malloc_r+0x4a>
 800915c:	461a      	mov	r2, r3
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	42a3      	cmp	r3, r4
 8009162:	d1fb      	bne.n	800915c <_malloc_r+0xdc>
 8009164:	2300      	movs	r3, #0
 8009166:	6053      	str	r3, [r2, #4]
 8009168:	e7de      	b.n	8009128 <_malloc_r+0xa8>
 800916a:	230c      	movs	r3, #12
 800916c:	4630      	mov	r0, r6
 800916e:	6033      	str	r3, [r6, #0]
 8009170:	f000 f81e 	bl	80091b0 <__malloc_unlock>
 8009174:	e794      	b.n	80090a0 <_malloc_r+0x20>
 8009176:	6005      	str	r5, [r0, #0]
 8009178:	e7d6      	b.n	8009128 <_malloc_r+0xa8>
 800917a:	bf00      	nop
 800917c:	20000bc4 	.word	0x20000bc4

08009180 <__ascii_mbtowc>:
 8009180:	b082      	sub	sp, #8
 8009182:	b901      	cbnz	r1, 8009186 <__ascii_mbtowc+0x6>
 8009184:	a901      	add	r1, sp, #4
 8009186:	b142      	cbz	r2, 800919a <__ascii_mbtowc+0x1a>
 8009188:	b14b      	cbz	r3, 800919e <__ascii_mbtowc+0x1e>
 800918a:	7813      	ldrb	r3, [r2, #0]
 800918c:	600b      	str	r3, [r1, #0]
 800918e:	7812      	ldrb	r2, [r2, #0]
 8009190:	1e10      	subs	r0, r2, #0
 8009192:	bf18      	it	ne
 8009194:	2001      	movne	r0, #1
 8009196:	b002      	add	sp, #8
 8009198:	4770      	bx	lr
 800919a:	4610      	mov	r0, r2
 800919c:	e7fb      	b.n	8009196 <__ascii_mbtowc+0x16>
 800919e:	f06f 0001 	mvn.w	r0, #1
 80091a2:	e7f8      	b.n	8009196 <__ascii_mbtowc+0x16>

080091a4 <__malloc_lock>:
 80091a4:	4801      	ldr	r0, [pc, #4]	@ (80091ac <__malloc_lock+0x8>)
 80091a6:	f7fe bd44 	b.w	8007c32 <__retarget_lock_acquire_recursive>
 80091aa:	bf00      	nop
 80091ac:	20000bbc 	.word	0x20000bbc

080091b0 <__malloc_unlock>:
 80091b0:	4801      	ldr	r0, [pc, #4]	@ (80091b8 <__malloc_unlock+0x8>)
 80091b2:	f7fe bd3f 	b.w	8007c34 <__retarget_lock_release_recursive>
 80091b6:	bf00      	nop
 80091b8:	20000bbc 	.word	0x20000bbc

080091bc <_Balloc>:
 80091bc:	b570      	push	{r4, r5, r6, lr}
 80091be:	69c6      	ldr	r6, [r0, #28]
 80091c0:	4604      	mov	r4, r0
 80091c2:	460d      	mov	r5, r1
 80091c4:	b976      	cbnz	r6, 80091e4 <_Balloc+0x28>
 80091c6:	2010      	movs	r0, #16
 80091c8:	f7ff ff30 	bl	800902c <malloc>
 80091cc:	4602      	mov	r2, r0
 80091ce:	61e0      	str	r0, [r4, #28]
 80091d0:	b920      	cbnz	r0, 80091dc <_Balloc+0x20>
 80091d2:	216b      	movs	r1, #107	@ 0x6b
 80091d4:	4b17      	ldr	r3, [pc, #92]	@ (8009234 <_Balloc+0x78>)
 80091d6:	4818      	ldr	r0, [pc, #96]	@ (8009238 <_Balloc+0x7c>)
 80091d8:	f000 fecc 	bl	8009f74 <__assert_func>
 80091dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091e0:	6006      	str	r6, [r0, #0]
 80091e2:	60c6      	str	r6, [r0, #12]
 80091e4:	69e6      	ldr	r6, [r4, #28]
 80091e6:	68f3      	ldr	r3, [r6, #12]
 80091e8:	b183      	cbz	r3, 800920c <_Balloc+0x50>
 80091ea:	69e3      	ldr	r3, [r4, #28]
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80091f2:	b9b8      	cbnz	r0, 8009224 <_Balloc+0x68>
 80091f4:	2101      	movs	r1, #1
 80091f6:	fa01 f605 	lsl.w	r6, r1, r5
 80091fa:	1d72      	adds	r2, r6, #5
 80091fc:	4620      	mov	r0, r4
 80091fe:	0092      	lsls	r2, r2, #2
 8009200:	f000 fed6 	bl	8009fb0 <_calloc_r>
 8009204:	b160      	cbz	r0, 8009220 <_Balloc+0x64>
 8009206:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800920a:	e00e      	b.n	800922a <_Balloc+0x6e>
 800920c:	2221      	movs	r2, #33	@ 0x21
 800920e:	2104      	movs	r1, #4
 8009210:	4620      	mov	r0, r4
 8009212:	f000 fecd 	bl	8009fb0 <_calloc_r>
 8009216:	69e3      	ldr	r3, [r4, #28]
 8009218:	60f0      	str	r0, [r6, #12]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1e4      	bne.n	80091ea <_Balloc+0x2e>
 8009220:	2000      	movs	r0, #0
 8009222:	bd70      	pop	{r4, r5, r6, pc}
 8009224:	6802      	ldr	r2, [r0, #0]
 8009226:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800922a:	2300      	movs	r3, #0
 800922c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009230:	e7f7      	b.n	8009222 <_Balloc+0x66>
 8009232:	bf00      	nop
 8009234:	0800cae7 	.word	0x0800cae7
 8009238:	0800cbc7 	.word	0x0800cbc7

0800923c <_Bfree>:
 800923c:	b570      	push	{r4, r5, r6, lr}
 800923e:	69c6      	ldr	r6, [r0, #28]
 8009240:	4605      	mov	r5, r0
 8009242:	460c      	mov	r4, r1
 8009244:	b976      	cbnz	r6, 8009264 <_Bfree+0x28>
 8009246:	2010      	movs	r0, #16
 8009248:	f7ff fef0 	bl	800902c <malloc>
 800924c:	4602      	mov	r2, r0
 800924e:	61e8      	str	r0, [r5, #28]
 8009250:	b920      	cbnz	r0, 800925c <_Bfree+0x20>
 8009252:	218f      	movs	r1, #143	@ 0x8f
 8009254:	4b08      	ldr	r3, [pc, #32]	@ (8009278 <_Bfree+0x3c>)
 8009256:	4809      	ldr	r0, [pc, #36]	@ (800927c <_Bfree+0x40>)
 8009258:	f000 fe8c 	bl	8009f74 <__assert_func>
 800925c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009260:	6006      	str	r6, [r0, #0]
 8009262:	60c6      	str	r6, [r0, #12]
 8009264:	b13c      	cbz	r4, 8009276 <_Bfree+0x3a>
 8009266:	69eb      	ldr	r3, [r5, #28]
 8009268:	6862      	ldr	r2, [r4, #4]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009270:	6021      	str	r1, [r4, #0]
 8009272:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009276:	bd70      	pop	{r4, r5, r6, pc}
 8009278:	0800cae7 	.word	0x0800cae7
 800927c:	0800cbc7 	.word	0x0800cbc7

08009280 <__multadd>:
 8009280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009284:	4607      	mov	r7, r0
 8009286:	460c      	mov	r4, r1
 8009288:	461e      	mov	r6, r3
 800928a:	2000      	movs	r0, #0
 800928c:	690d      	ldr	r5, [r1, #16]
 800928e:	f101 0c14 	add.w	ip, r1, #20
 8009292:	f8dc 3000 	ldr.w	r3, [ip]
 8009296:	3001      	adds	r0, #1
 8009298:	b299      	uxth	r1, r3
 800929a:	fb02 6101 	mla	r1, r2, r1, r6
 800929e:	0c1e      	lsrs	r6, r3, #16
 80092a0:	0c0b      	lsrs	r3, r1, #16
 80092a2:	fb02 3306 	mla	r3, r2, r6, r3
 80092a6:	b289      	uxth	r1, r1
 80092a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80092ac:	4285      	cmp	r5, r0
 80092ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80092b2:	f84c 1b04 	str.w	r1, [ip], #4
 80092b6:	dcec      	bgt.n	8009292 <__multadd+0x12>
 80092b8:	b30e      	cbz	r6, 80092fe <__multadd+0x7e>
 80092ba:	68a3      	ldr	r3, [r4, #8]
 80092bc:	42ab      	cmp	r3, r5
 80092be:	dc19      	bgt.n	80092f4 <__multadd+0x74>
 80092c0:	6861      	ldr	r1, [r4, #4]
 80092c2:	4638      	mov	r0, r7
 80092c4:	3101      	adds	r1, #1
 80092c6:	f7ff ff79 	bl	80091bc <_Balloc>
 80092ca:	4680      	mov	r8, r0
 80092cc:	b928      	cbnz	r0, 80092da <__multadd+0x5a>
 80092ce:	4602      	mov	r2, r0
 80092d0:	21ba      	movs	r1, #186	@ 0xba
 80092d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009304 <__multadd+0x84>)
 80092d4:	480c      	ldr	r0, [pc, #48]	@ (8009308 <__multadd+0x88>)
 80092d6:	f000 fe4d 	bl	8009f74 <__assert_func>
 80092da:	6922      	ldr	r2, [r4, #16]
 80092dc:	f104 010c 	add.w	r1, r4, #12
 80092e0:	3202      	adds	r2, #2
 80092e2:	0092      	lsls	r2, r2, #2
 80092e4:	300c      	adds	r0, #12
 80092e6:	f7fe fcb4 	bl	8007c52 <memcpy>
 80092ea:	4621      	mov	r1, r4
 80092ec:	4638      	mov	r0, r7
 80092ee:	f7ff ffa5 	bl	800923c <_Bfree>
 80092f2:	4644      	mov	r4, r8
 80092f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80092f8:	3501      	adds	r5, #1
 80092fa:	615e      	str	r6, [r3, #20]
 80092fc:	6125      	str	r5, [r4, #16]
 80092fe:	4620      	mov	r0, r4
 8009300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009304:	0800cb56 	.word	0x0800cb56
 8009308:	0800cbc7 	.word	0x0800cbc7

0800930c <__s2b>:
 800930c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009310:	4615      	mov	r5, r2
 8009312:	2209      	movs	r2, #9
 8009314:	461f      	mov	r7, r3
 8009316:	3308      	adds	r3, #8
 8009318:	460c      	mov	r4, r1
 800931a:	fb93 f3f2 	sdiv	r3, r3, r2
 800931e:	4606      	mov	r6, r0
 8009320:	2201      	movs	r2, #1
 8009322:	2100      	movs	r1, #0
 8009324:	429a      	cmp	r2, r3
 8009326:	db09      	blt.n	800933c <__s2b+0x30>
 8009328:	4630      	mov	r0, r6
 800932a:	f7ff ff47 	bl	80091bc <_Balloc>
 800932e:	b940      	cbnz	r0, 8009342 <__s2b+0x36>
 8009330:	4602      	mov	r2, r0
 8009332:	21d3      	movs	r1, #211	@ 0xd3
 8009334:	4b18      	ldr	r3, [pc, #96]	@ (8009398 <__s2b+0x8c>)
 8009336:	4819      	ldr	r0, [pc, #100]	@ (800939c <__s2b+0x90>)
 8009338:	f000 fe1c 	bl	8009f74 <__assert_func>
 800933c:	0052      	lsls	r2, r2, #1
 800933e:	3101      	adds	r1, #1
 8009340:	e7f0      	b.n	8009324 <__s2b+0x18>
 8009342:	9b08      	ldr	r3, [sp, #32]
 8009344:	2d09      	cmp	r5, #9
 8009346:	6143      	str	r3, [r0, #20]
 8009348:	f04f 0301 	mov.w	r3, #1
 800934c:	6103      	str	r3, [r0, #16]
 800934e:	dd16      	ble.n	800937e <__s2b+0x72>
 8009350:	f104 0909 	add.w	r9, r4, #9
 8009354:	46c8      	mov	r8, r9
 8009356:	442c      	add	r4, r5
 8009358:	f818 3b01 	ldrb.w	r3, [r8], #1
 800935c:	4601      	mov	r1, r0
 800935e:	220a      	movs	r2, #10
 8009360:	4630      	mov	r0, r6
 8009362:	3b30      	subs	r3, #48	@ 0x30
 8009364:	f7ff ff8c 	bl	8009280 <__multadd>
 8009368:	45a0      	cmp	r8, r4
 800936a:	d1f5      	bne.n	8009358 <__s2b+0x4c>
 800936c:	f1a5 0408 	sub.w	r4, r5, #8
 8009370:	444c      	add	r4, r9
 8009372:	1b2d      	subs	r5, r5, r4
 8009374:	1963      	adds	r3, r4, r5
 8009376:	42bb      	cmp	r3, r7
 8009378:	db04      	blt.n	8009384 <__s2b+0x78>
 800937a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800937e:	2509      	movs	r5, #9
 8009380:	340a      	adds	r4, #10
 8009382:	e7f6      	b.n	8009372 <__s2b+0x66>
 8009384:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009388:	4601      	mov	r1, r0
 800938a:	220a      	movs	r2, #10
 800938c:	4630      	mov	r0, r6
 800938e:	3b30      	subs	r3, #48	@ 0x30
 8009390:	f7ff ff76 	bl	8009280 <__multadd>
 8009394:	e7ee      	b.n	8009374 <__s2b+0x68>
 8009396:	bf00      	nop
 8009398:	0800cb56 	.word	0x0800cb56
 800939c:	0800cbc7 	.word	0x0800cbc7

080093a0 <__hi0bits>:
 80093a0:	4603      	mov	r3, r0
 80093a2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80093a6:	bf3a      	itte	cc
 80093a8:	0403      	lslcc	r3, r0, #16
 80093aa:	2010      	movcc	r0, #16
 80093ac:	2000      	movcs	r0, #0
 80093ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093b2:	bf3c      	itt	cc
 80093b4:	021b      	lslcc	r3, r3, #8
 80093b6:	3008      	addcc	r0, #8
 80093b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093bc:	bf3c      	itt	cc
 80093be:	011b      	lslcc	r3, r3, #4
 80093c0:	3004      	addcc	r0, #4
 80093c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093c6:	bf3c      	itt	cc
 80093c8:	009b      	lslcc	r3, r3, #2
 80093ca:	3002      	addcc	r0, #2
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	db05      	blt.n	80093dc <__hi0bits+0x3c>
 80093d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80093d4:	f100 0001 	add.w	r0, r0, #1
 80093d8:	bf08      	it	eq
 80093da:	2020      	moveq	r0, #32
 80093dc:	4770      	bx	lr

080093de <__lo0bits>:
 80093de:	6803      	ldr	r3, [r0, #0]
 80093e0:	4602      	mov	r2, r0
 80093e2:	f013 0007 	ands.w	r0, r3, #7
 80093e6:	d00b      	beq.n	8009400 <__lo0bits+0x22>
 80093e8:	07d9      	lsls	r1, r3, #31
 80093ea:	d421      	bmi.n	8009430 <__lo0bits+0x52>
 80093ec:	0798      	lsls	r0, r3, #30
 80093ee:	bf49      	itett	mi
 80093f0:	085b      	lsrmi	r3, r3, #1
 80093f2:	089b      	lsrpl	r3, r3, #2
 80093f4:	2001      	movmi	r0, #1
 80093f6:	6013      	strmi	r3, [r2, #0]
 80093f8:	bf5c      	itt	pl
 80093fa:	2002      	movpl	r0, #2
 80093fc:	6013      	strpl	r3, [r2, #0]
 80093fe:	4770      	bx	lr
 8009400:	b299      	uxth	r1, r3
 8009402:	b909      	cbnz	r1, 8009408 <__lo0bits+0x2a>
 8009404:	2010      	movs	r0, #16
 8009406:	0c1b      	lsrs	r3, r3, #16
 8009408:	b2d9      	uxtb	r1, r3
 800940a:	b909      	cbnz	r1, 8009410 <__lo0bits+0x32>
 800940c:	3008      	adds	r0, #8
 800940e:	0a1b      	lsrs	r3, r3, #8
 8009410:	0719      	lsls	r1, r3, #28
 8009412:	bf04      	itt	eq
 8009414:	091b      	lsreq	r3, r3, #4
 8009416:	3004      	addeq	r0, #4
 8009418:	0799      	lsls	r1, r3, #30
 800941a:	bf04      	itt	eq
 800941c:	089b      	lsreq	r3, r3, #2
 800941e:	3002      	addeq	r0, #2
 8009420:	07d9      	lsls	r1, r3, #31
 8009422:	d403      	bmi.n	800942c <__lo0bits+0x4e>
 8009424:	085b      	lsrs	r3, r3, #1
 8009426:	f100 0001 	add.w	r0, r0, #1
 800942a:	d003      	beq.n	8009434 <__lo0bits+0x56>
 800942c:	6013      	str	r3, [r2, #0]
 800942e:	4770      	bx	lr
 8009430:	2000      	movs	r0, #0
 8009432:	4770      	bx	lr
 8009434:	2020      	movs	r0, #32
 8009436:	4770      	bx	lr

08009438 <__i2b>:
 8009438:	b510      	push	{r4, lr}
 800943a:	460c      	mov	r4, r1
 800943c:	2101      	movs	r1, #1
 800943e:	f7ff febd 	bl	80091bc <_Balloc>
 8009442:	4602      	mov	r2, r0
 8009444:	b928      	cbnz	r0, 8009452 <__i2b+0x1a>
 8009446:	f240 1145 	movw	r1, #325	@ 0x145
 800944a:	4b04      	ldr	r3, [pc, #16]	@ (800945c <__i2b+0x24>)
 800944c:	4804      	ldr	r0, [pc, #16]	@ (8009460 <__i2b+0x28>)
 800944e:	f000 fd91 	bl	8009f74 <__assert_func>
 8009452:	2301      	movs	r3, #1
 8009454:	6144      	str	r4, [r0, #20]
 8009456:	6103      	str	r3, [r0, #16]
 8009458:	bd10      	pop	{r4, pc}
 800945a:	bf00      	nop
 800945c:	0800cb56 	.word	0x0800cb56
 8009460:	0800cbc7 	.word	0x0800cbc7

08009464 <__multiply>:
 8009464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009468:	4614      	mov	r4, r2
 800946a:	690a      	ldr	r2, [r1, #16]
 800946c:	6923      	ldr	r3, [r4, #16]
 800946e:	460f      	mov	r7, r1
 8009470:	429a      	cmp	r2, r3
 8009472:	bfa2      	ittt	ge
 8009474:	4623      	movge	r3, r4
 8009476:	460c      	movge	r4, r1
 8009478:	461f      	movge	r7, r3
 800947a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800947e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009482:	68a3      	ldr	r3, [r4, #8]
 8009484:	6861      	ldr	r1, [r4, #4]
 8009486:	eb0a 0609 	add.w	r6, sl, r9
 800948a:	42b3      	cmp	r3, r6
 800948c:	b085      	sub	sp, #20
 800948e:	bfb8      	it	lt
 8009490:	3101      	addlt	r1, #1
 8009492:	f7ff fe93 	bl	80091bc <_Balloc>
 8009496:	b930      	cbnz	r0, 80094a6 <__multiply+0x42>
 8009498:	4602      	mov	r2, r0
 800949a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800949e:	4b43      	ldr	r3, [pc, #268]	@ (80095ac <__multiply+0x148>)
 80094a0:	4843      	ldr	r0, [pc, #268]	@ (80095b0 <__multiply+0x14c>)
 80094a2:	f000 fd67 	bl	8009f74 <__assert_func>
 80094a6:	f100 0514 	add.w	r5, r0, #20
 80094aa:	462b      	mov	r3, r5
 80094ac:	2200      	movs	r2, #0
 80094ae:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80094b2:	4543      	cmp	r3, r8
 80094b4:	d321      	bcc.n	80094fa <__multiply+0x96>
 80094b6:	f107 0114 	add.w	r1, r7, #20
 80094ba:	f104 0214 	add.w	r2, r4, #20
 80094be:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80094c2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80094c6:	9302      	str	r3, [sp, #8]
 80094c8:	1b13      	subs	r3, r2, r4
 80094ca:	3b15      	subs	r3, #21
 80094cc:	f023 0303 	bic.w	r3, r3, #3
 80094d0:	3304      	adds	r3, #4
 80094d2:	f104 0715 	add.w	r7, r4, #21
 80094d6:	42ba      	cmp	r2, r7
 80094d8:	bf38      	it	cc
 80094da:	2304      	movcc	r3, #4
 80094dc:	9301      	str	r3, [sp, #4]
 80094de:	9b02      	ldr	r3, [sp, #8]
 80094e0:	9103      	str	r1, [sp, #12]
 80094e2:	428b      	cmp	r3, r1
 80094e4:	d80c      	bhi.n	8009500 <__multiply+0x9c>
 80094e6:	2e00      	cmp	r6, #0
 80094e8:	dd03      	ble.n	80094f2 <__multiply+0x8e>
 80094ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d05a      	beq.n	80095a8 <__multiply+0x144>
 80094f2:	6106      	str	r6, [r0, #16]
 80094f4:	b005      	add	sp, #20
 80094f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094fa:	f843 2b04 	str.w	r2, [r3], #4
 80094fe:	e7d8      	b.n	80094b2 <__multiply+0x4e>
 8009500:	f8b1 a000 	ldrh.w	sl, [r1]
 8009504:	f1ba 0f00 	cmp.w	sl, #0
 8009508:	d023      	beq.n	8009552 <__multiply+0xee>
 800950a:	46a9      	mov	r9, r5
 800950c:	f04f 0c00 	mov.w	ip, #0
 8009510:	f104 0e14 	add.w	lr, r4, #20
 8009514:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009518:	f8d9 3000 	ldr.w	r3, [r9]
 800951c:	fa1f fb87 	uxth.w	fp, r7
 8009520:	b29b      	uxth	r3, r3
 8009522:	fb0a 330b 	mla	r3, sl, fp, r3
 8009526:	4463      	add	r3, ip
 8009528:	f8d9 c000 	ldr.w	ip, [r9]
 800952c:	0c3f      	lsrs	r7, r7, #16
 800952e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009532:	fb0a c707 	mla	r7, sl, r7, ip
 8009536:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800953a:	b29b      	uxth	r3, r3
 800953c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009540:	4572      	cmp	r2, lr
 8009542:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009546:	f849 3b04 	str.w	r3, [r9], #4
 800954a:	d8e3      	bhi.n	8009514 <__multiply+0xb0>
 800954c:	9b01      	ldr	r3, [sp, #4]
 800954e:	f845 c003 	str.w	ip, [r5, r3]
 8009552:	9b03      	ldr	r3, [sp, #12]
 8009554:	3104      	adds	r1, #4
 8009556:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800955a:	f1b9 0f00 	cmp.w	r9, #0
 800955e:	d021      	beq.n	80095a4 <__multiply+0x140>
 8009560:	46ae      	mov	lr, r5
 8009562:	f04f 0a00 	mov.w	sl, #0
 8009566:	682b      	ldr	r3, [r5, #0]
 8009568:	f104 0c14 	add.w	ip, r4, #20
 800956c:	f8bc b000 	ldrh.w	fp, [ip]
 8009570:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009574:	b29b      	uxth	r3, r3
 8009576:	fb09 770b 	mla	r7, r9, fp, r7
 800957a:	4457      	add	r7, sl
 800957c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009580:	f84e 3b04 	str.w	r3, [lr], #4
 8009584:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009588:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800958c:	f8be 3000 	ldrh.w	r3, [lr]
 8009590:	4562      	cmp	r2, ip
 8009592:	fb09 330a 	mla	r3, r9, sl, r3
 8009596:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800959a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800959e:	d8e5      	bhi.n	800956c <__multiply+0x108>
 80095a0:	9f01      	ldr	r7, [sp, #4]
 80095a2:	51eb      	str	r3, [r5, r7]
 80095a4:	3504      	adds	r5, #4
 80095a6:	e79a      	b.n	80094de <__multiply+0x7a>
 80095a8:	3e01      	subs	r6, #1
 80095aa:	e79c      	b.n	80094e6 <__multiply+0x82>
 80095ac:	0800cb56 	.word	0x0800cb56
 80095b0:	0800cbc7 	.word	0x0800cbc7

080095b4 <__pow5mult>:
 80095b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095b8:	4615      	mov	r5, r2
 80095ba:	f012 0203 	ands.w	r2, r2, #3
 80095be:	4607      	mov	r7, r0
 80095c0:	460e      	mov	r6, r1
 80095c2:	d007      	beq.n	80095d4 <__pow5mult+0x20>
 80095c4:	4c25      	ldr	r4, [pc, #148]	@ (800965c <__pow5mult+0xa8>)
 80095c6:	3a01      	subs	r2, #1
 80095c8:	2300      	movs	r3, #0
 80095ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80095ce:	f7ff fe57 	bl	8009280 <__multadd>
 80095d2:	4606      	mov	r6, r0
 80095d4:	10ad      	asrs	r5, r5, #2
 80095d6:	d03d      	beq.n	8009654 <__pow5mult+0xa0>
 80095d8:	69fc      	ldr	r4, [r7, #28]
 80095da:	b97c      	cbnz	r4, 80095fc <__pow5mult+0x48>
 80095dc:	2010      	movs	r0, #16
 80095de:	f7ff fd25 	bl	800902c <malloc>
 80095e2:	4602      	mov	r2, r0
 80095e4:	61f8      	str	r0, [r7, #28]
 80095e6:	b928      	cbnz	r0, 80095f4 <__pow5mult+0x40>
 80095e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80095ec:	4b1c      	ldr	r3, [pc, #112]	@ (8009660 <__pow5mult+0xac>)
 80095ee:	481d      	ldr	r0, [pc, #116]	@ (8009664 <__pow5mult+0xb0>)
 80095f0:	f000 fcc0 	bl	8009f74 <__assert_func>
 80095f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095f8:	6004      	str	r4, [r0, #0]
 80095fa:	60c4      	str	r4, [r0, #12]
 80095fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009600:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009604:	b94c      	cbnz	r4, 800961a <__pow5mult+0x66>
 8009606:	f240 2171 	movw	r1, #625	@ 0x271
 800960a:	4638      	mov	r0, r7
 800960c:	f7ff ff14 	bl	8009438 <__i2b>
 8009610:	2300      	movs	r3, #0
 8009612:	4604      	mov	r4, r0
 8009614:	f8c8 0008 	str.w	r0, [r8, #8]
 8009618:	6003      	str	r3, [r0, #0]
 800961a:	f04f 0900 	mov.w	r9, #0
 800961e:	07eb      	lsls	r3, r5, #31
 8009620:	d50a      	bpl.n	8009638 <__pow5mult+0x84>
 8009622:	4631      	mov	r1, r6
 8009624:	4622      	mov	r2, r4
 8009626:	4638      	mov	r0, r7
 8009628:	f7ff ff1c 	bl	8009464 <__multiply>
 800962c:	4680      	mov	r8, r0
 800962e:	4631      	mov	r1, r6
 8009630:	4638      	mov	r0, r7
 8009632:	f7ff fe03 	bl	800923c <_Bfree>
 8009636:	4646      	mov	r6, r8
 8009638:	106d      	asrs	r5, r5, #1
 800963a:	d00b      	beq.n	8009654 <__pow5mult+0xa0>
 800963c:	6820      	ldr	r0, [r4, #0]
 800963e:	b938      	cbnz	r0, 8009650 <__pow5mult+0x9c>
 8009640:	4622      	mov	r2, r4
 8009642:	4621      	mov	r1, r4
 8009644:	4638      	mov	r0, r7
 8009646:	f7ff ff0d 	bl	8009464 <__multiply>
 800964a:	6020      	str	r0, [r4, #0]
 800964c:	f8c0 9000 	str.w	r9, [r0]
 8009650:	4604      	mov	r4, r0
 8009652:	e7e4      	b.n	800961e <__pow5mult+0x6a>
 8009654:	4630      	mov	r0, r6
 8009656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800965a:	bf00      	nop
 800965c:	0800cc20 	.word	0x0800cc20
 8009660:	0800cae7 	.word	0x0800cae7
 8009664:	0800cbc7 	.word	0x0800cbc7

08009668 <__lshift>:
 8009668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800966c:	460c      	mov	r4, r1
 800966e:	4607      	mov	r7, r0
 8009670:	4691      	mov	r9, r2
 8009672:	6923      	ldr	r3, [r4, #16]
 8009674:	6849      	ldr	r1, [r1, #4]
 8009676:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800967a:	68a3      	ldr	r3, [r4, #8]
 800967c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009680:	f108 0601 	add.w	r6, r8, #1
 8009684:	42b3      	cmp	r3, r6
 8009686:	db0b      	blt.n	80096a0 <__lshift+0x38>
 8009688:	4638      	mov	r0, r7
 800968a:	f7ff fd97 	bl	80091bc <_Balloc>
 800968e:	4605      	mov	r5, r0
 8009690:	b948      	cbnz	r0, 80096a6 <__lshift+0x3e>
 8009692:	4602      	mov	r2, r0
 8009694:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009698:	4b27      	ldr	r3, [pc, #156]	@ (8009738 <__lshift+0xd0>)
 800969a:	4828      	ldr	r0, [pc, #160]	@ (800973c <__lshift+0xd4>)
 800969c:	f000 fc6a 	bl	8009f74 <__assert_func>
 80096a0:	3101      	adds	r1, #1
 80096a2:	005b      	lsls	r3, r3, #1
 80096a4:	e7ee      	b.n	8009684 <__lshift+0x1c>
 80096a6:	2300      	movs	r3, #0
 80096a8:	f100 0114 	add.w	r1, r0, #20
 80096ac:	f100 0210 	add.w	r2, r0, #16
 80096b0:	4618      	mov	r0, r3
 80096b2:	4553      	cmp	r3, sl
 80096b4:	db33      	blt.n	800971e <__lshift+0xb6>
 80096b6:	6920      	ldr	r0, [r4, #16]
 80096b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80096bc:	f104 0314 	add.w	r3, r4, #20
 80096c0:	f019 091f 	ands.w	r9, r9, #31
 80096c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80096c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80096cc:	d02b      	beq.n	8009726 <__lshift+0xbe>
 80096ce:	468a      	mov	sl, r1
 80096d0:	2200      	movs	r2, #0
 80096d2:	f1c9 0e20 	rsb	lr, r9, #32
 80096d6:	6818      	ldr	r0, [r3, #0]
 80096d8:	fa00 f009 	lsl.w	r0, r0, r9
 80096dc:	4310      	orrs	r0, r2
 80096de:	f84a 0b04 	str.w	r0, [sl], #4
 80096e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80096e6:	459c      	cmp	ip, r3
 80096e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80096ec:	d8f3      	bhi.n	80096d6 <__lshift+0x6e>
 80096ee:	ebac 0304 	sub.w	r3, ip, r4
 80096f2:	3b15      	subs	r3, #21
 80096f4:	f023 0303 	bic.w	r3, r3, #3
 80096f8:	3304      	adds	r3, #4
 80096fa:	f104 0015 	add.w	r0, r4, #21
 80096fe:	4584      	cmp	ip, r0
 8009700:	bf38      	it	cc
 8009702:	2304      	movcc	r3, #4
 8009704:	50ca      	str	r2, [r1, r3]
 8009706:	b10a      	cbz	r2, 800970c <__lshift+0xa4>
 8009708:	f108 0602 	add.w	r6, r8, #2
 800970c:	3e01      	subs	r6, #1
 800970e:	4638      	mov	r0, r7
 8009710:	4621      	mov	r1, r4
 8009712:	612e      	str	r6, [r5, #16]
 8009714:	f7ff fd92 	bl	800923c <_Bfree>
 8009718:	4628      	mov	r0, r5
 800971a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800971e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009722:	3301      	adds	r3, #1
 8009724:	e7c5      	b.n	80096b2 <__lshift+0x4a>
 8009726:	3904      	subs	r1, #4
 8009728:	f853 2b04 	ldr.w	r2, [r3], #4
 800972c:	459c      	cmp	ip, r3
 800972e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009732:	d8f9      	bhi.n	8009728 <__lshift+0xc0>
 8009734:	e7ea      	b.n	800970c <__lshift+0xa4>
 8009736:	bf00      	nop
 8009738:	0800cb56 	.word	0x0800cb56
 800973c:	0800cbc7 	.word	0x0800cbc7

08009740 <__mcmp>:
 8009740:	4603      	mov	r3, r0
 8009742:	690a      	ldr	r2, [r1, #16]
 8009744:	6900      	ldr	r0, [r0, #16]
 8009746:	b530      	push	{r4, r5, lr}
 8009748:	1a80      	subs	r0, r0, r2
 800974a:	d10e      	bne.n	800976a <__mcmp+0x2a>
 800974c:	3314      	adds	r3, #20
 800974e:	3114      	adds	r1, #20
 8009750:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009754:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009758:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800975c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009760:	4295      	cmp	r5, r2
 8009762:	d003      	beq.n	800976c <__mcmp+0x2c>
 8009764:	d205      	bcs.n	8009772 <__mcmp+0x32>
 8009766:	f04f 30ff 	mov.w	r0, #4294967295
 800976a:	bd30      	pop	{r4, r5, pc}
 800976c:	42a3      	cmp	r3, r4
 800976e:	d3f3      	bcc.n	8009758 <__mcmp+0x18>
 8009770:	e7fb      	b.n	800976a <__mcmp+0x2a>
 8009772:	2001      	movs	r0, #1
 8009774:	e7f9      	b.n	800976a <__mcmp+0x2a>
	...

08009778 <__mdiff>:
 8009778:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800977c:	4689      	mov	r9, r1
 800977e:	4606      	mov	r6, r0
 8009780:	4611      	mov	r1, r2
 8009782:	4648      	mov	r0, r9
 8009784:	4614      	mov	r4, r2
 8009786:	f7ff ffdb 	bl	8009740 <__mcmp>
 800978a:	1e05      	subs	r5, r0, #0
 800978c:	d112      	bne.n	80097b4 <__mdiff+0x3c>
 800978e:	4629      	mov	r1, r5
 8009790:	4630      	mov	r0, r6
 8009792:	f7ff fd13 	bl	80091bc <_Balloc>
 8009796:	4602      	mov	r2, r0
 8009798:	b928      	cbnz	r0, 80097a6 <__mdiff+0x2e>
 800979a:	f240 2137 	movw	r1, #567	@ 0x237
 800979e:	4b3e      	ldr	r3, [pc, #248]	@ (8009898 <__mdiff+0x120>)
 80097a0:	483e      	ldr	r0, [pc, #248]	@ (800989c <__mdiff+0x124>)
 80097a2:	f000 fbe7 	bl	8009f74 <__assert_func>
 80097a6:	2301      	movs	r3, #1
 80097a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80097ac:	4610      	mov	r0, r2
 80097ae:	b003      	add	sp, #12
 80097b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b4:	bfbc      	itt	lt
 80097b6:	464b      	movlt	r3, r9
 80097b8:	46a1      	movlt	r9, r4
 80097ba:	4630      	mov	r0, r6
 80097bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80097c0:	bfba      	itte	lt
 80097c2:	461c      	movlt	r4, r3
 80097c4:	2501      	movlt	r5, #1
 80097c6:	2500      	movge	r5, #0
 80097c8:	f7ff fcf8 	bl	80091bc <_Balloc>
 80097cc:	4602      	mov	r2, r0
 80097ce:	b918      	cbnz	r0, 80097d8 <__mdiff+0x60>
 80097d0:	f240 2145 	movw	r1, #581	@ 0x245
 80097d4:	4b30      	ldr	r3, [pc, #192]	@ (8009898 <__mdiff+0x120>)
 80097d6:	e7e3      	b.n	80097a0 <__mdiff+0x28>
 80097d8:	f100 0b14 	add.w	fp, r0, #20
 80097dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80097e0:	f109 0310 	add.w	r3, r9, #16
 80097e4:	60c5      	str	r5, [r0, #12]
 80097e6:	f04f 0c00 	mov.w	ip, #0
 80097ea:	f109 0514 	add.w	r5, r9, #20
 80097ee:	46d9      	mov	r9, fp
 80097f0:	6926      	ldr	r6, [r4, #16]
 80097f2:	f104 0e14 	add.w	lr, r4, #20
 80097f6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80097fa:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80097fe:	9301      	str	r3, [sp, #4]
 8009800:	9b01      	ldr	r3, [sp, #4]
 8009802:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009806:	f853 af04 	ldr.w	sl, [r3, #4]!
 800980a:	b281      	uxth	r1, r0
 800980c:	9301      	str	r3, [sp, #4]
 800980e:	fa1f f38a 	uxth.w	r3, sl
 8009812:	1a5b      	subs	r3, r3, r1
 8009814:	0c00      	lsrs	r0, r0, #16
 8009816:	4463      	add	r3, ip
 8009818:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800981c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009820:	b29b      	uxth	r3, r3
 8009822:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009826:	4576      	cmp	r6, lr
 8009828:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800982c:	f849 3b04 	str.w	r3, [r9], #4
 8009830:	d8e6      	bhi.n	8009800 <__mdiff+0x88>
 8009832:	1b33      	subs	r3, r6, r4
 8009834:	3b15      	subs	r3, #21
 8009836:	f023 0303 	bic.w	r3, r3, #3
 800983a:	3415      	adds	r4, #21
 800983c:	3304      	adds	r3, #4
 800983e:	42a6      	cmp	r6, r4
 8009840:	bf38      	it	cc
 8009842:	2304      	movcc	r3, #4
 8009844:	441d      	add	r5, r3
 8009846:	445b      	add	r3, fp
 8009848:	461e      	mov	r6, r3
 800984a:	462c      	mov	r4, r5
 800984c:	4544      	cmp	r4, r8
 800984e:	d30e      	bcc.n	800986e <__mdiff+0xf6>
 8009850:	f108 0103 	add.w	r1, r8, #3
 8009854:	1b49      	subs	r1, r1, r5
 8009856:	f021 0103 	bic.w	r1, r1, #3
 800985a:	3d03      	subs	r5, #3
 800985c:	45a8      	cmp	r8, r5
 800985e:	bf38      	it	cc
 8009860:	2100      	movcc	r1, #0
 8009862:	440b      	add	r3, r1
 8009864:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009868:	b199      	cbz	r1, 8009892 <__mdiff+0x11a>
 800986a:	6117      	str	r7, [r2, #16]
 800986c:	e79e      	b.n	80097ac <__mdiff+0x34>
 800986e:	46e6      	mov	lr, ip
 8009870:	f854 1b04 	ldr.w	r1, [r4], #4
 8009874:	fa1f fc81 	uxth.w	ip, r1
 8009878:	44f4      	add	ip, lr
 800987a:	0c08      	lsrs	r0, r1, #16
 800987c:	4471      	add	r1, lr
 800987e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009882:	b289      	uxth	r1, r1
 8009884:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009888:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800988c:	f846 1b04 	str.w	r1, [r6], #4
 8009890:	e7dc      	b.n	800984c <__mdiff+0xd4>
 8009892:	3f01      	subs	r7, #1
 8009894:	e7e6      	b.n	8009864 <__mdiff+0xec>
 8009896:	bf00      	nop
 8009898:	0800cb56 	.word	0x0800cb56
 800989c:	0800cbc7 	.word	0x0800cbc7

080098a0 <__ulp>:
 80098a0:	4b0e      	ldr	r3, [pc, #56]	@ (80098dc <__ulp+0x3c>)
 80098a2:	400b      	ands	r3, r1
 80098a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	dc08      	bgt.n	80098be <__ulp+0x1e>
 80098ac:	425b      	negs	r3, r3
 80098ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80098b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80098b6:	da04      	bge.n	80098c2 <__ulp+0x22>
 80098b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80098bc:	4113      	asrs	r3, r2
 80098be:	2200      	movs	r2, #0
 80098c0:	e008      	b.n	80098d4 <__ulp+0x34>
 80098c2:	f1a2 0314 	sub.w	r3, r2, #20
 80098c6:	2b1e      	cmp	r3, #30
 80098c8:	bfd6      	itet	le
 80098ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80098ce:	2201      	movgt	r2, #1
 80098d0:	40da      	lsrle	r2, r3
 80098d2:	2300      	movs	r3, #0
 80098d4:	4619      	mov	r1, r3
 80098d6:	4610      	mov	r0, r2
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop
 80098dc:	7ff00000 	.word	0x7ff00000

080098e0 <__b2d>:
 80098e0:	6902      	ldr	r2, [r0, #16]
 80098e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e4:	f100 0614 	add.w	r6, r0, #20
 80098e8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80098ec:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80098f0:	4f1e      	ldr	r7, [pc, #120]	@ (800996c <__b2d+0x8c>)
 80098f2:	4620      	mov	r0, r4
 80098f4:	f7ff fd54 	bl	80093a0 <__hi0bits>
 80098f8:	4603      	mov	r3, r0
 80098fa:	f1c0 0020 	rsb	r0, r0, #32
 80098fe:	2b0a      	cmp	r3, #10
 8009900:	f1a2 0504 	sub.w	r5, r2, #4
 8009904:	6008      	str	r0, [r1, #0]
 8009906:	dc12      	bgt.n	800992e <__b2d+0x4e>
 8009908:	42ae      	cmp	r6, r5
 800990a:	bf2c      	ite	cs
 800990c:	2200      	movcs	r2, #0
 800990e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009912:	f1c3 0c0b 	rsb	ip, r3, #11
 8009916:	3315      	adds	r3, #21
 8009918:	fa24 fe0c 	lsr.w	lr, r4, ip
 800991c:	fa04 f303 	lsl.w	r3, r4, r3
 8009920:	fa22 f20c 	lsr.w	r2, r2, ip
 8009924:	ea4e 0107 	orr.w	r1, lr, r7
 8009928:	431a      	orrs	r2, r3
 800992a:	4610      	mov	r0, r2
 800992c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800992e:	42ae      	cmp	r6, r5
 8009930:	bf36      	itet	cc
 8009932:	f1a2 0508 	subcc.w	r5, r2, #8
 8009936:	2200      	movcs	r2, #0
 8009938:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800993c:	3b0b      	subs	r3, #11
 800993e:	d012      	beq.n	8009966 <__b2d+0x86>
 8009940:	f1c3 0720 	rsb	r7, r3, #32
 8009944:	fa22 f107 	lsr.w	r1, r2, r7
 8009948:	409c      	lsls	r4, r3
 800994a:	430c      	orrs	r4, r1
 800994c:	42b5      	cmp	r5, r6
 800994e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009952:	bf94      	ite	ls
 8009954:	2400      	movls	r4, #0
 8009956:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800995a:	409a      	lsls	r2, r3
 800995c:	40fc      	lsrs	r4, r7
 800995e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009962:	4322      	orrs	r2, r4
 8009964:	e7e1      	b.n	800992a <__b2d+0x4a>
 8009966:	ea44 0107 	orr.w	r1, r4, r7
 800996a:	e7de      	b.n	800992a <__b2d+0x4a>
 800996c:	3ff00000 	.word	0x3ff00000

08009970 <__d2b>:
 8009970:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009974:	2101      	movs	r1, #1
 8009976:	4690      	mov	r8, r2
 8009978:	4699      	mov	r9, r3
 800997a:	9e08      	ldr	r6, [sp, #32]
 800997c:	f7ff fc1e 	bl	80091bc <_Balloc>
 8009980:	4604      	mov	r4, r0
 8009982:	b930      	cbnz	r0, 8009992 <__d2b+0x22>
 8009984:	4602      	mov	r2, r0
 8009986:	f240 310f 	movw	r1, #783	@ 0x30f
 800998a:	4b23      	ldr	r3, [pc, #140]	@ (8009a18 <__d2b+0xa8>)
 800998c:	4823      	ldr	r0, [pc, #140]	@ (8009a1c <__d2b+0xac>)
 800998e:	f000 faf1 	bl	8009f74 <__assert_func>
 8009992:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009996:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800999a:	b10d      	cbz	r5, 80099a0 <__d2b+0x30>
 800999c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099a0:	9301      	str	r3, [sp, #4]
 80099a2:	f1b8 0300 	subs.w	r3, r8, #0
 80099a6:	d024      	beq.n	80099f2 <__d2b+0x82>
 80099a8:	4668      	mov	r0, sp
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	f7ff fd17 	bl	80093de <__lo0bits>
 80099b0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80099b4:	b1d8      	cbz	r0, 80099ee <__d2b+0x7e>
 80099b6:	f1c0 0320 	rsb	r3, r0, #32
 80099ba:	fa02 f303 	lsl.w	r3, r2, r3
 80099be:	430b      	orrs	r3, r1
 80099c0:	40c2      	lsrs	r2, r0
 80099c2:	6163      	str	r3, [r4, #20]
 80099c4:	9201      	str	r2, [sp, #4]
 80099c6:	9b01      	ldr	r3, [sp, #4]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	bf0c      	ite	eq
 80099cc:	2201      	moveq	r2, #1
 80099ce:	2202      	movne	r2, #2
 80099d0:	61a3      	str	r3, [r4, #24]
 80099d2:	6122      	str	r2, [r4, #16]
 80099d4:	b1ad      	cbz	r5, 8009a02 <__d2b+0x92>
 80099d6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80099da:	4405      	add	r5, r0
 80099dc:	6035      	str	r5, [r6, #0]
 80099de:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80099e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099e4:	6018      	str	r0, [r3, #0]
 80099e6:	4620      	mov	r0, r4
 80099e8:	b002      	add	sp, #8
 80099ea:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80099ee:	6161      	str	r1, [r4, #20]
 80099f0:	e7e9      	b.n	80099c6 <__d2b+0x56>
 80099f2:	a801      	add	r0, sp, #4
 80099f4:	f7ff fcf3 	bl	80093de <__lo0bits>
 80099f8:	9b01      	ldr	r3, [sp, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	6163      	str	r3, [r4, #20]
 80099fe:	3020      	adds	r0, #32
 8009a00:	e7e7      	b.n	80099d2 <__d2b+0x62>
 8009a02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009a06:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a0a:	6030      	str	r0, [r6, #0]
 8009a0c:	6918      	ldr	r0, [r3, #16]
 8009a0e:	f7ff fcc7 	bl	80093a0 <__hi0bits>
 8009a12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a16:	e7e4      	b.n	80099e2 <__d2b+0x72>
 8009a18:	0800cb56 	.word	0x0800cb56
 8009a1c:	0800cbc7 	.word	0x0800cbc7

08009a20 <__ratio>:
 8009a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a24:	b085      	sub	sp, #20
 8009a26:	e9cd 1000 	strd	r1, r0, [sp]
 8009a2a:	a902      	add	r1, sp, #8
 8009a2c:	f7ff ff58 	bl	80098e0 <__b2d>
 8009a30:	468b      	mov	fp, r1
 8009a32:	4606      	mov	r6, r0
 8009a34:	460f      	mov	r7, r1
 8009a36:	9800      	ldr	r0, [sp, #0]
 8009a38:	a903      	add	r1, sp, #12
 8009a3a:	f7ff ff51 	bl	80098e0 <__b2d>
 8009a3e:	460d      	mov	r5, r1
 8009a40:	9b01      	ldr	r3, [sp, #4]
 8009a42:	4689      	mov	r9, r1
 8009a44:	6919      	ldr	r1, [r3, #16]
 8009a46:	9b00      	ldr	r3, [sp, #0]
 8009a48:	4604      	mov	r4, r0
 8009a4a:	691b      	ldr	r3, [r3, #16]
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	1ac9      	subs	r1, r1, r3
 8009a50:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009a54:	1a9b      	subs	r3, r3, r2
 8009a56:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	bfcd      	iteet	gt
 8009a5e:	463a      	movgt	r2, r7
 8009a60:	462a      	movle	r2, r5
 8009a62:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009a66:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009a6a:	bfd8      	it	le
 8009a6c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009a70:	464b      	mov	r3, r9
 8009a72:	4622      	mov	r2, r4
 8009a74:	4659      	mov	r1, fp
 8009a76:	f7f6 fe59 	bl	800072c <__aeabi_ddiv>
 8009a7a:	b005      	add	sp, #20
 8009a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a80 <__copybits>:
 8009a80:	3901      	subs	r1, #1
 8009a82:	b570      	push	{r4, r5, r6, lr}
 8009a84:	1149      	asrs	r1, r1, #5
 8009a86:	6914      	ldr	r4, [r2, #16]
 8009a88:	3101      	adds	r1, #1
 8009a8a:	f102 0314 	add.w	r3, r2, #20
 8009a8e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009a92:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009a96:	1f05      	subs	r5, r0, #4
 8009a98:	42a3      	cmp	r3, r4
 8009a9a:	d30c      	bcc.n	8009ab6 <__copybits+0x36>
 8009a9c:	1aa3      	subs	r3, r4, r2
 8009a9e:	3b11      	subs	r3, #17
 8009aa0:	f023 0303 	bic.w	r3, r3, #3
 8009aa4:	3211      	adds	r2, #17
 8009aa6:	42a2      	cmp	r2, r4
 8009aa8:	bf88      	it	hi
 8009aaa:	2300      	movhi	r3, #0
 8009aac:	4418      	add	r0, r3
 8009aae:	2300      	movs	r3, #0
 8009ab0:	4288      	cmp	r0, r1
 8009ab2:	d305      	bcc.n	8009ac0 <__copybits+0x40>
 8009ab4:	bd70      	pop	{r4, r5, r6, pc}
 8009ab6:	f853 6b04 	ldr.w	r6, [r3], #4
 8009aba:	f845 6f04 	str.w	r6, [r5, #4]!
 8009abe:	e7eb      	b.n	8009a98 <__copybits+0x18>
 8009ac0:	f840 3b04 	str.w	r3, [r0], #4
 8009ac4:	e7f4      	b.n	8009ab0 <__copybits+0x30>

08009ac6 <__any_on>:
 8009ac6:	f100 0214 	add.w	r2, r0, #20
 8009aca:	6900      	ldr	r0, [r0, #16]
 8009acc:	114b      	asrs	r3, r1, #5
 8009ace:	4298      	cmp	r0, r3
 8009ad0:	b510      	push	{r4, lr}
 8009ad2:	db11      	blt.n	8009af8 <__any_on+0x32>
 8009ad4:	dd0a      	ble.n	8009aec <__any_on+0x26>
 8009ad6:	f011 011f 	ands.w	r1, r1, #31
 8009ada:	d007      	beq.n	8009aec <__any_on+0x26>
 8009adc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009ae0:	fa24 f001 	lsr.w	r0, r4, r1
 8009ae4:	fa00 f101 	lsl.w	r1, r0, r1
 8009ae8:	428c      	cmp	r4, r1
 8009aea:	d10b      	bne.n	8009b04 <__any_on+0x3e>
 8009aec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d803      	bhi.n	8009afc <__any_on+0x36>
 8009af4:	2000      	movs	r0, #0
 8009af6:	bd10      	pop	{r4, pc}
 8009af8:	4603      	mov	r3, r0
 8009afa:	e7f7      	b.n	8009aec <__any_on+0x26>
 8009afc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b00:	2900      	cmp	r1, #0
 8009b02:	d0f5      	beq.n	8009af0 <__any_on+0x2a>
 8009b04:	2001      	movs	r0, #1
 8009b06:	e7f6      	b.n	8009af6 <__any_on+0x30>

08009b08 <__ascii_wctomb>:
 8009b08:	4603      	mov	r3, r0
 8009b0a:	4608      	mov	r0, r1
 8009b0c:	b141      	cbz	r1, 8009b20 <__ascii_wctomb+0x18>
 8009b0e:	2aff      	cmp	r2, #255	@ 0xff
 8009b10:	d904      	bls.n	8009b1c <__ascii_wctomb+0x14>
 8009b12:	228a      	movs	r2, #138	@ 0x8a
 8009b14:	f04f 30ff 	mov.w	r0, #4294967295
 8009b18:	601a      	str	r2, [r3, #0]
 8009b1a:	4770      	bx	lr
 8009b1c:	2001      	movs	r0, #1
 8009b1e:	700a      	strb	r2, [r1, #0]
 8009b20:	4770      	bx	lr

08009b22 <__ssputs_r>:
 8009b22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b26:	461f      	mov	r7, r3
 8009b28:	688e      	ldr	r6, [r1, #8]
 8009b2a:	4682      	mov	sl, r0
 8009b2c:	42be      	cmp	r6, r7
 8009b2e:	460c      	mov	r4, r1
 8009b30:	4690      	mov	r8, r2
 8009b32:	680b      	ldr	r3, [r1, #0]
 8009b34:	d82d      	bhi.n	8009b92 <__ssputs_r+0x70>
 8009b36:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b3a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009b3e:	d026      	beq.n	8009b8e <__ssputs_r+0x6c>
 8009b40:	6965      	ldr	r5, [r4, #20]
 8009b42:	6909      	ldr	r1, [r1, #16]
 8009b44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b48:	eba3 0901 	sub.w	r9, r3, r1
 8009b4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b50:	1c7b      	adds	r3, r7, #1
 8009b52:	444b      	add	r3, r9
 8009b54:	106d      	asrs	r5, r5, #1
 8009b56:	429d      	cmp	r5, r3
 8009b58:	bf38      	it	cc
 8009b5a:	461d      	movcc	r5, r3
 8009b5c:	0553      	lsls	r3, r2, #21
 8009b5e:	d527      	bpl.n	8009bb0 <__ssputs_r+0x8e>
 8009b60:	4629      	mov	r1, r5
 8009b62:	f7ff fa8d 	bl	8009080 <_malloc_r>
 8009b66:	4606      	mov	r6, r0
 8009b68:	b360      	cbz	r0, 8009bc4 <__ssputs_r+0xa2>
 8009b6a:	464a      	mov	r2, r9
 8009b6c:	6921      	ldr	r1, [r4, #16]
 8009b6e:	f7fe f870 	bl	8007c52 <memcpy>
 8009b72:	89a3      	ldrh	r3, [r4, #12]
 8009b74:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009b78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b7c:	81a3      	strh	r3, [r4, #12]
 8009b7e:	6126      	str	r6, [r4, #16]
 8009b80:	444e      	add	r6, r9
 8009b82:	6026      	str	r6, [r4, #0]
 8009b84:	463e      	mov	r6, r7
 8009b86:	6165      	str	r5, [r4, #20]
 8009b88:	eba5 0509 	sub.w	r5, r5, r9
 8009b8c:	60a5      	str	r5, [r4, #8]
 8009b8e:	42be      	cmp	r6, r7
 8009b90:	d900      	bls.n	8009b94 <__ssputs_r+0x72>
 8009b92:	463e      	mov	r6, r7
 8009b94:	4632      	mov	r2, r6
 8009b96:	4641      	mov	r1, r8
 8009b98:	6820      	ldr	r0, [r4, #0]
 8009b9a:	f000 f9c1 	bl	8009f20 <memmove>
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	68a3      	ldr	r3, [r4, #8]
 8009ba2:	1b9b      	subs	r3, r3, r6
 8009ba4:	60a3      	str	r3, [r4, #8]
 8009ba6:	6823      	ldr	r3, [r4, #0]
 8009ba8:	4433      	add	r3, r6
 8009baa:	6023      	str	r3, [r4, #0]
 8009bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bb0:	462a      	mov	r2, r5
 8009bb2:	f000 fa11 	bl	8009fd8 <_realloc_r>
 8009bb6:	4606      	mov	r6, r0
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d1e0      	bne.n	8009b7e <__ssputs_r+0x5c>
 8009bbc:	4650      	mov	r0, sl
 8009bbe:	6921      	ldr	r1, [r4, #16]
 8009bc0:	f7fe feb2 	bl	8008928 <_free_r>
 8009bc4:	230c      	movs	r3, #12
 8009bc6:	f8ca 3000 	str.w	r3, [sl]
 8009bca:	89a3      	ldrh	r3, [r4, #12]
 8009bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bd4:	81a3      	strh	r3, [r4, #12]
 8009bd6:	e7e9      	b.n	8009bac <__ssputs_r+0x8a>

08009bd8 <_svfiprintf_r>:
 8009bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bdc:	4698      	mov	r8, r3
 8009bde:	898b      	ldrh	r3, [r1, #12]
 8009be0:	4607      	mov	r7, r0
 8009be2:	061b      	lsls	r3, r3, #24
 8009be4:	460d      	mov	r5, r1
 8009be6:	4614      	mov	r4, r2
 8009be8:	b09d      	sub	sp, #116	@ 0x74
 8009bea:	d510      	bpl.n	8009c0e <_svfiprintf_r+0x36>
 8009bec:	690b      	ldr	r3, [r1, #16]
 8009bee:	b973      	cbnz	r3, 8009c0e <_svfiprintf_r+0x36>
 8009bf0:	2140      	movs	r1, #64	@ 0x40
 8009bf2:	f7ff fa45 	bl	8009080 <_malloc_r>
 8009bf6:	6028      	str	r0, [r5, #0]
 8009bf8:	6128      	str	r0, [r5, #16]
 8009bfa:	b930      	cbnz	r0, 8009c0a <_svfiprintf_r+0x32>
 8009bfc:	230c      	movs	r3, #12
 8009bfe:	603b      	str	r3, [r7, #0]
 8009c00:	f04f 30ff 	mov.w	r0, #4294967295
 8009c04:	b01d      	add	sp, #116	@ 0x74
 8009c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c0a:	2340      	movs	r3, #64	@ 0x40
 8009c0c:	616b      	str	r3, [r5, #20]
 8009c0e:	2300      	movs	r3, #0
 8009c10:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c12:	2320      	movs	r3, #32
 8009c14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c18:	2330      	movs	r3, #48	@ 0x30
 8009c1a:	f04f 0901 	mov.w	r9, #1
 8009c1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c22:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009dbc <_svfiprintf_r+0x1e4>
 8009c26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c2a:	4623      	mov	r3, r4
 8009c2c:	469a      	mov	sl, r3
 8009c2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c32:	b10a      	cbz	r2, 8009c38 <_svfiprintf_r+0x60>
 8009c34:	2a25      	cmp	r2, #37	@ 0x25
 8009c36:	d1f9      	bne.n	8009c2c <_svfiprintf_r+0x54>
 8009c38:	ebba 0b04 	subs.w	fp, sl, r4
 8009c3c:	d00b      	beq.n	8009c56 <_svfiprintf_r+0x7e>
 8009c3e:	465b      	mov	r3, fp
 8009c40:	4622      	mov	r2, r4
 8009c42:	4629      	mov	r1, r5
 8009c44:	4638      	mov	r0, r7
 8009c46:	f7ff ff6c 	bl	8009b22 <__ssputs_r>
 8009c4a:	3001      	adds	r0, #1
 8009c4c:	f000 80a7 	beq.w	8009d9e <_svfiprintf_r+0x1c6>
 8009c50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c52:	445a      	add	r2, fp
 8009c54:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c56:	f89a 3000 	ldrb.w	r3, [sl]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	f000 809f 	beq.w	8009d9e <_svfiprintf_r+0x1c6>
 8009c60:	2300      	movs	r3, #0
 8009c62:	f04f 32ff 	mov.w	r2, #4294967295
 8009c66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c6a:	f10a 0a01 	add.w	sl, sl, #1
 8009c6e:	9304      	str	r3, [sp, #16]
 8009c70:	9307      	str	r3, [sp, #28]
 8009c72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c76:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c78:	4654      	mov	r4, sl
 8009c7a:	2205      	movs	r2, #5
 8009c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c80:	484e      	ldr	r0, [pc, #312]	@ (8009dbc <_svfiprintf_r+0x1e4>)
 8009c82:	f7fd ffd8 	bl	8007c36 <memchr>
 8009c86:	9a04      	ldr	r2, [sp, #16]
 8009c88:	b9d8      	cbnz	r0, 8009cc2 <_svfiprintf_r+0xea>
 8009c8a:	06d0      	lsls	r0, r2, #27
 8009c8c:	bf44      	itt	mi
 8009c8e:	2320      	movmi	r3, #32
 8009c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c94:	0711      	lsls	r1, r2, #28
 8009c96:	bf44      	itt	mi
 8009c98:	232b      	movmi	r3, #43	@ 0x2b
 8009c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c9e:	f89a 3000 	ldrb.w	r3, [sl]
 8009ca2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ca4:	d015      	beq.n	8009cd2 <_svfiprintf_r+0xfa>
 8009ca6:	4654      	mov	r4, sl
 8009ca8:	2000      	movs	r0, #0
 8009caa:	f04f 0c0a 	mov.w	ip, #10
 8009cae:	9a07      	ldr	r2, [sp, #28]
 8009cb0:	4621      	mov	r1, r4
 8009cb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cb6:	3b30      	subs	r3, #48	@ 0x30
 8009cb8:	2b09      	cmp	r3, #9
 8009cba:	d94b      	bls.n	8009d54 <_svfiprintf_r+0x17c>
 8009cbc:	b1b0      	cbz	r0, 8009cec <_svfiprintf_r+0x114>
 8009cbe:	9207      	str	r2, [sp, #28]
 8009cc0:	e014      	b.n	8009cec <_svfiprintf_r+0x114>
 8009cc2:	eba0 0308 	sub.w	r3, r0, r8
 8009cc6:	fa09 f303 	lsl.w	r3, r9, r3
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	46a2      	mov	sl, r4
 8009cce:	9304      	str	r3, [sp, #16]
 8009cd0:	e7d2      	b.n	8009c78 <_svfiprintf_r+0xa0>
 8009cd2:	9b03      	ldr	r3, [sp, #12]
 8009cd4:	1d19      	adds	r1, r3, #4
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	9103      	str	r1, [sp, #12]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	bfbb      	ittet	lt
 8009cde:	425b      	neglt	r3, r3
 8009ce0:	f042 0202 	orrlt.w	r2, r2, #2
 8009ce4:	9307      	strge	r3, [sp, #28]
 8009ce6:	9307      	strlt	r3, [sp, #28]
 8009ce8:	bfb8      	it	lt
 8009cea:	9204      	strlt	r2, [sp, #16]
 8009cec:	7823      	ldrb	r3, [r4, #0]
 8009cee:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cf0:	d10a      	bne.n	8009d08 <_svfiprintf_r+0x130>
 8009cf2:	7863      	ldrb	r3, [r4, #1]
 8009cf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cf6:	d132      	bne.n	8009d5e <_svfiprintf_r+0x186>
 8009cf8:	9b03      	ldr	r3, [sp, #12]
 8009cfa:	3402      	adds	r4, #2
 8009cfc:	1d1a      	adds	r2, r3, #4
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	9203      	str	r2, [sp, #12]
 8009d02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d06:	9305      	str	r3, [sp, #20]
 8009d08:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009dc0 <_svfiprintf_r+0x1e8>
 8009d0c:	2203      	movs	r2, #3
 8009d0e:	4650      	mov	r0, sl
 8009d10:	7821      	ldrb	r1, [r4, #0]
 8009d12:	f7fd ff90 	bl	8007c36 <memchr>
 8009d16:	b138      	cbz	r0, 8009d28 <_svfiprintf_r+0x150>
 8009d18:	2240      	movs	r2, #64	@ 0x40
 8009d1a:	9b04      	ldr	r3, [sp, #16]
 8009d1c:	eba0 000a 	sub.w	r0, r0, sl
 8009d20:	4082      	lsls	r2, r0
 8009d22:	4313      	orrs	r3, r2
 8009d24:	3401      	adds	r4, #1
 8009d26:	9304      	str	r3, [sp, #16]
 8009d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d2c:	2206      	movs	r2, #6
 8009d2e:	4825      	ldr	r0, [pc, #148]	@ (8009dc4 <_svfiprintf_r+0x1ec>)
 8009d30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d34:	f7fd ff7f 	bl	8007c36 <memchr>
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	d036      	beq.n	8009daa <_svfiprintf_r+0x1d2>
 8009d3c:	4b22      	ldr	r3, [pc, #136]	@ (8009dc8 <_svfiprintf_r+0x1f0>)
 8009d3e:	bb1b      	cbnz	r3, 8009d88 <_svfiprintf_r+0x1b0>
 8009d40:	9b03      	ldr	r3, [sp, #12]
 8009d42:	3307      	adds	r3, #7
 8009d44:	f023 0307 	bic.w	r3, r3, #7
 8009d48:	3308      	adds	r3, #8
 8009d4a:	9303      	str	r3, [sp, #12]
 8009d4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d4e:	4433      	add	r3, r6
 8009d50:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d52:	e76a      	b.n	8009c2a <_svfiprintf_r+0x52>
 8009d54:	460c      	mov	r4, r1
 8009d56:	2001      	movs	r0, #1
 8009d58:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d5c:	e7a8      	b.n	8009cb0 <_svfiprintf_r+0xd8>
 8009d5e:	2300      	movs	r3, #0
 8009d60:	f04f 0c0a 	mov.w	ip, #10
 8009d64:	4619      	mov	r1, r3
 8009d66:	3401      	adds	r4, #1
 8009d68:	9305      	str	r3, [sp, #20]
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d70:	3a30      	subs	r2, #48	@ 0x30
 8009d72:	2a09      	cmp	r2, #9
 8009d74:	d903      	bls.n	8009d7e <_svfiprintf_r+0x1a6>
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d0c6      	beq.n	8009d08 <_svfiprintf_r+0x130>
 8009d7a:	9105      	str	r1, [sp, #20]
 8009d7c:	e7c4      	b.n	8009d08 <_svfiprintf_r+0x130>
 8009d7e:	4604      	mov	r4, r0
 8009d80:	2301      	movs	r3, #1
 8009d82:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d86:	e7f0      	b.n	8009d6a <_svfiprintf_r+0x192>
 8009d88:	ab03      	add	r3, sp, #12
 8009d8a:	9300      	str	r3, [sp, #0]
 8009d8c:	462a      	mov	r2, r5
 8009d8e:	4638      	mov	r0, r7
 8009d90:	4b0e      	ldr	r3, [pc, #56]	@ (8009dcc <_svfiprintf_r+0x1f4>)
 8009d92:	a904      	add	r1, sp, #16
 8009d94:	f7fc ffca 	bl	8006d2c <_printf_float>
 8009d98:	1c42      	adds	r2, r0, #1
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	d1d6      	bne.n	8009d4c <_svfiprintf_r+0x174>
 8009d9e:	89ab      	ldrh	r3, [r5, #12]
 8009da0:	065b      	lsls	r3, r3, #25
 8009da2:	f53f af2d 	bmi.w	8009c00 <_svfiprintf_r+0x28>
 8009da6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009da8:	e72c      	b.n	8009c04 <_svfiprintf_r+0x2c>
 8009daa:	ab03      	add	r3, sp, #12
 8009dac:	9300      	str	r3, [sp, #0]
 8009dae:	462a      	mov	r2, r5
 8009db0:	4638      	mov	r0, r7
 8009db2:	4b06      	ldr	r3, [pc, #24]	@ (8009dcc <_svfiprintf_r+0x1f4>)
 8009db4:	a904      	add	r1, sp, #16
 8009db6:	f7fd fa57 	bl	8007268 <_printf_i>
 8009dba:	e7ed      	b.n	8009d98 <_svfiprintf_r+0x1c0>
 8009dbc:	0800cd20 	.word	0x0800cd20
 8009dc0:	0800cd26 	.word	0x0800cd26
 8009dc4:	0800cd2a 	.word	0x0800cd2a
 8009dc8:	08006d2d 	.word	0x08006d2d
 8009dcc:	08009b23 	.word	0x08009b23

08009dd0 <__sflush_r>:
 8009dd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd6:	0716      	lsls	r6, r2, #28
 8009dd8:	4605      	mov	r5, r0
 8009dda:	460c      	mov	r4, r1
 8009ddc:	d454      	bmi.n	8009e88 <__sflush_r+0xb8>
 8009dde:	684b      	ldr	r3, [r1, #4]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	dc02      	bgt.n	8009dea <__sflush_r+0x1a>
 8009de4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	dd48      	ble.n	8009e7c <__sflush_r+0xac>
 8009dea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009dec:	2e00      	cmp	r6, #0
 8009dee:	d045      	beq.n	8009e7c <__sflush_r+0xac>
 8009df0:	2300      	movs	r3, #0
 8009df2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009df6:	682f      	ldr	r7, [r5, #0]
 8009df8:	6a21      	ldr	r1, [r4, #32]
 8009dfa:	602b      	str	r3, [r5, #0]
 8009dfc:	d030      	beq.n	8009e60 <__sflush_r+0x90>
 8009dfe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009e00:	89a3      	ldrh	r3, [r4, #12]
 8009e02:	0759      	lsls	r1, r3, #29
 8009e04:	d505      	bpl.n	8009e12 <__sflush_r+0x42>
 8009e06:	6863      	ldr	r3, [r4, #4]
 8009e08:	1ad2      	subs	r2, r2, r3
 8009e0a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009e0c:	b10b      	cbz	r3, 8009e12 <__sflush_r+0x42>
 8009e0e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009e10:	1ad2      	subs	r2, r2, r3
 8009e12:	2300      	movs	r3, #0
 8009e14:	4628      	mov	r0, r5
 8009e16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e18:	6a21      	ldr	r1, [r4, #32]
 8009e1a:	47b0      	blx	r6
 8009e1c:	1c43      	adds	r3, r0, #1
 8009e1e:	89a3      	ldrh	r3, [r4, #12]
 8009e20:	d106      	bne.n	8009e30 <__sflush_r+0x60>
 8009e22:	6829      	ldr	r1, [r5, #0]
 8009e24:	291d      	cmp	r1, #29
 8009e26:	d82b      	bhi.n	8009e80 <__sflush_r+0xb0>
 8009e28:	4a28      	ldr	r2, [pc, #160]	@ (8009ecc <__sflush_r+0xfc>)
 8009e2a:	410a      	asrs	r2, r1
 8009e2c:	07d6      	lsls	r6, r2, #31
 8009e2e:	d427      	bmi.n	8009e80 <__sflush_r+0xb0>
 8009e30:	2200      	movs	r2, #0
 8009e32:	6062      	str	r2, [r4, #4]
 8009e34:	6922      	ldr	r2, [r4, #16]
 8009e36:	04d9      	lsls	r1, r3, #19
 8009e38:	6022      	str	r2, [r4, #0]
 8009e3a:	d504      	bpl.n	8009e46 <__sflush_r+0x76>
 8009e3c:	1c42      	adds	r2, r0, #1
 8009e3e:	d101      	bne.n	8009e44 <__sflush_r+0x74>
 8009e40:	682b      	ldr	r3, [r5, #0]
 8009e42:	b903      	cbnz	r3, 8009e46 <__sflush_r+0x76>
 8009e44:	6560      	str	r0, [r4, #84]	@ 0x54
 8009e46:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e48:	602f      	str	r7, [r5, #0]
 8009e4a:	b1b9      	cbz	r1, 8009e7c <__sflush_r+0xac>
 8009e4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e50:	4299      	cmp	r1, r3
 8009e52:	d002      	beq.n	8009e5a <__sflush_r+0x8a>
 8009e54:	4628      	mov	r0, r5
 8009e56:	f7fe fd67 	bl	8008928 <_free_r>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e5e:	e00d      	b.n	8009e7c <__sflush_r+0xac>
 8009e60:	2301      	movs	r3, #1
 8009e62:	4628      	mov	r0, r5
 8009e64:	47b0      	blx	r6
 8009e66:	4602      	mov	r2, r0
 8009e68:	1c50      	adds	r0, r2, #1
 8009e6a:	d1c9      	bne.n	8009e00 <__sflush_r+0x30>
 8009e6c:	682b      	ldr	r3, [r5, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d0c6      	beq.n	8009e00 <__sflush_r+0x30>
 8009e72:	2b1d      	cmp	r3, #29
 8009e74:	d001      	beq.n	8009e7a <__sflush_r+0xaa>
 8009e76:	2b16      	cmp	r3, #22
 8009e78:	d11d      	bne.n	8009eb6 <__sflush_r+0xe6>
 8009e7a:	602f      	str	r7, [r5, #0]
 8009e7c:	2000      	movs	r0, #0
 8009e7e:	e021      	b.n	8009ec4 <__sflush_r+0xf4>
 8009e80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e84:	b21b      	sxth	r3, r3
 8009e86:	e01a      	b.n	8009ebe <__sflush_r+0xee>
 8009e88:	690f      	ldr	r7, [r1, #16]
 8009e8a:	2f00      	cmp	r7, #0
 8009e8c:	d0f6      	beq.n	8009e7c <__sflush_r+0xac>
 8009e8e:	0793      	lsls	r3, r2, #30
 8009e90:	bf18      	it	ne
 8009e92:	2300      	movne	r3, #0
 8009e94:	680e      	ldr	r6, [r1, #0]
 8009e96:	bf08      	it	eq
 8009e98:	694b      	ldreq	r3, [r1, #20]
 8009e9a:	1bf6      	subs	r6, r6, r7
 8009e9c:	600f      	str	r7, [r1, #0]
 8009e9e:	608b      	str	r3, [r1, #8]
 8009ea0:	2e00      	cmp	r6, #0
 8009ea2:	ddeb      	ble.n	8009e7c <__sflush_r+0xac>
 8009ea4:	4633      	mov	r3, r6
 8009ea6:	463a      	mov	r2, r7
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	6a21      	ldr	r1, [r4, #32]
 8009eac:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009eb0:	47e0      	blx	ip
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	dc07      	bgt.n	8009ec6 <__sflush_r+0xf6>
 8009eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec2:	81a3      	strh	r3, [r4, #12]
 8009ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ec6:	4407      	add	r7, r0
 8009ec8:	1a36      	subs	r6, r6, r0
 8009eca:	e7e9      	b.n	8009ea0 <__sflush_r+0xd0>
 8009ecc:	dfbffffe 	.word	0xdfbffffe

08009ed0 <_fflush_r>:
 8009ed0:	b538      	push	{r3, r4, r5, lr}
 8009ed2:	690b      	ldr	r3, [r1, #16]
 8009ed4:	4605      	mov	r5, r0
 8009ed6:	460c      	mov	r4, r1
 8009ed8:	b913      	cbnz	r3, 8009ee0 <_fflush_r+0x10>
 8009eda:	2500      	movs	r5, #0
 8009edc:	4628      	mov	r0, r5
 8009ede:	bd38      	pop	{r3, r4, r5, pc}
 8009ee0:	b118      	cbz	r0, 8009eea <_fflush_r+0x1a>
 8009ee2:	6a03      	ldr	r3, [r0, #32]
 8009ee4:	b90b      	cbnz	r3, 8009eea <_fflush_r+0x1a>
 8009ee6:	f7fd fd7b 	bl	80079e0 <__sinit>
 8009eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d0f3      	beq.n	8009eda <_fflush_r+0xa>
 8009ef2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009ef4:	07d0      	lsls	r0, r2, #31
 8009ef6:	d404      	bmi.n	8009f02 <_fflush_r+0x32>
 8009ef8:	0599      	lsls	r1, r3, #22
 8009efa:	d402      	bmi.n	8009f02 <_fflush_r+0x32>
 8009efc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009efe:	f7fd fe98 	bl	8007c32 <__retarget_lock_acquire_recursive>
 8009f02:	4628      	mov	r0, r5
 8009f04:	4621      	mov	r1, r4
 8009f06:	f7ff ff63 	bl	8009dd0 <__sflush_r>
 8009f0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009f0c:	4605      	mov	r5, r0
 8009f0e:	07da      	lsls	r2, r3, #31
 8009f10:	d4e4      	bmi.n	8009edc <_fflush_r+0xc>
 8009f12:	89a3      	ldrh	r3, [r4, #12]
 8009f14:	059b      	lsls	r3, r3, #22
 8009f16:	d4e1      	bmi.n	8009edc <_fflush_r+0xc>
 8009f18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f1a:	f7fd fe8b 	bl	8007c34 <__retarget_lock_release_recursive>
 8009f1e:	e7dd      	b.n	8009edc <_fflush_r+0xc>

08009f20 <memmove>:
 8009f20:	4288      	cmp	r0, r1
 8009f22:	b510      	push	{r4, lr}
 8009f24:	eb01 0402 	add.w	r4, r1, r2
 8009f28:	d902      	bls.n	8009f30 <memmove+0x10>
 8009f2a:	4284      	cmp	r4, r0
 8009f2c:	4623      	mov	r3, r4
 8009f2e:	d807      	bhi.n	8009f40 <memmove+0x20>
 8009f30:	1e43      	subs	r3, r0, #1
 8009f32:	42a1      	cmp	r1, r4
 8009f34:	d008      	beq.n	8009f48 <memmove+0x28>
 8009f36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f3e:	e7f8      	b.n	8009f32 <memmove+0x12>
 8009f40:	4601      	mov	r1, r0
 8009f42:	4402      	add	r2, r0
 8009f44:	428a      	cmp	r2, r1
 8009f46:	d100      	bne.n	8009f4a <memmove+0x2a>
 8009f48:	bd10      	pop	{r4, pc}
 8009f4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f52:	e7f7      	b.n	8009f44 <memmove+0x24>

08009f54 <_sbrk_r>:
 8009f54:	b538      	push	{r3, r4, r5, lr}
 8009f56:	2300      	movs	r3, #0
 8009f58:	4d05      	ldr	r5, [pc, #20]	@ (8009f70 <_sbrk_r+0x1c>)
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	4608      	mov	r0, r1
 8009f5e:	602b      	str	r3, [r5, #0]
 8009f60:	f7f9 f972 	bl	8003248 <_sbrk>
 8009f64:	1c43      	adds	r3, r0, #1
 8009f66:	d102      	bne.n	8009f6e <_sbrk_r+0x1a>
 8009f68:	682b      	ldr	r3, [r5, #0]
 8009f6a:	b103      	cbz	r3, 8009f6e <_sbrk_r+0x1a>
 8009f6c:	6023      	str	r3, [r4, #0]
 8009f6e:	bd38      	pop	{r3, r4, r5, pc}
 8009f70:	20000bb8 	.word	0x20000bb8

08009f74 <__assert_func>:
 8009f74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f76:	4614      	mov	r4, r2
 8009f78:	461a      	mov	r2, r3
 8009f7a:	4b09      	ldr	r3, [pc, #36]	@ (8009fa0 <__assert_func+0x2c>)
 8009f7c:	4605      	mov	r5, r0
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68d8      	ldr	r0, [r3, #12]
 8009f82:	b954      	cbnz	r4, 8009f9a <__assert_func+0x26>
 8009f84:	4b07      	ldr	r3, [pc, #28]	@ (8009fa4 <__assert_func+0x30>)
 8009f86:	461c      	mov	r4, r3
 8009f88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f8c:	9100      	str	r1, [sp, #0]
 8009f8e:	462b      	mov	r3, r5
 8009f90:	4905      	ldr	r1, [pc, #20]	@ (8009fa8 <__assert_func+0x34>)
 8009f92:	f000 f84f 	bl	800a034 <fiprintf>
 8009f96:	f000 f85f 	bl	800a058 <abort>
 8009f9a:	4b04      	ldr	r3, [pc, #16]	@ (8009fac <__assert_func+0x38>)
 8009f9c:	e7f4      	b.n	8009f88 <__assert_func+0x14>
 8009f9e:	bf00      	nop
 8009fa0:	2000019c 	.word	0x2000019c
 8009fa4:	0800cd6c 	.word	0x0800cd6c
 8009fa8:	0800cd3e 	.word	0x0800cd3e
 8009fac:	0800cd31 	.word	0x0800cd31

08009fb0 <_calloc_r>:
 8009fb0:	b570      	push	{r4, r5, r6, lr}
 8009fb2:	fba1 5402 	umull	r5, r4, r1, r2
 8009fb6:	b93c      	cbnz	r4, 8009fc8 <_calloc_r+0x18>
 8009fb8:	4629      	mov	r1, r5
 8009fba:	f7ff f861 	bl	8009080 <_malloc_r>
 8009fbe:	4606      	mov	r6, r0
 8009fc0:	b928      	cbnz	r0, 8009fce <_calloc_r+0x1e>
 8009fc2:	2600      	movs	r6, #0
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	bd70      	pop	{r4, r5, r6, pc}
 8009fc8:	220c      	movs	r2, #12
 8009fca:	6002      	str	r2, [r0, #0]
 8009fcc:	e7f9      	b.n	8009fc2 <_calloc_r+0x12>
 8009fce:	462a      	mov	r2, r5
 8009fd0:	4621      	mov	r1, r4
 8009fd2:	f7fd fd9e 	bl	8007b12 <memset>
 8009fd6:	e7f5      	b.n	8009fc4 <_calloc_r+0x14>

08009fd8 <_realloc_r>:
 8009fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fdc:	4680      	mov	r8, r0
 8009fde:	4615      	mov	r5, r2
 8009fe0:	460c      	mov	r4, r1
 8009fe2:	b921      	cbnz	r1, 8009fee <_realloc_r+0x16>
 8009fe4:	4611      	mov	r1, r2
 8009fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fea:	f7ff b849 	b.w	8009080 <_malloc_r>
 8009fee:	b92a      	cbnz	r2, 8009ffc <_realloc_r+0x24>
 8009ff0:	f7fe fc9a 	bl	8008928 <_free_r>
 8009ff4:	2400      	movs	r4, #0
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ffc:	f000 f833 	bl	800a066 <_malloc_usable_size_r>
 800a000:	4285      	cmp	r5, r0
 800a002:	4606      	mov	r6, r0
 800a004:	d802      	bhi.n	800a00c <_realloc_r+0x34>
 800a006:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a00a:	d8f4      	bhi.n	8009ff6 <_realloc_r+0x1e>
 800a00c:	4629      	mov	r1, r5
 800a00e:	4640      	mov	r0, r8
 800a010:	f7ff f836 	bl	8009080 <_malloc_r>
 800a014:	4607      	mov	r7, r0
 800a016:	2800      	cmp	r0, #0
 800a018:	d0ec      	beq.n	8009ff4 <_realloc_r+0x1c>
 800a01a:	42b5      	cmp	r5, r6
 800a01c:	462a      	mov	r2, r5
 800a01e:	4621      	mov	r1, r4
 800a020:	bf28      	it	cs
 800a022:	4632      	movcs	r2, r6
 800a024:	f7fd fe15 	bl	8007c52 <memcpy>
 800a028:	4621      	mov	r1, r4
 800a02a:	4640      	mov	r0, r8
 800a02c:	f7fe fc7c 	bl	8008928 <_free_r>
 800a030:	463c      	mov	r4, r7
 800a032:	e7e0      	b.n	8009ff6 <_realloc_r+0x1e>

0800a034 <fiprintf>:
 800a034:	b40e      	push	{r1, r2, r3}
 800a036:	b503      	push	{r0, r1, lr}
 800a038:	4601      	mov	r1, r0
 800a03a:	ab03      	add	r3, sp, #12
 800a03c:	4805      	ldr	r0, [pc, #20]	@ (800a054 <fiprintf+0x20>)
 800a03e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a042:	6800      	ldr	r0, [r0, #0]
 800a044:	9301      	str	r3, [sp, #4]
 800a046:	f000 f83d 	bl	800a0c4 <_vfiprintf_r>
 800a04a:	b002      	add	sp, #8
 800a04c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a050:	b003      	add	sp, #12
 800a052:	4770      	bx	lr
 800a054:	2000019c 	.word	0x2000019c

0800a058 <abort>:
 800a058:	2006      	movs	r0, #6
 800a05a:	b508      	push	{r3, lr}
 800a05c:	f000 fa06 	bl	800a46c <raise>
 800a060:	2001      	movs	r0, #1
 800a062:	f7f9 f87c 	bl	800315e <_exit>

0800a066 <_malloc_usable_size_r>:
 800a066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a06a:	1f18      	subs	r0, r3, #4
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	bfbc      	itt	lt
 800a070:	580b      	ldrlt	r3, [r1, r0]
 800a072:	18c0      	addlt	r0, r0, r3
 800a074:	4770      	bx	lr

0800a076 <__sfputc_r>:
 800a076:	6893      	ldr	r3, [r2, #8]
 800a078:	b410      	push	{r4}
 800a07a:	3b01      	subs	r3, #1
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	6093      	str	r3, [r2, #8]
 800a080:	da07      	bge.n	800a092 <__sfputc_r+0x1c>
 800a082:	6994      	ldr	r4, [r2, #24]
 800a084:	42a3      	cmp	r3, r4
 800a086:	db01      	blt.n	800a08c <__sfputc_r+0x16>
 800a088:	290a      	cmp	r1, #10
 800a08a:	d102      	bne.n	800a092 <__sfputc_r+0x1c>
 800a08c:	bc10      	pop	{r4}
 800a08e:	f000 b931 	b.w	800a2f4 <__swbuf_r>
 800a092:	6813      	ldr	r3, [r2, #0]
 800a094:	1c58      	adds	r0, r3, #1
 800a096:	6010      	str	r0, [r2, #0]
 800a098:	7019      	strb	r1, [r3, #0]
 800a09a:	4608      	mov	r0, r1
 800a09c:	bc10      	pop	{r4}
 800a09e:	4770      	bx	lr

0800a0a0 <__sfputs_r>:
 800a0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a2:	4606      	mov	r6, r0
 800a0a4:	460f      	mov	r7, r1
 800a0a6:	4614      	mov	r4, r2
 800a0a8:	18d5      	adds	r5, r2, r3
 800a0aa:	42ac      	cmp	r4, r5
 800a0ac:	d101      	bne.n	800a0b2 <__sfputs_r+0x12>
 800a0ae:	2000      	movs	r0, #0
 800a0b0:	e007      	b.n	800a0c2 <__sfputs_r+0x22>
 800a0b2:	463a      	mov	r2, r7
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ba:	f7ff ffdc 	bl	800a076 <__sfputc_r>
 800a0be:	1c43      	adds	r3, r0, #1
 800a0c0:	d1f3      	bne.n	800a0aa <__sfputs_r+0xa>
 800a0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a0c4 <_vfiprintf_r>:
 800a0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c8:	460d      	mov	r5, r1
 800a0ca:	4614      	mov	r4, r2
 800a0cc:	4698      	mov	r8, r3
 800a0ce:	4606      	mov	r6, r0
 800a0d0:	b09d      	sub	sp, #116	@ 0x74
 800a0d2:	b118      	cbz	r0, 800a0dc <_vfiprintf_r+0x18>
 800a0d4:	6a03      	ldr	r3, [r0, #32]
 800a0d6:	b90b      	cbnz	r3, 800a0dc <_vfiprintf_r+0x18>
 800a0d8:	f7fd fc82 	bl	80079e0 <__sinit>
 800a0dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0de:	07d9      	lsls	r1, r3, #31
 800a0e0:	d405      	bmi.n	800a0ee <_vfiprintf_r+0x2a>
 800a0e2:	89ab      	ldrh	r3, [r5, #12]
 800a0e4:	059a      	lsls	r2, r3, #22
 800a0e6:	d402      	bmi.n	800a0ee <_vfiprintf_r+0x2a>
 800a0e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0ea:	f7fd fda2 	bl	8007c32 <__retarget_lock_acquire_recursive>
 800a0ee:	89ab      	ldrh	r3, [r5, #12]
 800a0f0:	071b      	lsls	r3, r3, #28
 800a0f2:	d501      	bpl.n	800a0f8 <_vfiprintf_r+0x34>
 800a0f4:	692b      	ldr	r3, [r5, #16]
 800a0f6:	b99b      	cbnz	r3, 800a120 <_vfiprintf_r+0x5c>
 800a0f8:	4629      	mov	r1, r5
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	f000 f938 	bl	800a370 <__swsetup_r>
 800a100:	b170      	cbz	r0, 800a120 <_vfiprintf_r+0x5c>
 800a102:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a104:	07dc      	lsls	r4, r3, #31
 800a106:	d504      	bpl.n	800a112 <_vfiprintf_r+0x4e>
 800a108:	f04f 30ff 	mov.w	r0, #4294967295
 800a10c:	b01d      	add	sp, #116	@ 0x74
 800a10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a112:	89ab      	ldrh	r3, [r5, #12]
 800a114:	0598      	lsls	r0, r3, #22
 800a116:	d4f7      	bmi.n	800a108 <_vfiprintf_r+0x44>
 800a118:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a11a:	f7fd fd8b 	bl	8007c34 <__retarget_lock_release_recursive>
 800a11e:	e7f3      	b.n	800a108 <_vfiprintf_r+0x44>
 800a120:	2300      	movs	r3, #0
 800a122:	9309      	str	r3, [sp, #36]	@ 0x24
 800a124:	2320      	movs	r3, #32
 800a126:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a12a:	2330      	movs	r3, #48	@ 0x30
 800a12c:	f04f 0901 	mov.w	r9, #1
 800a130:	f8cd 800c 	str.w	r8, [sp, #12]
 800a134:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a2e0 <_vfiprintf_r+0x21c>
 800a138:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a13c:	4623      	mov	r3, r4
 800a13e:	469a      	mov	sl, r3
 800a140:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a144:	b10a      	cbz	r2, 800a14a <_vfiprintf_r+0x86>
 800a146:	2a25      	cmp	r2, #37	@ 0x25
 800a148:	d1f9      	bne.n	800a13e <_vfiprintf_r+0x7a>
 800a14a:	ebba 0b04 	subs.w	fp, sl, r4
 800a14e:	d00b      	beq.n	800a168 <_vfiprintf_r+0xa4>
 800a150:	465b      	mov	r3, fp
 800a152:	4622      	mov	r2, r4
 800a154:	4629      	mov	r1, r5
 800a156:	4630      	mov	r0, r6
 800a158:	f7ff ffa2 	bl	800a0a0 <__sfputs_r>
 800a15c:	3001      	adds	r0, #1
 800a15e:	f000 80a7 	beq.w	800a2b0 <_vfiprintf_r+0x1ec>
 800a162:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a164:	445a      	add	r2, fp
 800a166:	9209      	str	r2, [sp, #36]	@ 0x24
 800a168:	f89a 3000 	ldrb.w	r3, [sl]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f000 809f 	beq.w	800a2b0 <_vfiprintf_r+0x1ec>
 800a172:	2300      	movs	r3, #0
 800a174:	f04f 32ff 	mov.w	r2, #4294967295
 800a178:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a17c:	f10a 0a01 	add.w	sl, sl, #1
 800a180:	9304      	str	r3, [sp, #16]
 800a182:	9307      	str	r3, [sp, #28]
 800a184:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a188:	931a      	str	r3, [sp, #104]	@ 0x68
 800a18a:	4654      	mov	r4, sl
 800a18c:	2205      	movs	r2, #5
 800a18e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a192:	4853      	ldr	r0, [pc, #332]	@ (800a2e0 <_vfiprintf_r+0x21c>)
 800a194:	f7fd fd4f 	bl	8007c36 <memchr>
 800a198:	9a04      	ldr	r2, [sp, #16]
 800a19a:	b9d8      	cbnz	r0, 800a1d4 <_vfiprintf_r+0x110>
 800a19c:	06d1      	lsls	r1, r2, #27
 800a19e:	bf44      	itt	mi
 800a1a0:	2320      	movmi	r3, #32
 800a1a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1a6:	0713      	lsls	r3, r2, #28
 800a1a8:	bf44      	itt	mi
 800a1aa:	232b      	movmi	r3, #43	@ 0x2b
 800a1ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a1b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1b6:	d015      	beq.n	800a1e4 <_vfiprintf_r+0x120>
 800a1b8:	4654      	mov	r4, sl
 800a1ba:	2000      	movs	r0, #0
 800a1bc:	f04f 0c0a 	mov.w	ip, #10
 800a1c0:	9a07      	ldr	r2, [sp, #28]
 800a1c2:	4621      	mov	r1, r4
 800a1c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1c8:	3b30      	subs	r3, #48	@ 0x30
 800a1ca:	2b09      	cmp	r3, #9
 800a1cc:	d94b      	bls.n	800a266 <_vfiprintf_r+0x1a2>
 800a1ce:	b1b0      	cbz	r0, 800a1fe <_vfiprintf_r+0x13a>
 800a1d0:	9207      	str	r2, [sp, #28]
 800a1d2:	e014      	b.n	800a1fe <_vfiprintf_r+0x13a>
 800a1d4:	eba0 0308 	sub.w	r3, r0, r8
 800a1d8:	fa09 f303 	lsl.w	r3, r9, r3
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	46a2      	mov	sl, r4
 800a1e0:	9304      	str	r3, [sp, #16]
 800a1e2:	e7d2      	b.n	800a18a <_vfiprintf_r+0xc6>
 800a1e4:	9b03      	ldr	r3, [sp, #12]
 800a1e6:	1d19      	adds	r1, r3, #4
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	9103      	str	r1, [sp, #12]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	bfbb      	ittet	lt
 800a1f0:	425b      	neglt	r3, r3
 800a1f2:	f042 0202 	orrlt.w	r2, r2, #2
 800a1f6:	9307      	strge	r3, [sp, #28]
 800a1f8:	9307      	strlt	r3, [sp, #28]
 800a1fa:	bfb8      	it	lt
 800a1fc:	9204      	strlt	r2, [sp, #16]
 800a1fe:	7823      	ldrb	r3, [r4, #0]
 800a200:	2b2e      	cmp	r3, #46	@ 0x2e
 800a202:	d10a      	bne.n	800a21a <_vfiprintf_r+0x156>
 800a204:	7863      	ldrb	r3, [r4, #1]
 800a206:	2b2a      	cmp	r3, #42	@ 0x2a
 800a208:	d132      	bne.n	800a270 <_vfiprintf_r+0x1ac>
 800a20a:	9b03      	ldr	r3, [sp, #12]
 800a20c:	3402      	adds	r4, #2
 800a20e:	1d1a      	adds	r2, r3, #4
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	9203      	str	r2, [sp, #12]
 800a214:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a218:	9305      	str	r3, [sp, #20]
 800a21a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a2e4 <_vfiprintf_r+0x220>
 800a21e:	2203      	movs	r2, #3
 800a220:	4650      	mov	r0, sl
 800a222:	7821      	ldrb	r1, [r4, #0]
 800a224:	f7fd fd07 	bl	8007c36 <memchr>
 800a228:	b138      	cbz	r0, 800a23a <_vfiprintf_r+0x176>
 800a22a:	2240      	movs	r2, #64	@ 0x40
 800a22c:	9b04      	ldr	r3, [sp, #16]
 800a22e:	eba0 000a 	sub.w	r0, r0, sl
 800a232:	4082      	lsls	r2, r0
 800a234:	4313      	orrs	r3, r2
 800a236:	3401      	adds	r4, #1
 800a238:	9304      	str	r3, [sp, #16]
 800a23a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a23e:	2206      	movs	r2, #6
 800a240:	4829      	ldr	r0, [pc, #164]	@ (800a2e8 <_vfiprintf_r+0x224>)
 800a242:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a246:	f7fd fcf6 	bl	8007c36 <memchr>
 800a24a:	2800      	cmp	r0, #0
 800a24c:	d03f      	beq.n	800a2ce <_vfiprintf_r+0x20a>
 800a24e:	4b27      	ldr	r3, [pc, #156]	@ (800a2ec <_vfiprintf_r+0x228>)
 800a250:	bb1b      	cbnz	r3, 800a29a <_vfiprintf_r+0x1d6>
 800a252:	9b03      	ldr	r3, [sp, #12]
 800a254:	3307      	adds	r3, #7
 800a256:	f023 0307 	bic.w	r3, r3, #7
 800a25a:	3308      	adds	r3, #8
 800a25c:	9303      	str	r3, [sp, #12]
 800a25e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a260:	443b      	add	r3, r7
 800a262:	9309      	str	r3, [sp, #36]	@ 0x24
 800a264:	e76a      	b.n	800a13c <_vfiprintf_r+0x78>
 800a266:	460c      	mov	r4, r1
 800a268:	2001      	movs	r0, #1
 800a26a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a26e:	e7a8      	b.n	800a1c2 <_vfiprintf_r+0xfe>
 800a270:	2300      	movs	r3, #0
 800a272:	f04f 0c0a 	mov.w	ip, #10
 800a276:	4619      	mov	r1, r3
 800a278:	3401      	adds	r4, #1
 800a27a:	9305      	str	r3, [sp, #20]
 800a27c:	4620      	mov	r0, r4
 800a27e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a282:	3a30      	subs	r2, #48	@ 0x30
 800a284:	2a09      	cmp	r2, #9
 800a286:	d903      	bls.n	800a290 <_vfiprintf_r+0x1cc>
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d0c6      	beq.n	800a21a <_vfiprintf_r+0x156>
 800a28c:	9105      	str	r1, [sp, #20]
 800a28e:	e7c4      	b.n	800a21a <_vfiprintf_r+0x156>
 800a290:	4604      	mov	r4, r0
 800a292:	2301      	movs	r3, #1
 800a294:	fb0c 2101 	mla	r1, ip, r1, r2
 800a298:	e7f0      	b.n	800a27c <_vfiprintf_r+0x1b8>
 800a29a:	ab03      	add	r3, sp, #12
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	462a      	mov	r2, r5
 800a2a0:	4630      	mov	r0, r6
 800a2a2:	4b13      	ldr	r3, [pc, #76]	@ (800a2f0 <_vfiprintf_r+0x22c>)
 800a2a4:	a904      	add	r1, sp, #16
 800a2a6:	f7fc fd41 	bl	8006d2c <_printf_float>
 800a2aa:	4607      	mov	r7, r0
 800a2ac:	1c78      	adds	r0, r7, #1
 800a2ae:	d1d6      	bne.n	800a25e <_vfiprintf_r+0x19a>
 800a2b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2b2:	07d9      	lsls	r1, r3, #31
 800a2b4:	d405      	bmi.n	800a2c2 <_vfiprintf_r+0x1fe>
 800a2b6:	89ab      	ldrh	r3, [r5, #12]
 800a2b8:	059a      	lsls	r2, r3, #22
 800a2ba:	d402      	bmi.n	800a2c2 <_vfiprintf_r+0x1fe>
 800a2bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2be:	f7fd fcb9 	bl	8007c34 <__retarget_lock_release_recursive>
 800a2c2:	89ab      	ldrh	r3, [r5, #12]
 800a2c4:	065b      	lsls	r3, r3, #25
 800a2c6:	f53f af1f 	bmi.w	800a108 <_vfiprintf_r+0x44>
 800a2ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a2cc:	e71e      	b.n	800a10c <_vfiprintf_r+0x48>
 800a2ce:	ab03      	add	r3, sp, #12
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	462a      	mov	r2, r5
 800a2d4:	4630      	mov	r0, r6
 800a2d6:	4b06      	ldr	r3, [pc, #24]	@ (800a2f0 <_vfiprintf_r+0x22c>)
 800a2d8:	a904      	add	r1, sp, #16
 800a2da:	f7fc ffc5 	bl	8007268 <_printf_i>
 800a2de:	e7e4      	b.n	800a2aa <_vfiprintf_r+0x1e6>
 800a2e0:	0800cd20 	.word	0x0800cd20
 800a2e4:	0800cd26 	.word	0x0800cd26
 800a2e8:	0800cd2a 	.word	0x0800cd2a
 800a2ec:	08006d2d 	.word	0x08006d2d
 800a2f0:	0800a0a1 	.word	0x0800a0a1

0800a2f4 <__swbuf_r>:
 800a2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f6:	460e      	mov	r6, r1
 800a2f8:	4614      	mov	r4, r2
 800a2fa:	4605      	mov	r5, r0
 800a2fc:	b118      	cbz	r0, 800a306 <__swbuf_r+0x12>
 800a2fe:	6a03      	ldr	r3, [r0, #32]
 800a300:	b90b      	cbnz	r3, 800a306 <__swbuf_r+0x12>
 800a302:	f7fd fb6d 	bl	80079e0 <__sinit>
 800a306:	69a3      	ldr	r3, [r4, #24]
 800a308:	60a3      	str	r3, [r4, #8]
 800a30a:	89a3      	ldrh	r3, [r4, #12]
 800a30c:	071a      	lsls	r2, r3, #28
 800a30e:	d501      	bpl.n	800a314 <__swbuf_r+0x20>
 800a310:	6923      	ldr	r3, [r4, #16]
 800a312:	b943      	cbnz	r3, 800a326 <__swbuf_r+0x32>
 800a314:	4621      	mov	r1, r4
 800a316:	4628      	mov	r0, r5
 800a318:	f000 f82a 	bl	800a370 <__swsetup_r>
 800a31c:	b118      	cbz	r0, 800a326 <__swbuf_r+0x32>
 800a31e:	f04f 37ff 	mov.w	r7, #4294967295
 800a322:	4638      	mov	r0, r7
 800a324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a326:	6823      	ldr	r3, [r4, #0]
 800a328:	6922      	ldr	r2, [r4, #16]
 800a32a:	b2f6      	uxtb	r6, r6
 800a32c:	1a98      	subs	r0, r3, r2
 800a32e:	6963      	ldr	r3, [r4, #20]
 800a330:	4637      	mov	r7, r6
 800a332:	4283      	cmp	r3, r0
 800a334:	dc05      	bgt.n	800a342 <__swbuf_r+0x4e>
 800a336:	4621      	mov	r1, r4
 800a338:	4628      	mov	r0, r5
 800a33a:	f7ff fdc9 	bl	8009ed0 <_fflush_r>
 800a33e:	2800      	cmp	r0, #0
 800a340:	d1ed      	bne.n	800a31e <__swbuf_r+0x2a>
 800a342:	68a3      	ldr	r3, [r4, #8]
 800a344:	3b01      	subs	r3, #1
 800a346:	60a3      	str	r3, [r4, #8]
 800a348:	6823      	ldr	r3, [r4, #0]
 800a34a:	1c5a      	adds	r2, r3, #1
 800a34c:	6022      	str	r2, [r4, #0]
 800a34e:	701e      	strb	r6, [r3, #0]
 800a350:	6962      	ldr	r2, [r4, #20]
 800a352:	1c43      	adds	r3, r0, #1
 800a354:	429a      	cmp	r2, r3
 800a356:	d004      	beq.n	800a362 <__swbuf_r+0x6e>
 800a358:	89a3      	ldrh	r3, [r4, #12]
 800a35a:	07db      	lsls	r3, r3, #31
 800a35c:	d5e1      	bpl.n	800a322 <__swbuf_r+0x2e>
 800a35e:	2e0a      	cmp	r6, #10
 800a360:	d1df      	bne.n	800a322 <__swbuf_r+0x2e>
 800a362:	4621      	mov	r1, r4
 800a364:	4628      	mov	r0, r5
 800a366:	f7ff fdb3 	bl	8009ed0 <_fflush_r>
 800a36a:	2800      	cmp	r0, #0
 800a36c:	d0d9      	beq.n	800a322 <__swbuf_r+0x2e>
 800a36e:	e7d6      	b.n	800a31e <__swbuf_r+0x2a>

0800a370 <__swsetup_r>:
 800a370:	b538      	push	{r3, r4, r5, lr}
 800a372:	4b29      	ldr	r3, [pc, #164]	@ (800a418 <__swsetup_r+0xa8>)
 800a374:	4605      	mov	r5, r0
 800a376:	6818      	ldr	r0, [r3, #0]
 800a378:	460c      	mov	r4, r1
 800a37a:	b118      	cbz	r0, 800a384 <__swsetup_r+0x14>
 800a37c:	6a03      	ldr	r3, [r0, #32]
 800a37e:	b90b      	cbnz	r3, 800a384 <__swsetup_r+0x14>
 800a380:	f7fd fb2e 	bl	80079e0 <__sinit>
 800a384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a388:	0719      	lsls	r1, r3, #28
 800a38a:	d422      	bmi.n	800a3d2 <__swsetup_r+0x62>
 800a38c:	06da      	lsls	r2, r3, #27
 800a38e:	d407      	bmi.n	800a3a0 <__swsetup_r+0x30>
 800a390:	2209      	movs	r2, #9
 800a392:	602a      	str	r2, [r5, #0]
 800a394:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a398:	f04f 30ff 	mov.w	r0, #4294967295
 800a39c:	81a3      	strh	r3, [r4, #12]
 800a39e:	e033      	b.n	800a408 <__swsetup_r+0x98>
 800a3a0:	0758      	lsls	r0, r3, #29
 800a3a2:	d512      	bpl.n	800a3ca <__swsetup_r+0x5a>
 800a3a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a3a6:	b141      	cbz	r1, 800a3ba <__swsetup_r+0x4a>
 800a3a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a3ac:	4299      	cmp	r1, r3
 800a3ae:	d002      	beq.n	800a3b6 <__swsetup_r+0x46>
 800a3b0:	4628      	mov	r0, r5
 800a3b2:	f7fe fab9 	bl	8008928 <_free_r>
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a3ba:	89a3      	ldrh	r3, [r4, #12]
 800a3bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a3c0:	81a3      	strh	r3, [r4, #12]
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	6063      	str	r3, [r4, #4]
 800a3c6:	6923      	ldr	r3, [r4, #16]
 800a3c8:	6023      	str	r3, [r4, #0]
 800a3ca:	89a3      	ldrh	r3, [r4, #12]
 800a3cc:	f043 0308 	orr.w	r3, r3, #8
 800a3d0:	81a3      	strh	r3, [r4, #12]
 800a3d2:	6923      	ldr	r3, [r4, #16]
 800a3d4:	b94b      	cbnz	r3, 800a3ea <__swsetup_r+0x7a>
 800a3d6:	89a3      	ldrh	r3, [r4, #12]
 800a3d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a3dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3e0:	d003      	beq.n	800a3ea <__swsetup_r+0x7a>
 800a3e2:	4621      	mov	r1, r4
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	f000 f882 	bl	800a4ee <__smakebuf_r>
 800a3ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ee:	f013 0201 	ands.w	r2, r3, #1
 800a3f2:	d00a      	beq.n	800a40a <__swsetup_r+0x9a>
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	60a2      	str	r2, [r4, #8]
 800a3f8:	6962      	ldr	r2, [r4, #20]
 800a3fa:	4252      	negs	r2, r2
 800a3fc:	61a2      	str	r2, [r4, #24]
 800a3fe:	6922      	ldr	r2, [r4, #16]
 800a400:	b942      	cbnz	r2, 800a414 <__swsetup_r+0xa4>
 800a402:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a406:	d1c5      	bne.n	800a394 <__swsetup_r+0x24>
 800a408:	bd38      	pop	{r3, r4, r5, pc}
 800a40a:	0799      	lsls	r1, r3, #30
 800a40c:	bf58      	it	pl
 800a40e:	6962      	ldrpl	r2, [r4, #20]
 800a410:	60a2      	str	r2, [r4, #8]
 800a412:	e7f4      	b.n	800a3fe <__swsetup_r+0x8e>
 800a414:	2000      	movs	r0, #0
 800a416:	e7f7      	b.n	800a408 <__swsetup_r+0x98>
 800a418:	2000019c 	.word	0x2000019c

0800a41c <_raise_r>:
 800a41c:	291f      	cmp	r1, #31
 800a41e:	b538      	push	{r3, r4, r5, lr}
 800a420:	4605      	mov	r5, r0
 800a422:	460c      	mov	r4, r1
 800a424:	d904      	bls.n	800a430 <_raise_r+0x14>
 800a426:	2316      	movs	r3, #22
 800a428:	6003      	str	r3, [r0, #0]
 800a42a:	f04f 30ff 	mov.w	r0, #4294967295
 800a42e:	bd38      	pop	{r3, r4, r5, pc}
 800a430:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a432:	b112      	cbz	r2, 800a43a <_raise_r+0x1e>
 800a434:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a438:	b94b      	cbnz	r3, 800a44e <_raise_r+0x32>
 800a43a:	4628      	mov	r0, r5
 800a43c:	f000 f830 	bl	800a4a0 <_getpid_r>
 800a440:	4622      	mov	r2, r4
 800a442:	4601      	mov	r1, r0
 800a444:	4628      	mov	r0, r5
 800a446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a44a:	f000 b817 	b.w	800a47c <_kill_r>
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d00a      	beq.n	800a468 <_raise_r+0x4c>
 800a452:	1c59      	adds	r1, r3, #1
 800a454:	d103      	bne.n	800a45e <_raise_r+0x42>
 800a456:	2316      	movs	r3, #22
 800a458:	6003      	str	r3, [r0, #0]
 800a45a:	2001      	movs	r0, #1
 800a45c:	e7e7      	b.n	800a42e <_raise_r+0x12>
 800a45e:	2100      	movs	r1, #0
 800a460:	4620      	mov	r0, r4
 800a462:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a466:	4798      	blx	r3
 800a468:	2000      	movs	r0, #0
 800a46a:	e7e0      	b.n	800a42e <_raise_r+0x12>

0800a46c <raise>:
 800a46c:	4b02      	ldr	r3, [pc, #8]	@ (800a478 <raise+0xc>)
 800a46e:	4601      	mov	r1, r0
 800a470:	6818      	ldr	r0, [r3, #0]
 800a472:	f7ff bfd3 	b.w	800a41c <_raise_r>
 800a476:	bf00      	nop
 800a478:	2000019c 	.word	0x2000019c

0800a47c <_kill_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	2300      	movs	r3, #0
 800a480:	4d06      	ldr	r5, [pc, #24]	@ (800a49c <_kill_r+0x20>)
 800a482:	4604      	mov	r4, r0
 800a484:	4608      	mov	r0, r1
 800a486:	4611      	mov	r1, r2
 800a488:	602b      	str	r3, [r5, #0]
 800a48a:	f7f8 fe58 	bl	800313e <_kill>
 800a48e:	1c43      	adds	r3, r0, #1
 800a490:	d102      	bne.n	800a498 <_kill_r+0x1c>
 800a492:	682b      	ldr	r3, [r5, #0]
 800a494:	b103      	cbz	r3, 800a498 <_kill_r+0x1c>
 800a496:	6023      	str	r3, [r4, #0]
 800a498:	bd38      	pop	{r3, r4, r5, pc}
 800a49a:	bf00      	nop
 800a49c:	20000bb8 	.word	0x20000bb8

0800a4a0 <_getpid_r>:
 800a4a0:	f7f8 be46 	b.w	8003130 <_getpid>

0800a4a4 <__swhatbuf_r>:
 800a4a4:	b570      	push	{r4, r5, r6, lr}
 800a4a6:	460c      	mov	r4, r1
 800a4a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4ac:	4615      	mov	r5, r2
 800a4ae:	2900      	cmp	r1, #0
 800a4b0:	461e      	mov	r6, r3
 800a4b2:	b096      	sub	sp, #88	@ 0x58
 800a4b4:	da0c      	bge.n	800a4d0 <__swhatbuf_r+0x2c>
 800a4b6:	89a3      	ldrh	r3, [r4, #12]
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a4be:	bf14      	ite	ne
 800a4c0:	2340      	movne	r3, #64	@ 0x40
 800a4c2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a4c6:	2000      	movs	r0, #0
 800a4c8:	6031      	str	r1, [r6, #0]
 800a4ca:	602b      	str	r3, [r5, #0]
 800a4cc:	b016      	add	sp, #88	@ 0x58
 800a4ce:	bd70      	pop	{r4, r5, r6, pc}
 800a4d0:	466a      	mov	r2, sp
 800a4d2:	f000 f849 	bl	800a568 <_fstat_r>
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	dbed      	blt.n	800a4b6 <__swhatbuf_r+0x12>
 800a4da:	9901      	ldr	r1, [sp, #4]
 800a4dc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a4e0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a4e4:	4259      	negs	r1, r3
 800a4e6:	4159      	adcs	r1, r3
 800a4e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4ec:	e7eb      	b.n	800a4c6 <__swhatbuf_r+0x22>

0800a4ee <__smakebuf_r>:
 800a4ee:	898b      	ldrh	r3, [r1, #12]
 800a4f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4f2:	079d      	lsls	r5, r3, #30
 800a4f4:	4606      	mov	r6, r0
 800a4f6:	460c      	mov	r4, r1
 800a4f8:	d507      	bpl.n	800a50a <__smakebuf_r+0x1c>
 800a4fa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a4fe:	6023      	str	r3, [r4, #0]
 800a500:	6123      	str	r3, [r4, #16]
 800a502:	2301      	movs	r3, #1
 800a504:	6163      	str	r3, [r4, #20]
 800a506:	b003      	add	sp, #12
 800a508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a50a:	466a      	mov	r2, sp
 800a50c:	ab01      	add	r3, sp, #4
 800a50e:	f7ff ffc9 	bl	800a4a4 <__swhatbuf_r>
 800a512:	9f00      	ldr	r7, [sp, #0]
 800a514:	4605      	mov	r5, r0
 800a516:	4639      	mov	r1, r7
 800a518:	4630      	mov	r0, r6
 800a51a:	f7fe fdb1 	bl	8009080 <_malloc_r>
 800a51e:	b948      	cbnz	r0, 800a534 <__smakebuf_r+0x46>
 800a520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a524:	059a      	lsls	r2, r3, #22
 800a526:	d4ee      	bmi.n	800a506 <__smakebuf_r+0x18>
 800a528:	f023 0303 	bic.w	r3, r3, #3
 800a52c:	f043 0302 	orr.w	r3, r3, #2
 800a530:	81a3      	strh	r3, [r4, #12]
 800a532:	e7e2      	b.n	800a4fa <__smakebuf_r+0xc>
 800a534:	89a3      	ldrh	r3, [r4, #12]
 800a536:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a53a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a53e:	81a3      	strh	r3, [r4, #12]
 800a540:	9b01      	ldr	r3, [sp, #4]
 800a542:	6020      	str	r0, [r4, #0]
 800a544:	b15b      	cbz	r3, 800a55e <__smakebuf_r+0x70>
 800a546:	4630      	mov	r0, r6
 800a548:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a54c:	f000 f81e 	bl	800a58c <_isatty_r>
 800a550:	b128      	cbz	r0, 800a55e <__smakebuf_r+0x70>
 800a552:	89a3      	ldrh	r3, [r4, #12]
 800a554:	f023 0303 	bic.w	r3, r3, #3
 800a558:	f043 0301 	orr.w	r3, r3, #1
 800a55c:	81a3      	strh	r3, [r4, #12]
 800a55e:	89a3      	ldrh	r3, [r4, #12]
 800a560:	431d      	orrs	r5, r3
 800a562:	81a5      	strh	r5, [r4, #12]
 800a564:	e7cf      	b.n	800a506 <__smakebuf_r+0x18>
	...

0800a568 <_fstat_r>:
 800a568:	b538      	push	{r3, r4, r5, lr}
 800a56a:	2300      	movs	r3, #0
 800a56c:	4d06      	ldr	r5, [pc, #24]	@ (800a588 <_fstat_r+0x20>)
 800a56e:	4604      	mov	r4, r0
 800a570:	4608      	mov	r0, r1
 800a572:	4611      	mov	r1, r2
 800a574:	602b      	str	r3, [r5, #0]
 800a576:	f7f8 fe41 	bl	80031fc <_fstat>
 800a57a:	1c43      	adds	r3, r0, #1
 800a57c:	d102      	bne.n	800a584 <_fstat_r+0x1c>
 800a57e:	682b      	ldr	r3, [r5, #0]
 800a580:	b103      	cbz	r3, 800a584 <_fstat_r+0x1c>
 800a582:	6023      	str	r3, [r4, #0]
 800a584:	bd38      	pop	{r3, r4, r5, pc}
 800a586:	bf00      	nop
 800a588:	20000bb8 	.word	0x20000bb8

0800a58c <_isatty_r>:
 800a58c:	b538      	push	{r3, r4, r5, lr}
 800a58e:	2300      	movs	r3, #0
 800a590:	4d05      	ldr	r5, [pc, #20]	@ (800a5a8 <_isatty_r+0x1c>)
 800a592:	4604      	mov	r4, r0
 800a594:	4608      	mov	r0, r1
 800a596:	602b      	str	r3, [r5, #0]
 800a598:	f7f8 fe3f 	bl	800321a <_isatty>
 800a59c:	1c43      	adds	r3, r0, #1
 800a59e:	d102      	bne.n	800a5a6 <_isatty_r+0x1a>
 800a5a0:	682b      	ldr	r3, [r5, #0]
 800a5a2:	b103      	cbz	r3, 800a5a6 <_isatty_r+0x1a>
 800a5a4:	6023      	str	r3, [r4, #0]
 800a5a6:	bd38      	pop	{r3, r4, r5, pc}
 800a5a8:	20000bb8 	.word	0x20000bb8

0800a5ac <pow>:
 800a5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5b0:	4614      	mov	r4, r2
 800a5b2:	461d      	mov	r5, r3
 800a5b4:	4680      	mov	r8, r0
 800a5b6:	4689      	mov	r9, r1
 800a5b8:	f000 f866 	bl	800a688 <__ieee754_pow>
 800a5bc:	4622      	mov	r2, r4
 800a5be:	4606      	mov	r6, r0
 800a5c0:	460f      	mov	r7, r1
 800a5c2:	462b      	mov	r3, r5
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	4629      	mov	r1, r5
 800a5c8:	f7f6 fa20 	bl	8000a0c <__aeabi_dcmpun>
 800a5cc:	bbc8      	cbnz	r0, 800a642 <pow+0x96>
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	4640      	mov	r0, r8
 800a5d4:	4649      	mov	r1, r9
 800a5d6:	f7f6 f9e7 	bl	80009a8 <__aeabi_dcmpeq>
 800a5da:	b1b8      	cbz	r0, 800a60c <pow+0x60>
 800a5dc:	2200      	movs	r2, #0
 800a5de:	2300      	movs	r3, #0
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	4629      	mov	r1, r5
 800a5e4:	f7f6 f9e0 	bl	80009a8 <__aeabi_dcmpeq>
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	d141      	bne.n	800a670 <pow+0xc4>
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	4629      	mov	r1, r5
 800a5f0:	f000 f844 	bl	800a67c <finite>
 800a5f4:	b328      	cbz	r0, 800a642 <pow+0x96>
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	4629      	mov	r1, r5
 800a5fe:	f7f6 f9dd 	bl	80009bc <__aeabi_dcmplt>
 800a602:	b1f0      	cbz	r0, 800a642 <pow+0x96>
 800a604:	f7fd faea 	bl	8007bdc <__errno>
 800a608:	2322      	movs	r3, #34	@ 0x22
 800a60a:	e019      	b.n	800a640 <pow+0x94>
 800a60c:	4630      	mov	r0, r6
 800a60e:	4639      	mov	r1, r7
 800a610:	f000 f834 	bl	800a67c <finite>
 800a614:	b9c8      	cbnz	r0, 800a64a <pow+0x9e>
 800a616:	4640      	mov	r0, r8
 800a618:	4649      	mov	r1, r9
 800a61a:	f000 f82f 	bl	800a67c <finite>
 800a61e:	b1a0      	cbz	r0, 800a64a <pow+0x9e>
 800a620:	4620      	mov	r0, r4
 800a622:	4629      	mov	r1, r5
 800a624:	f000 f82a 	bl	800a67c <finite>
 800a628:	b178      	cbz	r0, 800a64a <pow+0x9e>
 800a62a:	4632      	mov	r2, r6
 800a62c:	463b      	mov	r3, r7
 800a62e:	4630      	mov	r0, r6
 800a630:	4639      	mov	r1, r7
 800a632:	f7f6 f9eb 	bl	8000a0c <__aeabi_dcmpun>
 800a636:	2800      	cmp	r0, #0
 800a638:	d0e4      	beq.n	800a604 <pow+0x58>
 800a63a:	f7fd facf 	bl	8007bdc <__errno>
 800a63e:	2321      	movs	r3, #33	@ 0x21
 800a640:	6003      	str	r3, [r0, #0]
 800a642:	4630      	mov	r0, r6
 800a644:	4639      	mov	r1, r7
 800a646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a64a:	2200      	movs	r2, #0
 800a64c:	2300      	movs	r3, #0
 800a64e:	4630      	mov	r0, r6
 800a650:	4639      	mov	r1, r7
 800a652:	f7f6 f9a9 	bl	80009a8 <__aeabi_dcmpeq>
 800a656:	2800      	cmp	r0, #0
 800a658:	d0f3      	beq.n	800a642 <pow+0x96>
 800a65a:	4640      	mov	r0, r8
 800a65c:	4649      	mov	r1, r9
 800a65e:	f000 f80d 	bl	800a67c <finite>
 800a662:	2800      	cmp	r0, #0
 800a664:	d0ed      	beq.n	800a642 <pow+0x96>
 800a666:	4620      	mov	r0, r4
 800a668:	4629      	mov	r1, r5
 800a66a:	f000 f807 	bl	800a67c <finite>
 800a66e:	e7c8      	b.n	800a602 <pow+0x56>
 800a670:	2600      	movs	r6, #0
 800a672:	4f01      	ldr	r7, [pc, #4]	@ (800a678 <pow+0xcc>)
 800a674:	e7e5      	b.n	800a642 <pow+0x96>
 800a676:	bf00      	nop
 800a678:	3ff00000 	.word	0x3ff00000

0800a67c <finite>:
 800a67c:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800a680:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a684:	0fc0      	lsrs	r0, r0, #31
 800a686:	4770      	bx	lr

0800a688 <__ieee754_pow>:
 800a688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68c:	b091      	sub	sp, #68	@ 0x44
 800a68e:	e9cd 2300 	strd	r2, r3, [sp]
 800a692:	468b      	mov	fp, r1
 800a694:	e9dd 1800 	ldrd	r1, r8, [sp]
 800a698:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800a69c:	4682      	mov	sl, r0
 800a69e:	ea57 0001 	orrs.w	r0, r7, r1
 800a6a2:	d112      	bne.n	800a6ca <__ieee754_pow+0x42>
 800a6a4:	4653      	mov	r3, sl
 800a6a6:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800a6aa:	18db      	adds	r3, r3, r3
 800a6ac:	4152      	adcs	r2, r2
 800a6ae:	4298      	cmp	r0, r3
 800a6b0:	4b91      	ldr	r3, [pc, #580]	@ (800a8f8 <__ieee754_pow+0x270>)
 800a6b2:	4193      	sbcs	r3, r2
 800a6b4:	f080 84ce 	bcs.w	800b054 <__ieee754_pow+0x9cc>
 800a6b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6bc:	4650      	mov	r0, sl
 800a6be:	4659      	mov	r1, fp
 800a6c0:	f7f5 fd54 	bl	800016c <__adddf3>
 800a6c4:	b011      	add	sp, #68	@ 0x44
 800a6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ca:	4b8c      	ldr	r3, [pc, #560]	@ (800a8fc <__ieee754_pow+0x274>)
 800a6cc:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800a6d0:	429e      	cmp	r6, r3
 800a6d2:	465d      	mov	r5, fp
 800a6d4:	46d1      	mov	r9, sl
 800a6d6:	d807      	bhi.n	800a6e8 <__ieee754_pow+0x60>
 800a6d8:	d102      	bne.n	800a6e0 <__ieee754_pow+0x58>
 800a6da:	f1ba 0f00 	cmp.w	sl, #0
 800a6de:	d1eb      	bne.n	800a6b8 <__ieee754_pow+0x30>
 800a6e0:	429f      	cmp	r7, r3
 800a6e2:	d801      	bhi.n	800a6e8 <__ieee754_pow+0x60>
 800a6e4:	d10f      	bne.n	800a706 <__ieee754_pow+0x7e>
 800a6e6:	b171      	cbz	r1, 800a706 <__ieee754_pow+0x7e>
 800a6e8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a6ec:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a6f0:	ea55 0509 	orrs.w	r5, r5, r9
 800a6f4:	d1e0      	bne.n	800a6b8 <__ieee754_pow+0x30>
 800a6f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a6fa:	18db      	adds	r3, r3, r3
 800a6fc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800a700:	4152      	adcs	r2, r2
 800a702:	429d      	cmp	r5, r3
 800a704:	e7d4      	b.n	800a6b0 <__ieee754_pow+0x28>
 800a706:	2d00      	cmp	r5, #0
 800a708:	4633      	mov	r3, r6
 800a70a:	da39      	bge.n	800a780 <__ieee754_pow+0xf8>
 800a70c:	4a7c      	ldr	r2, [pc, #496]	@ (800a900 <__ieee754_pow+0x278>)
 800a70e:	4297      	cmp	r7, r2
 800a710:	d84e      	bhi.n	800a7b0 <__ieee754_pow+0x128>
 800a712:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800a716:	4297      	cmp	r7, r2
 800a718:	f240 84ab 	bls.w	800b072 <__ieee754_pow+0x9ea>
 800a71c:	153a      	asrs	r2, r7, #20
 800a71e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a722:	2a14      	cmp	r2, #20
 800a724:	dd0f      	ble.n	800a746 <__ieee754_pow+0xbe>
 800a726:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800a72a:	fa21 f402 	lsr.w	r4, r1, r2
 800a72e:	fa04 f202 	lsl.w	r2, r4, r2
 800a732:	428a      	cmp	r2, r1
 800a734:	f040 849d 	bne.w	800b072 <__ieee754_pow+0x9ea>
 800a738:	f004 0401 	and.w	r4, r4, #1
 800a73c:	f1c4 0402 	rsb	r4, r4, #2
 800a740:	2900      	cmp	r1, #0
 800a742:	d15a      	bne.n	800a7fa <__ieee754_pow+0x172>
 800a744:	e00e      	b.n	800a764 <__ieee754_pow+0xdc>
 800a746:	2900      	cmp	r1, #0
 800a748:	d156      	bne.n	800a7f8 <__ieee754_pow+0x170>
 800a74a:	f1c2 0214 	rsb	r2, r2, #20
 800a74e:	fa47 f402 	asr.w	r4, r7, r2
 800a752:	fa04 f202 	lsl.w	r2, r4, r2
 800a756:	42ba      	cmp	r2, r7
 800a758:	f040 8488 	bne.w	800b06c <__ieee754_pow+0x9e4>
 800a75c:	f004 0401 	and.w	r4, r4, #1
 800a760:	f1c4 0402 	rsb	r4, r4, #2
 800a764:	4a67      	ldr	r2, [pc, #412]	@ (800a904 <__ieee754_pow+0x27c>)
 800a766:	4297      	cmp	r7, r2
 800a768:	d130      	bne.n	800a7cc <__ieee754_pow+0x144>
 800a76a:	f1b8 0f00 	cmp.w	r8, #0
 800a76e:	f280 8479 	bge.w	800b064 <__ieee754_pow+0x9dc>
 800a772:	4652      	mov	r2, sl
 800a774:	465b      	mov	r3, fp
 800a776:	2000      	movs	r0, #0
 800a778:	4962      	ldr	r1, [pc, #392]	@ (800a904 <__ieee754_pow+0x27c>)
 800a77a:	f7f5 ffd7 	bl	800072c <__aeabi_ddiv>
 800a77e:	e7a1      	b.n	800a6c4 <__ieee754_pow+0x3c>
 800a780:	2400      	movs	r4, #0
 800a782:	2900      	cmp	r1, #0
 800a784:	d139      	bne.n	800a7fa <__ieee754_pow+0x172>
 800a786:	4a5d      	ldr	r2, [pc, #372]	@ (800a8fc <__ieee754_pow+0x274>)
 800a788:	4297      	cmp	r7, r2
 800a78a:	d1eb      	bne.n	800a764 <__ieee754_pow+0xdc>
 800a78c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800a790:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800a794:	ea53 0309 	orrs.w	r3, r3, r9
 800a798:	f000 845c 	beq.w	800b054 <__ieee754_pow+0x9cc>
 800a79c:	4b5a      	ldr	r3, [pc, #360]	@ (800a908 <__ieee754_pow+0x280>)
 800a79e:	429e      	cmp	r6, r3
 800a7a0:	d908      	bls.n	800a7b4 <__ieee754_pow+0x12c>
 800a7a2:	f1b8 0f00 	cmp.w	r8, #0
 800a7a6:	f2c0 8459 	blt.w	800b05c <__ieee754_pow+0x9d4>
 800a7aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7ae:	e789      	b.n	800a6c4 <__ieee754_pow+0x3c>
 800a7b0:	2402      	movs	r4, #2
 800a7b2:	e7e6      	b.n	800a782 <__ieee754_pow+0xfa>
 800a7b4:	f1b8 0f00 	cmp.w	r8, #0
 800a7b8:	f04f 0000 	mov.w	r0, #0
 800a7bc:	f04f 0100 	mov.w	r1, #0
 800a7c0:	da80      	bge.n	800a6c4 <__ieee754_pow+0x3c>
 800a7c2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a7c6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a7ca:	e77b      	b.n	800a6c4 <__ieee754_pow+0x3c>
 800a7cc:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800a7d0:	d106      	bne.n	800a7e0 <__ieee754_pow+0x158>
 800a7d2:	4652      	mov	r2, sl
 800a7d4:	465b      	mov	r3, fp
 800a7d6:	4650      	mov	r0, sl
 800a7d8:	4659      	mov	r1, fp
 800a7da:	f7f5 fe7d 	bl	80004d8 <__aeabi_dmul>
 800a7de:	e771      	b.n	800a6c4 <__ieee754_pow+0x3c>
 800a7e0:	4a4a      	ldr	r2, [pc, #296]	@ (800a90c <__ieee754_pow+0x284>)
 800a7e2:	4590      	cmp	r8, r2
 800a7e4:	d109      	bne.n	800a7fa <__ieee754_pow+0x172>
 800a7e6:	2d00      	cmp	r5, #0
 800a7e8:	db07      	blt.n	800a7fa <__ieee754_pow+0x172>
 800a7ea:	4650      	mov	r0, sl
 800a7ec:	4659      	mov	r1, fp
 800a7ee:	b011      	add	sp, #68	@ 0x44
 800a7f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f4:	f000 bd12 	b.w	800b21c <__ieee754_sqrt>
 800a7f8:	2400      	movs	r4, #0
 800a7fa:	4650      	mov	r0, sl
 800a7fc:	4659      	mov	r1, fp
 800a7fe:	9302      	str	r3, [sp, #8]
 800a800:	f000 fc6a 	bl	800b0d8 <fabs>
 800a804:	9b02      	ldr	r3, [sp, #8]
 800a806:	f1b9 0f00 	cmp.w	r9, #0
 800a80a:	d127      	bne.n	800a85c <__ieee754_pow+0x1d4>
 800a80c:	4a3d      	ldr	r2, [pc, #244]	@ (800a904 <__ieee754_pow+0x27c>)
 800a80e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800a812:	4594      	cmp	ip, r2
 800a814:	d000      	beq.n	800a818 <__ieee754_pow+0x190>
 800a816:	bb0e      	cbnz	r6, 800a85c <__ieee754_pow+0x1d4>
 800a818:	f1b8 0f00 	cmp.w	r8, #0
 800a81c:	da05      	bge.n	800a82a <__ieee754_pow+0x1a2>
 800a81e:	4602      	mov	r2, r0
 800a820:	460b      	mov	r3, r1
 800a822:	2000      	movs	r0, #0
 800a824:	4937      	ldr	r1, [pc, #220]	@ (800a904 <__ieee754_pow+0x27c>)
 800a826:	f7f5 ff81 	bl	800072c <__aeabi_ddiv>
 800a82a:	2d00      	cmp	r5, #0
 800a82c:	f6bf af4a 	bge.w	800a6c4 <__ieee754_pow+0x3c>
 800a830:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800a834:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800a838:	4326      	orrs	r6, r4
 800a83a:	d108      	bne.n	800a84e <__ieee754_pow+0x1c6>
 800a83c:	4602      	mov	r2, r0
 800a83e:	460b      	mov	r3, r1
 800a840:	4610      	mov	r0, r2
 800a842:	4619      	mov	r1, r3
 800a844:	f7f5 fc90 	bl	8000168 <__aeabi_dsub>
 800a848:	4602      	mov	r2, r0
 800a84a:	460b      	mov	r3, r1
 800a84c:	e795      	b.n	800a77a <__ieee754_pow+0xf2>
 800a84e:	2c01      	cmp	r4, #1
 800a850:	f47f af38 	bne.w	800a6c4 <__ieee754_pow+0x3c>
 800a854:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a858:	4619      	mov	r1, r3
 800a85a:	e733      	b.n	800a6c4 <__ieee754_pow+0x3c>
 800a85c:	0fea      	lsrs	r2, r5, #31
 800a85e:	3a01      	subs	r2, #1
 800a860:	ea52 0c04 	orrs.w	ip, r2, r4
 800a864:	d102      	bne.n	800a86c <__ieee754_pow+0x1e4>
 800a866:	4652      	mov	r2, sl
 800a868:	465b      	mov	r3, fp
 800a86a:	e7e9      	b.n	800a840 <__ieee754_pow+0x1b8>
 800a86c:	f04f 0900 	mov.w	r9, #0
 800a870:	3c01      	subs	r4, #1
 800a872:	4314      	orrs	r4, r2
 800a874:	bf14      	ite	ne
 800a876:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800a904 <__ieee754_pow+0x27c>
 800a87a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800a910 <__ieee754_pow+0x288>
 800a87e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800a882:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800a886:	f240 8107 	bls.w	800aa98 <__ieee754_pow+0x410>
 800a88a:	4b22      	ldr	r3, [pc, #136]	@ (800a914 <__ieee754_pow+0x28c>)
 800a88c:	429f      	cmp	r7, r3
 800a88e:	4b1e      	ldr	r3, [pc, #120]	@ (800a908 <__ieee754_pow+0x280>)
 800a890:	d913      	bls.n	800a8ba <__ieee754_pow+0x232>
 800a892:	429e      	cmp	r6, r3
 800a894:	d808      	bhi.n	800a8a8 <__ieee754_pow+0x220>
 800a896:	f1b8 0f00 	cmp.w	r8, #0
 800a89a:	da08      	bge.n	800a8ae <__ieee754_pow+0x226>
 800a89c:	2000      	movs	r0, #0
 800a89e:	b011      	add	sp, #68	@ 0x44
 800a8a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a4:	f000 bcb4 	b.w	800b210 <__math_oflow>
 800a8a8:	f1b8 0f00 	cmp.w	r8, #0
 800a8ac:	dcf6      	bgt.n	800a89c <__ieee754_pow+0x214>
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	b011      	add	sp, #68	@ 0x44
 800a8b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b6:	f000 bca6 	b.w	800b206 <__math_uflow>
 800a8ba:	429e      	cmp	r6, r3
 800a8bc:	d20c      	bcs.n	800a8d8 <__ieee754_pow+0x250>
 800a8be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	f7f6 f879 	bl	80009bc <__aeabi_dcmplt>
 800a8ca:	3800      	subs	r0, #0
 800a8cc:	bf18      	it	ne
 800a8ce:	2001      	movne	r0, #1
 800a8d0:	f1b8 0f00 	cmp.w	r8, #0
 800a8d4:	daec      	bge.n	800a8b0 <__ieee754_pow+0x228>
 800a8d6:	e7e2      	b.n	800a89e <__ieee754_pow+0x216>
 800a8d8:	4b0a      	ldr	r3, [pc, #40]	@ (800a904 <__ieee754_pow+0x27c>)
 800a8da:	2200      	movs	r2, #0
 800a8dc:	429e      	cmp	r6, r3
 800a8de:	d91b      	bls.n	800a918 <__ieee754_pow+0x290>
 800a8e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	f7f6 f869 	bl	80009bc <__aeabi_dcmplt>
 800a8ea:	3800      	subs	r0, #0
 800a8ec:	bf18      	it	ne
 800a8ee:	2001      	movne	r0, #1
 800a8f0:	f1b8 0f00 	cmp.w	r8, #0
 800a8f4:	dcd3      	bgt.n	800a89e <__ieee754_pow+0x216>
 800a8f6:	e7db      	b.n	800a8b0 <__ieee754_pow+0x228>
 800a8f8:	fff00000 	.word	0xfff00000
 800a8fc:	7ff00000 	.word	0x7ff00000
 800a900:	433fffff 	.word	0x433fffff
 800a904:	3ff00000 	.word	0x3ff00000
 800a908:	3fefffff 	.word	0x3fefffff
 800a90c:	3fe00000 	.word	0x3fe00000
 800a910:	bff00000 	.word	0xbff00000
 800a914:	43f00000 	.word	0x43f00000
 800a918:	4b5b      	ldr	r3, [pc, #364]	@ (800aa88 <__ieee754_pow+0x400>)
 800a91a:	f7f5 fc25 	bl	8000168 <__aeabi_dsub>
 800a91e:	a352      	add	r3, pc, #328	@ (adr r3, 800aa68 <__ieee754_pow+0x3e0>)
 800a920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a924:	4604      	mov	r4, r0
 800a926:	460d      	mov	r5, r1
 800a928:	f7f5 fdd6 	bl	80004d8 <__aeabi_dmul>
 800a92c:	a350      	add	r3, pc, #320	@ (adr r3, 800aa70 <__ieee754_pow+0x3e8>)
 800a92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a932:	4606      	mov	r6, r0
 800a934:	460f      	mov	r7, r1
 800a936:	4620      	mov	r0, r4
 800a938:	4629      	mov	r1, r5
 800a93a:	f7f5 fdcd 	bl	80004d8 <__aeabi_dmul>
 800a93e:	2200      	movs	r2, #0
 800a940:	4682      	mov	sl, r0
 800a942:	468b      	mov	fp, r1
 800a944:	4620      	mov	r0, r4
 800a946:	4629      	mov	r1, r5
 800a948:	4b50      	ldr	r3, [pc, #320]	@ (800aa8c <__ieee754_pow+0x404>)
 800a94a:	f7f5 fdc5 	bl	80004d8 <__aeabi_dmul>
 800a94e:	4602      	mov	r2, r0
 800a950:	460b      	mov	r3, r1
 800a952:	a149      	add	r1, pc, #292	@ (adr r1, 800aa78 <__ieee754_pow+0x3f0>)
 800a954:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a958:	f7f5 fc06 	bl	8000168 <__aeabi_dsub>
 800a95c:	4622      	mov	r2, r4
 800a95e:	462b      	mov	r3, r5
 800a960:	f7f5 fdba 	bl	80004d8 <__aeabi_dmul>
 800a964:	4602      	mov	r2, r0
 800a966:	460b      	mov	r3, r1
 800a968:	2000      	movs	r0, #0
 800a96a:	4949      	ldr	r1, [pc, #292]	@ (800aa90 <__ieee754_pow+0x408>)
 800a96c:	f7f5 fbfc 	bl	8000168 <__aeabi_dsub>
 800a970:	4622      	mov	r2, r4
 800a972:	4680      	mov	r8, r0
 800a974:	4689      	mov	r9, r1
 800a976:	462b      	mov	r3, r5
 800a978:	4620      	mov	r0, r4
 800a97a:	4629      	mov	r1, r5
 800a97c:	f7f5 fdac 	bl	80004d8 <__aeabi_dmul>
 800a980:	4602      	mov	r2, r0
 800a982:	460b      	mov	r3, r1
 800a984:	4640      	mov	r0, r8
 800a986:	4649      	mov	r1, r9
 800a988:	f7f5 fda6 	bl	80004d8 <__aeabi_dmul>
 800a98c:	a33c      	add	r3, pc, #240	@ (adr r3, 800aa80 <__ieee754_pow+0x3f8>)
 800a98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a992:	f7f5 fda1 	bl	80004d8 <__aeabi_dmul>
 800a996:	4602      	mov	r2, r0
 800a998:	460b      	mov	r3, r1
 800a99a:	4650      	mov	r0, sl
 800a99c:	4659      	mov	r1, fp
 800a99e:	f7f5 fbe3 	bl	8000168 <__aeabi_dsub>
 800a9a2:	2400      	movs	r4, #0
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	4680      	mov	r8, r0
 800a9aa:	4689      	mov	r9, r1
 800a9ac:	4630      	mov	r0, r6
 800a9ae:	4639      	mov	r1, r7
 800a9b0:	f7f5 fbdc 	bl	800016c <__adddf3>
 800a9b4:	4632      	mov	r2, r6
 800a9b6:	463b      	mov	r3, r7
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	460d      	mov	r5, r1
 800a9bc:	f7f5 fbd4 	bl	8000168 <__aeabi_dsub>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	4640      	mov	r0, r8
 800a9c6:	4649      	mov	r1, r9
 800a9c8:	f7f5 fbce 	bl	8000168 <__aeabi_dsub>
 800a9cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	9304      	str	r3, [sp, #16]
 800a9d8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a9dc:	4606      	mov	r6, r0
 800a9de:	460f      	mov	r7, r1
 800a9e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9e4:	4652      	mov	r2, sl
 800a9e6:	465b      	mov	r3, fp
 800a9e8:	f7f5 fbbe 	bl	8000168 <__aeabi_dsub>
 800a9ec:	4622      	mov	r2, r4
 800a9ee:	462b      	mov	r3, r5
 800a9f0:	f7f5 fd72 	bl	80004d8 <__aeabi_dmul>
 800a9f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9f8:	4680      	mov	r8, r0
 800a9fa:	4689      	mov	r9, r1
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	4639      	mov	r1, r7
 800aa00:	f7f5 fd6a 	bl	80004d8 <__aeabi_dmul>
 800aa04:	4602      	mov	r2, r0
 800aa06:	460b      	mov	r3, r1
 800aa08:	4640      	mov	r0, r8
 800aa0a:	4649      	mov	r1, r9
 800aa0c:	f7f5 fbae 	bl	800016c <__adddf3>
 800aa10:	4652      	mov	r2, sl
 800aa12:	465b      	mov	r3, fp
 800aa14:	4606      	mov	r6, r0
 800aa16:	460f      	mov	r7, r1
 800aa18:	4620      	mov	r0, r4
 800aa1a:	4629      	mov	r1, r5
 800aa1c:	f7f5 fd5c 	bl	80004d8 <__aeabi_dmul>
 800aa20:	460b      	mov	r3, r1
 800aa22:	4602      	mov	r2, r0
 800aa24:	4680      	mov	r8, r0
 800aa26:	4689      	mov	r9, r1
 800aa28:	4630      	mov	r0, r6
 800aa2a:	4639      	mov	r1, r7
 800aa2c:	f7f5 fb9e 	bl	800016c <__adddf3>
 800aa30:	4b18      	ldr	r3, [pc, #96]	@ (800aa94 <__ieee754_pow+0x40c>)
 800aa32:	4604      	mov	r4, r0
 800aa34:	4299      	cmp	r1, r3
 800aa36:	460d      	mov	r5, r1
 800aa38:	468a      	mov	sl, r1
 800aa3a:	468b      	mov	fp, r1
 800aa3c:	f340 82e0 	ble.w	800b000 <__ieee754_pow+0x978>
 800aa40:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800aa44:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800aa48:	4303      	orrs	r3, r0
 800aa4a:	f000 81df 	beq.w	800ae0c <__ieee754_pow+0x784>
 800aa4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa52:	2200      	movs	r2, #0
 800aa54:	2300      	movs	r3, #0
 800aa56:	f7f5 ffb1 	bl	80009bc <__aeabi_dcmplt>
 800aa5a:	3800      	subs	r0, #0
 800aa5c:	bf18      	it	ne
 800aa5e:	2001      	movne	r0, #1
 800aa60:	e71d      	b.n	800a89e <__ieee754_pow+0x216>
 800aa62:	bf00      	nop
 800aa64:	f3af 8000 	nop.w
 800aa68:	60000000 	.word	0x60000000
 800aa6c:	3ff71547 	.word	0x3ff71547
 800aa70:	f85ddf44 	.word	0xf85ddf44
 800aa74:	3e54ae0b 	.word	0x3e54ae0b
 800aa78:	55555555 	.word	0x55555555
 800aa7c:	3fd55555 	.word	0x3fd55555
 800aa80:	652b82fe 	.word	0x652b82fe
 800aa84:	3ff71547 	.word	0x3ff71547
 800aa88:	3ff00000 	.word	0x3ff00000
 800aa8c:	3fd00000 	.word	0x3fd00000
 800aa90:	3fe00000 	.word	0x3fe00000
 800aa94:	408fffff 	.word	0x408fffff
 800aa98:	4ad3      	ldr	r2, [pc, #844]	@ (800ade8 <__ieee754_pow+0x760>)
 800aa9a:	402a      	ands	r2, r5
 800aa9c:	2a00      	cmp	r2, #0
 800aa9e:	f040 817a 	bne.w	800ad96 <__ieee754_pow+0x70e>
 800aaa2:	4bd2      	ldr	r3, [pc, #840]	@ (800adec <__ieee754_pow+0x764>)
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f7f5 fd17 	bl	80004d8 <__aeabi_dmul>
 800aaaa:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800aaae:	460b      	mov	r3, r1
 800aab0:	151a      	asrs	r2, r3, #20
 800aab2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800aab6:	4422      	add	r2, r4
 800aab8:	920a      	str	r2, [sp, #40]	@ 0x28
 800aaba:	4acd      	ldr	r2, [pc, #820]	@ (800adf0 <__ieee754_pow+0x768>)
 800aabc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aac0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800aac4:	4293      	cmp	r3, r2
 800aac6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800aaca:	dd08      	ble.n	800aade <__ieee754_pow+0x456>
 800aacc:	4ac9      	ldr	r2, [pc, #804]	@ (800adf4 <__ieee754_pow+0x76c>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	f340 8163 	ble.w	800ad9a <__ieee754_pow+0x712>
 800aad4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aad6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800aada:	3301      	adds	r3, #1
 800aadc:	930a      	str	r3, [sp, #40]	@ 0x28
 800aade:	2600      	movs	r6, #0
 800aae0:	00f3      	lsls	r3, r6, #3
 800aae2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aae4:	4bc4      	ldr	r3, [pc, #784]	@ (800adf8 <__ieee754_pow+0x770>)
 800aae6:	4629      	mov	r1, r5
 800aae8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aaec:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800aaf6:	4623      	mov	r3, r4
 800aaf8:	4682      	mov	sl, r0
 800aafa:	f7f5 fb35 	bl	8000168 <__aeabi_dsub>
 800aafe:	4652      	mov	r2, sl
 800ab00:	462b      	mov	r3, r5
 800ab02:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800ab06:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ab0a:	f7f5 fb2f 	bl	800016c <__adddf3>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	460b      	mov	r3, r1
 800ab12:	2000      	movs	r0, #0
 800ab14:	49b9      	ldr	r1, [pc, #740]	@ (800adfc <__ieee754_pow+0x774>)
 800ab16:	f7f5 fe09 	bl	800072c <__aeabi_ddiv>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ab22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab26:	f7f5 fcd7 	bl	80004d8 <__aeabi_dmul>
 800ab2a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ab2e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800ab32:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ab36:	2300      	movs	r3, #0
 800ab38:	2200      	movs	r2, #0
 800ab3a:	46ab      	mov	fp, r5
 800ab3c:	106d      	asrs	r5, r5, #1
 800ab3e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800ab42:	9304      	str	r3, [sp, #16]
 800ab44:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800ab48:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ab4c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800ab50:	4640      	mov	r0, r8
 800ab52:	4649      	mov	r1, r9
 800ab54:	4614      	mov	r4, r2
 800ab56:	461d      	mov	r5, r3
 800ab58:	f7f5 fcbe 	bl	80004d8 <__aeabi_dmul>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	460b      	mov	r3, r1
 800ab60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab64:	f7f5 fb00 	bl	8000168 <__aeabi_dsub>
 800ab68:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ab6c:	4606      	mov	r6, r0
 800ab6e:	460f      	mov	r7, r1
 800ab70:	4620      	mov	r0, r4
 800ab72:	4629      	mov	r1, r5
 800ab74:	f7f5 faf8 	bl	8000168 <__aeabi_dsub>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	4650      	mov	r0, sl
 800ab7e:	4659      	mov	r1, fp
 800ab80:	f7f5 faf2 	bl	8000168 <__aeabi_dsub>
 800ab84:	4642      	mov	r2, r8
 800ab86:	464b      	mov	r3, r9
 800ab88:	f7f5 fca6 	bl	80004d8 <__aeabi_dmul>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	460b      	mov	r3, r1
 800ab90:	4630      	mov	r0, r6
 800ab92:	4639      	mov	r1, r7
 800ab94:	f7f5 fae8 	bl	8000168 <__aeabi_dsub>
 800ab98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ab9c:	f7f5 fc9c 	bl	80004d8 <__aeabi_dmul>
 800aba0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aba4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aba8:	4610      	mov	r0, r2
 800abaa:	4619      	mov	r1, r3
 800abac:	f7f5 fc94 	bl	80004d8 <__aeabi_dmul>
 800abb0:	a37b      	add	r3, pc, #492	@ (adr r3, 800ada0 <__ieee754_pow+0x718>)
 800abb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb6:	4604      	mov	r4, r0
 800abb8:	460d      	mov	r5, r1
 800abba:	f7f5 fc8d 	bl	80004d8 <__aeabi_dmul>
 800abbe:	a37a      	add	r3, pc, #488	@ (adr r3, 800ada8 <__ieee754_pow+0x720>)
 800abc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc4:	f7f5 fad2 	bl	800016c <__adddf3>
 800abc8:	4622      	mov	r2, r4
 800abca:	462b      	mov	r3, r5
 800abcc:	f7f5 fc84 	bl	80004d8 <__aeabi_dmul>
 800abd0:	a377      	add	r3, pc, #476	@ (adr r3, 800adb0 <__ieee754_pow+0x728>)
 800abd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd6:	f7f5 fac9 	bl	800016c <__adddf3>
 800abda:	4622      	mov	r2, r4
 800abdc:	462b      	mov	r3, r5
 800abde:	f7f5 fc7b 	bl	80004d8 <__aeabi_dmul>
 800abe2:	a375      	add	r3, pc, #468	@ (adr r3, 800adb8 <__ieee754_pow+0x730>)
 800abe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe8:	f7f5 fac0 	bl	800016c <__adddf3>
 800abec:	4622      	mov	r2, r4
 800abee:	462b      	mov	r3, r5
 800abf0:	f7f5 fc72 	bl	80004d8 <__aeabi_dmul>
 800abf4:	a372      	add	r3, pc, #456	@ (adr r3, 800adc0 <__ieee754_pow+0x738>)
 800abf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfa:	f7f5 fab7 	bl	800016c <__adddf3>
 800abfe:	4622      	mov	r2, r4
 800ac00:	462b      	mov	r3, r5
 800ac02:	f7f5 fc69 	bl	80004d8 <__aeabi_dmul>
 800ac06:	a370      	add	r3, pc, #448	@ (adr r3, 800adc8 <__ieee754_pow+0x740>)
 800ac08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0c:	f7f5 faae 	bl	800016c <__adddf3>
 800ac10:	4622      	mov	r2, r4
 800ac12:	4606      	mov	r6, r0
 800ac14:	460f      	mov	r7, r1
 800ac16:	462b      	mov	r3, r5
 800ac18:	4620      	mov	r0, r4
 800ac1a:	4629      	mov	r1, r5
 800ac1c:	f7f5 fc5c 	bl	80004d8 <__aeabi_dmul>
 800ac20:	4602      	mov	r2, r0
 800ac22:	460b      	mov	r3, r1
 800ac24:	4630      	mov	r0, r6
 800ac26:	4639      	mov	r1, r7
 800ac28:	f7f5 fc56 	bl	80004d8 <__aeabi_dmul>
 800ac2c:	4604      	mov	r4, r0
 800ac2e:	460d      	mov	r5, r1
 800ac30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac34:	4642      	mov	r2, r8
 800ac36:	464b      	mov	r3, r9
 800ac38:	f7f5 fa98 	bl	800016c <__adddf3>
 800ac3c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ac40:	f7f5 fc4a 	bl	80004d8 <__aeabi_dmul>
 800ac44:	4622      	mov	r2, r4
 800ac46:	462b      	mov	r3, r5
 800ac48:	f7f5 fa90 	bl	800016c <__adddf3>
 800ac4c:	4642      	mov	r2, r8
 800ac4e:	4682      	mov	sl, r0
 800ac50:	468b      	mov	fp, r1
 800ac52:	464b      	mov	r3, r9
 800ac54:	4640      	mov	r0, r8
 800ac56:	4649      	mov	r1, r9
 800ac58:	f7f5 fc3e 	bl	80004d8 <__aeabi_dmul>
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	4b68      	ldr	r3, [pc, #416]	@ (800ae00 <__ieee754_pow+0x778>)
 800ac60:	4606      	mov	r6, r0
 800ac62:	460f      	mov	r7, r1
 800ac64:	f7f5 fa82 	bl	800016c <__adddf3>
 800ac68:	4652      	mov	r2, sl
 800ac6a:	465b      	mov	r3, fp
 800ac6c:	f7f5 fa7e 	bl	800016c <__adddf3>
 800ac70:	2400      	movs	r4, #0
 800ac72:	460d      	mov	r5, r1
 800ac74:	4622      	mov	r2, r4
 800ac76:	460b      	mov	r3, r1
 800ac78:	4640      	mov	r0, r8
 800ac7a:	4649      	mov	r1, r9
 800ac7c:	f7f5 fc2c 	bl	80004d8 <__aeabi_dmul>
 800ac80:	2200      	movs	r2, #0
 800ac82:	4680      	mov	r8, r0
 800ac84:	4689      	mov	r9, r1
 800ac86:	4620      	mov	r0, r4
 800ac88:	4629      	mov	r1, r5
 800ac8a:	4b5d      	ldr	r3, [pc, #372]	@ (800ae00 <__ieee754_pow+0x778>)
 800ac8c:	f7f5 fa6c 	bl	8000168 <__aeabi_dsub>
 800ac90:	4632      	mov	r2, r6
 800ac92:	463b      	mov	r3, r7
 800ac94:	f7f5 fa68 	bl	8000168 <__aeabi_dsub>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	4650      	mov	r0, sl
 800ac9e:	4659      	mov	r1, fp
 800aca0:	f7f5 fa62 	bl	8000168 <__aeabi_dsub>
 800aca4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aca8:	f7f5 fc16 	bl	80004d8 <__aeabi_dmul>
 800acac:	4622      	mov	r2, r4
 800acae:	4606      	mov	r6, r0
 800acb0:	460f      	mov	r7, r1
 800acb2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800acb6:	462b      	mov	r3, r5
 800acb8:	f7f5 fc0e 	bl	80004d8 <__aeabi_dmul>
 800acbc:	4602      	mov	r2, r0
 800acbe:	460b      	mov	r3, r1
 800acc0:	4630      	mov	r0, r6
 800acc2:	4639      	mov	r1, r7
 800acc4:	f7f5 fa52 	bl	800016c <__adddf3>
 800acc8:	2400      	movs	r4, #0
 800acca:	4606      	mov	r6, r0
 800accc:	460f      	mov	r7, r1
 800acce:	4602      	mov	r2, r0
 800acd0:	460b      	mov	r3, r1
 800acd2:	4640      	mov	r0, r8
 800acd4:	4649      	mov	r1, r9
 800acd6:	f7f5 fa49 	bl	800016c <__adddf3>
 800acda:	a33d      	add	r3, pc, #244	@ (adr r3, 800add0 <__ieee754_pow+0x748>)
 800acdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace0:	4620      	mov	r0, r4
 800ace2:	460d      	mov	r5, r1
 800ace4:	f7f5 fbf8 	bl	80004d8 <__aeabi_dmul>
 800ace8:	4642      	mov	r2, r8
 800acea:	464b      	mov	r3, r9
 800acec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800acf0:	4620      	mov	r0, r4
 800acf2:	4629      	mov	r1, r5
 800acf4:	f7f5 fa38 	bl	8000168 <__aeabi_dsub>
 800acf8:	4602      	mov	r2, r0
 800acfa:	460b      	mov	r3, r1
 800acfc:	4630      	mov	r0, r6
 800acfe:	4639      	mov	r1, r7
 800ad00:	f7f5 fa32 	bl	8000168 <__aeabi_dsub>
 800ad04:	a334      	add	r3, pc, #208	@ (adr r3, 800add8 <__ieee754_pow+0x750>)
 800ad06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0a:	f7f5 fbe5 	bl	80004d8 <__aeabi_dmul>
 800ad0e:	a334      	add	r3, pc, #208	@ (adr r3, 800ade0 <__ieee754_pow+0x758>)
 800ad10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad14:	4606      	mov	r6, r0
 800ad16:	460f      	mov	r7, r1
 800ad18:	4620      	mov	r0, r4
 800ad1a:	4629      	mov	r1, r5
 800ad1c:	f7f5 fbdc 	bl	80004d8 <__aeabi_dmul>
 800ad20:	4602      	mov	r2, r0
 800ad22:	460b      	mov	r3, r1
 800ad24:	4630      	mov	r0, r6
 800ad26:	4639      	mov	r1, r7
 800ad28:	f7f5 fa20 	bl	800016c <__adddf3>
 800ad2c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ad2e:	4b35      	ldr	r3, [pc, #212]	@ (800ae04 <__ieee754_pow+0x77c>)
 800ad30:	2400      	movs	r4, #0
 800ad32:	4413      	add	r3, r2
 800ad34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad38:	f7f5 fa18 	bl	800016c <__adddf3>
 800ad3c:	4682      	mov	sl, r0
 800ad3e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ad40:	468b      	mov	fp, r1
 800ad42:	f7f5 fb5f 	bl	8000404 <__aeabi_i2d>
 800ad46:	4606      	mov	r6, r0
 800ad48:	460f      	mov	r7, r1
 800ad4a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ad4c:	4b2e      	ldr	r3, [pc, #184]	@ (800ae08 <__ieee754_pow+0x780>)
 800ad4e:	4413      	add	r3, r2
 800ad50:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad54:	4652      	mov	r2, sl
 800ad56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad5a:	465b      	mov	r3, fp
 800ad5c:	f7f5 fa06 	bl	800016c <__adddf3>
 800ad60:	4642      	mov	r2, r8
 800ad62:	464b      	mov	r3, r9
 800ad64:	f7f5 fa02 	bl	800016c <__adddf3>
 800ad68:	4632      	mov	r2, r6
 800ad6a:	463b      	mov	r3, r7
 800ad6c:	f7f5 f9fe 	bl	800016c <__adddf3>
 800ad70:	4632      	mov	r2, r6
 800ad72:	463b      	mov	r3, r7
 800ad74:	4620      	mov	r0, r4
 800ad76:	460d      	mov	r5, r1
 800ad78:	f7f5 f9f6 	bl	8000168 <__aeabi_dsub>
 800ad7c:	4642      	mov	r2, r8
 800ad7e:	464b      	mov	r3, r9
 800ad80:	f7f5 f9f2 	bl	8000168 <__aeabi_dsub>
 800ad84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad88:	f7f5 f9ee 	bl	8000168 <__aeabi_dsub>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	460b      	mov	r3, r1
 800ad90:	4650      	mov	r0, sl
 800ad92:	4659      	mov	r1, fp
 800ad94:	e618      	b.n	800a9c8 <__ieee754_pow+0x340>
 800ad96:	2400      	movs	r4, #0
 800ad98:	e68a      	b.n	800aab0 <__ieee754_pow+0x428>
 800ad9a:	2601      	movs	r6, #1
 800ad9c:	e6a0      	b.n	800aae0 <__ieee754_pow+0x458>
 800ad9e:	bf00      	nop
 800ada0:	4a454eef 	.word	0x4a454eef
 800ada4:	3fca7e28 	.word	0x3fca7e28
 800ada8:	93c9db65 	.word	0x93c9db65
 800adac:	3fcd864a 	.word	0x3fcd864a
 800adb0:	a91d4101 	.word	0xa91d4101
 800adb4:	3fd17460 	.word	0x3fd17460
 800adb8:	518f264d 	.word	0x518f264d
 800adbc:	3fd55555 	.word	0x3fd55555
 800adc0:	db6fabff 	.word	0xdb6fabff
 800adc4:	3fdb6db6 	.word	0x3fdb6db6
 800adc8:	33333303 	.word	0x33333303
 800adcc:	3fe33333 	.word	0x3fe33333
 800add0:	e0000000 	.word	0xe0000000
 800add4:	3feec709 	.word	0x3feec709
 800add8:	dc3a03fd 	.word	0xdc3a03fd
 800addc:	3feec709 	.word	0x3feec709
 800ade0:	145b01f5 	.word	0x145b01f5
 800ade4:	be3e2fe0 	.word	0xbe3e2fe0
 800ade8:	7ff00000 	.word	0x7ff00000
 800adec:	43400000 	.word	0x43400000
 800adf0:	0003988e 	.word	0x0003988e
 800adf4:	000bb679 	.word	0x000bb679
 800adf8:	0800cd90 	.word	0x0800cd90
 800adfc:	3ff00000 	.word	0x3ff00000
 800ae00:	40080000 	.word	0x40080000
 800ae04:	0800cd70 	.word	0x0800cd70
 800ae08:	0800cd80 	.word	0x0800cd80
 800ae0c:	a39a      	add	r3, pc, #616	@ (adr r3, 800b078 <__ieee754_pow+0x9f0>)
 800ae0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae12:	4630      	mov	r0, r6
 800ae14:	4639      	mov	r1, r7
 800ae16:	f7f5 f9a9 	bl	800016c <__adddf3>
 800ae1a:	4642      	mov	r2, r8
 800ae1c:	e9cd 0100 	strd	r0, r1, [sp]
 800ae20:	464b      	mov	r3, r9
 800ae22:	4620      	mov	r0, r4
 800ae24:	4629      	mov	r1, r5
 800ae26:	f7f5 f99f 	bl	8000168 <__aeabi_dsub>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae32:	f7f5 fde1 	bl	80009f8 <__aeabi_dcmpgt>
 800ae36:	2800      	cmp	r0, #0
 800ae38:	f47f ae09 	bne.w	800aa4e <__ieee754_pow+0x3c6>
 800ae3c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ae40:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800ae44:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800ae48:	fa43 fa0a 	asr.w	sl, r3, sl
 800ae4c:	44da      	add	sl, fp
 800ae4e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800ae52:	489b      	ldr	r0, [pc, #620]	@ (800b0c0 <__ieee754_pow+0xa38>)
 800ae54:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800ae58:	4108      	asrs	r0, r1
 800ae5a:	ea00 030a 	and.w	r3, r0, sl
 800ae5e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800ae62:	f1c1 0114 	rsb	r1, r1, #20
 800ae66:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800ae6a:	4640      	mov	r0, r8
 800ae6c:	fa4a fa01 	asr.w	sl, sl, r1
 800ae70:	f1bb 0f00 	cmp.w	fp, #0
 800ae74:	4649      	mov	r1, r9
 800ae76:	f04f 0200 	mov.w	r2, #0
 800ae7a:	bfb8      	it	lt
 800ae7c:	f1ca 0a00 	rsblt	sl, sl, #0
 800ae80:	f7f5 f972 	bl	8000168 <__aeabi_dsub>
 800ae84:	4680      	mov	r8, r0
 800ae86:	4689      	mov	r9, r1
 800ae88:	2400      	movs	r4, #0
 800ae8a:	4632      	mov	r2, r6
 800ae8c:	463b      	mov	r3, r7
 800ae8e:	4640      	mov	r0, r8
 800ae90:	4649      	mov	r1, r9
 800ae92:	f7f5 f96b 	bl	800016c <__adddf3>
 800ae96:	a37a      	add	r3, pc, #488	@ (adr r3, 800b080 <__ieee754_pow+0x9f8>)
 800ae98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	460d      	mov	r5, r1
 800aea0:	f7f5 fb1a 	bl	80004d8 <__aeabi_dmul>
 800aea4:	4642      	mov	r2, r8
 800aea6:	464b      	mov	r3, r9
 800aea8:	e9cd 0100 	strd	r0, r1, [sp]
 800aeac:	4620      	mov	r0, r4
 800aeae:	4629      	mov	r1, r5
 800aeb0:	f7f5 f95a 	bl	8000168 <__aeabi_dsub>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	4630      	mov	r0, r6
 800aeba:	4639      	mov	r1, r7
 800aebc:	f7f5 f954 	bl	8000168 <__aeabi_dsub>
 800aec0:	a371      	add	r3, pc, #452	@ (adr r3, 800b088 <__ieee754_pow+0xa00>)
 800aec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec6:	f7f5 fb07 	bl	80004d8 <__aeabi_dmul>
 800aeca:	a371      	add	r3, pc, #452	@ (adr r3, 800b090 <__ieee754_pow+0xa08>)
 800aecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed0:	4680      	mov	r8, r0
 800aed2:	4689      	mov	r9, r1
 800aed4:	4620      	mov	r0, r4
 800aed6:	4629      	mov	r1, r5
 800aed8:	f7f5 fafe 	bl	80004d8 <__aeabi_dmul>
 800aedc:	4602      	mov	r2, r0
 800aede:	460b      	mov	r3, r1
 800aee0:	4640      	mov	r0, r8
 800aee2:	4649      	mov	r1, r9
 800aee4:	f7f5 f942 	bl	800016c <__adddf3>
 800aee8:	4604      	mov	r4, r0
 800aeea:	460d      	mov	r5, r1
 800aeec:	4602      	mov	r2, r0
 800aeee:	460b      	mov	r3, r1
 800aef0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aef4:	f7f5 f93a 	bl	800016c <__adddf3>
 800aef8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aefc:	4680      	mov	r8, r0
 800aefe:	4689      	mov	r9, r1
 800af00:	f7f5 f932 	bl	8000168 <__aeabi_dsub>
 800af04:	4602      	mov	r2, r0
 800af06:	460b      	mov	r3, r1
 800af08:	4620      	mov	r0, r4
 800af0a:	4629      	mov	r1, r5
 800af0c:	f7f5 f92c 	bl	8000168 <__aeabi_dsub>
 800af10:	4642      	mov	r2, r8
 800af12:	4606      	mov	r6, r0
 800af14:	460f      	mov	r7, r1
 800af16:	464b      	mov	r3, r9
 800af18:	4640      	mov	r0, r8
 800af1a:	4649      	mov	r1, r9
 800af1c:	f7f5 fadc 	bl	80004d8 <__aeabi_dmul>
 800af20:	a35d      	add	r3, pc, #372	@ (adr r3, 800b098 <__ieee754_pow+0xa10>)
 800af22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af26:	4604      	mov	r4, r0
 800af28:	460d      	mov	r5, r1
 800af2a:	f7f5 fad5 	bl	80004d8 <__aeabi_dmul>
 800af2e:	a35c      	add	r3, pc, #368	@ (adr r3, 800b0a0 <__ieee754_pow+0xa18>)
 800af30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af34:	f7f5 f918 	bl	8000168 <__aeabi_dsub>
 800af38:	4622      	mov	r2, r4
 800af3a:	462b      	mov	r3, r5
 800af3c:	f7f5 facc 	bl	80004d8 <__aeabi_dmul>
 800af40:	a359      	add	r3, pc, #356	@ (adr r3, 800b0a8 <__ieee754_pow+0xa20>)
 800af42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af46:	f7f5 f911 	bl	800016c <__adddf3>
 800af4a:	4622      	mov	r2, r4
 800af4c:	462b      	mov	r3, r5
 800af4e:	f7f5 fac3 	bl	80004d8 <__aeabi_dmul>
 800af52:	a357      	add	r3, pc, #348	@ (adr r3, 800b0b0 <__ieee754_pow+0xa28>)
 800af54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af58:	f7f5 f906 	bl	8000168 <__aeabi_dsub>
 800af5c:	4622      	mov	r2, r4
 800af5e:	462b      	mov	r3, r5
 800af60:	f7f5 faba 	bl	80004d8 <__aeabi_dmul>
 800af64:	a354      	add	r3, pc, #336	@ (adr r3, 800b0b8 <__ieee754_pow+0xa30>)
 800af66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6a:	f7f5 f8ff 	bl	800016c <__adddf3>
 800af6e:	4622      	mov	r2, r4
 800af70:	462b      	mov	r3, r5
 800af72:	f7f5 fab1 	bl	80004d8 <__aeabi_dmul>
 800af76:	4602      	mov	r2, r0
 800af78:	460b      	mov	r3, r1
 800af7a:	4640      	mov	r0, r8
 800af7c:	4649      	mov	r1, r9
 800af7e:	f7f5 f8f3 	bl	8000168 <__aeabi_dsub>
 800af82:	4604      	mov	r4, r0
 800af84:	460d      	mov	r5, r1
 800af86:	4602      	mov	r2, r0
 800af88:	460b      	mov	r3, r1
 800af8a:	4640      	mov	r0, r8
 800af8c:	4649      	mov	r1, r9
 800af8e:	f7f5 faa3 	bl	80004d8 <__aeabi_dmul>
 800af92:	2200      	movs	r2, #0
 800af94:	e9cd 0100 	strd	r0, r1, [sp]
 800af98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800af9c:	4620      	mov	r0, r4
 800af9e:	4629      	mov	r1, r5
 800afa0:	f7f5 f8e2 	bl	8000168 <__aeabi_dsub>
 800afa4:	4602      	mov	r2, r0
 800afa6:	460b      	mov	r3, r1
 800afa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afac:	f7f5 fbbe 	bl	800072c <__aeabi_ddiv>
 800afb0:	4632      	mov	r2, r6
 800afb2:	4604      	mov	r4, r0
 800afb4:	460d      	mov	r5, r1
 800afb6:	463b      	mov	r3, r7
 800afb8:	4640      	mov	r0, r8
 800afba:	4649      	mov	r1, r9
 800afbc:	f7f5 fa8c 	bl	80004d8 <__aeabi_dmul>
 800afc0:	4632      	mov	r2, r6
 800afc2:	463b      	mov	r3, r7
 800afc4:	f7f5 f8d2 	bl	800016c <__adddf3>
 800afc8:	4602      	mov	r2, r0
 800afca:	460b      	mov	r3, r1
 800afcc:	4620      	mov	r0, r4
 800afce:	4629      	mov	r1, r5
 800afd0:	f7f5 f8ca 	bl	8000168 <__aeabi_dsub>
 800afd4:	4642      	mov	r2, r8
 800afd6:	464b      	mov	r3, r9
 800afd8:	f7f5 f8c6 	bl	8000168 <__aeabi_dsub>
 800afdc:	4602      	mov	r2, r0
 800afde:	460b      	mov	r3, r1
 800afe0:	2000      	movs	r0, #0
 800afe2:	4938      	ldr	r1, [pc, #224]	@ (800b0c4 <__ieee754_pow+0xa3c>)
 800afe4:	f7f5 f8c0 	bl	8000168 <__aeabi_dsub>
 800afe8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800afec:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800aff0:	da2e      	bge.n	800b050 <__ieee754_pow+0x9c8>
 800aff2:	4652      	mov	r2, sl
 800aff4:	f000 f874 	bl	800b0e0 <scalbn>
 800aff8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800affc:	f7ff bbed 	b.w	800a7da <__ieee754_pow+0x152>
 800b000:	4c31      	ldr	r4, [pc, #196]	@ (800b0c8 <__ieee754_pow+0xa40>)
 800b002:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b006:	42a3      	cmp	r3, r4
 800b008:	d91a      	bls.n	800b040 <__ieee754_pow+0x9b8>
 800b00a:	4b30      	ldr	r3, [pc, #192]	@ (800b0cc <__ieee754_pow+0xa44>)
 800b00c:	440b      	add	r3, r1
 800b00e:	4303      	orrs	r3, r0
 800b010:	d009      	beq.n	800b026 <__ieee754_pow+0x99e>
 800b012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b016:	2200      	movs	r2, #0
 800b018:	2300      	movs	r3, #0
 800b01a:	f7f5 fccf 	bl	80009bc <__aeabi_dcmplt>
 800b01e:	3800      	subs	r0, #0
 800b020:	bf18      	it	ne
 800b022:	2001      	movne	r0, #1
 800b024:	e444      	b.n	800a8b0 <__ieee754_pow+0x228>
 800b026:	4642      	mov	r2, r8
 800b028:	464b      	mov	r3, r9
 800b02a:	f7f5 f89d 	bl	8000168 <__aeabi_dsub>
 800b02e:	4632      	mov	r2, r6
 800b030:	463b      	mov	r3, r7
 800b032:	f7f5 fcd7 	bl	80009e4 <__aeabi_dcmpge>
 800b036:	2800      	cmp	r0, #0
 800b038:	d1eb      	bne.n	800b012 <__ieee754_pow+0x98a>
 800b03a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800b0d0 <__ieee754_pow+0xa48>
 800b03e:	e6fd      	b.n	800ae3c <__ieee754_pow+0x7b4>
 800b040:	469a      	mov	sl, r3
 800b042:	4b24      	ldr	r3, [pc, #144]	@ (800b0d4 <__ieee754_pow+0xa4c>)
 800b044:	459a      	cmp	sl, r3
 800b046:	f63f aef9 	bhi.w	800ae3c <__ieee754_pow+0x7b4>
 800b04a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b04e:	e71b      	b.n	800ae88 <__ieee754_pow+0x800>
 800b050:	4621      	mov	r1, r4
 800b052:	e7d1      	b.n	800aff8 <__ieee754_pow+0x970>
 800b054:	2000      	movs	r0, #0
 800b056:	491b      	ldr	r1, [pc, #108]	@ (800b0c4 <__ieee754_pow+0xa3c>)
 800b058:	f7ff bb34 	b.w	800a6c4 <__ieee754_pow+0x3c>
 800b05c:	2000      	movs	r0, #0
 800b05e:	2100      	movs	r1, #0
 800b060:	f7ff bb30 	b.w	800a6c4 <__ieee754_pow+0x3c>
 800b064:	4650      	mov	r0, sl
 800b066:	4659      	mov	r1, fp
 800b068:	f7ff bb2c 	b.w	800a6c4 <__ieee754_pow+0x3c>
 800b06c:	460c      	mov	r4, r1
 800b06e:	f7ff bb79 	b.w	800a764 <__ieee754_pow+0xdc>
 800b072:	2400      	movs	r4, #0
 800b074:	f7ff bb64 	b.w	800a740 <__ieee754_pow+0xb8>
 800b078:	652b82fe 	.word	0x652b82fe
 800b07c:	3c971547 	.word	0x3c971547
 800b080:	00000000 	.word	0x00000000
 800b084:	3fe62e43 	.word	0x3fe62e43
 800b088:	fefa39ef 	.word	0xfefa39ef
 800b08c:	3fe62e42 	.word	0x3fe62e42
 800b090:	0ca86c39 	.word	0x0ca86c39
 800b094:	be205c61 	.word	0xbe205c61
 800b098:	72bea4d0 	.word	0x72bea4d0
 800b09c:	3e663769 	.word	0x3e663769
 800b0a0:	c5d26bf1 	.word	0xc5d26bf1
 800b0a4:	3ebbbd41 	.word	0x3ebbbd41
 800b0a8:	af25de2c 	.word	0xaf25de2c
 800b0ac:	3f11566a 	.word	0x3f11566a
 800b0b0:	16bebd93 	.word	0x16bebd93
 800b0b4:	3f66c16c 	.word	0x3f66c16c
 800b0b8:	5555553e 	.word	0x5555553e
 800b0bc:	3fc55555 	.word	0x3fc55555
 800b0c0:	fff00000 	.word	0xfff00000
 800b0c4:	3ff00000 	.word	0x3ff00000
 800b0c8:	4090cbff 	.word	0x4090cbff
 800b0cc:	3f6f3400 	.word	0x3f6f3400
 800b0d0:	4090cc00 	.word	0x4090cc00
 800b0d4:	3fe00000 	.word	0x3fe00000

0800b0d8 <fabs>:
 800b0d8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b0dc:	4619      	mov	r1, r3
 800b0de:	4770      	bx	lr

0800b0e0 <scalbn>:
 800b0e0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800b0e4:	4616      	mov	r6, r2
 800b0e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b0ea:	4683      	mov	fp, r0
 800b0ec:	468c      	mov	ip, r1
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	b982      	cbnz	r2, 800b114 <scalbn+0x34>
 800b0f2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b0f6:	4303      	orrs	r3, r0
 800b0f8:	d039      	beq.n	800b16e <scalbn+0x8e>
 800b0fa:	4b2f      	ldr	r3, [pc, #188]	@ (800b1b8 <scalbn+0xd8>)
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	f7f5 f9eb 	bl	80004d8 <__aeabi_dmul>
 800b102:	4b2e      	ldr	r3, [pc, #184]	@ (800b1bc <scalbn+0xdc>)
 800b104:	4683      	mov	fp, r0
 800b106:	429e      	cmp	r6, r3
 800b108:	468c      	mov	ip, r1
 800b10a:	da0d      	bge.n	800b128 <scalbn+0x48>
 800b10c:	a326      	add	r3, pc, #152	@ (adr r3, 800b1a8 <scalbn+0xc8>)
 800b10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b112:	e01b      	b.n	800b14c <scalbn+0x6c>
 800b114:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800b118:	42ba      	cmp	r2, r7
 800b11a:	d109      	bne.n	800b130 <scalbn+0x50>
 800b11c:	4602      	mov	r2, r0
 800b11e:	f7f5 f825 	bl	800016c <__adddf3>
 800b122:	4683      	mov	fp, r0
 800b124:	468c      	mov	ip, r1
 800b126:	e022      	b.n	800b16e <scalbn+0x8e>
 800b128:	460b      	mov	r3, r1
 800b12a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b12e:	3a36      	subs	r2, #54	@ 0x36
 800b130:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b134:	428e      	cmp	r6, r1
 800b136:	dd0c      	ble.n	800b152 <scalbn+0x72>
 800b138:	a31d      	add	r3, pc, #116	@ (adr r3, 800b1b0 <scalbn+0xd0>)
 800b13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13e:	461c      	mov	r4, r3
 800b140:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800b144:	f361 74df 	bfi	r4, r1, #31, #1
 800b148:	4621      	mov	r1, r4
 800b14a:	481d      	ldr	r0, [pc, #116]	@ (800b1c0 <scalbn+0xe0>)
 800b14c:	f7f5 f9c4 	bl	80004d8 <__aeabi_dmul>
 800b150:	e7e7      	b.n	800b122 <scalbn+0x42>
 800b152:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b156:	4432      	add	r2, r6
 800b158:	428a      	cmp	r2, r1
 800b15a:	dced      	bgt.n	800b138 <scalbn+0x58>
 800b15c:	2a00      	cmp	r2, #0
 800b15e:	dd0a      	ble.n	800b176 <scalbn+0x96>
 800b160:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b164:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b168:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b16c:	46ac      	mov	ip, r5
 800b16e:	4658      	mov	r0, fp
 800b170:	4661      	mov	r1, ip
 800b172:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800b176:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b17a:	da09      	bge.n	800b190 <scalbn+0xb0>
 800b17c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800b180:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800b184:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800b188:	480e      	ldr	r0, [pc, #56]	@ (800b1c4 <scalbn+0xe4>)
 800b18a:	f041 011f 	orr.w	r1, r1, #31
 800b18e:	e7bd      	b.n	800b10c <scalbn+0x2c>
 800b190:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b194:	3236      	adds	r2, #54	@ 0x36
 800b196:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b19a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b19e:	4658      	mov	r0, fp
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	4b08      	ldr	r3, [pc, #32]	@ (800b1c8 <scalbn+0xe8>)
 800b1a6:	e7d1      	b.n	800b14c <scalbn+0x6c>
 800b1a8:	c2f8f359 	.word	0xc2f8f359
 800b1ac:	01a56e1f 	.word	0x01a56e1f
 800b1b0:	8800759c 	.word	0x8800759c
 800b1b4:	7e37e43c 	.word	0x7e37e43c
 800b1b8:	43500000 	.word	0x43500000
 800b1bc:	ffff3cb0 	.word	0xffff3cb0
 800b1c0:	8800759c 	.word	0x8800759c
 800b1c4:	c2f8f359 	.word	0xc2f8f359
 800b1c8:	3c900000 	.word	0x3c900000

0800b1cc <with_errno>:
 800b1cc:	b570      	push	{r4, r5, r6, lr}
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	460d      	mov	r5, r1
 800b1d2:	4616      	mov	r6, r2
 800b1d4:	f7fc fd02 	bl	8007bdc <__errno>
 800b1d8:	4629      	mov	r1, r5
 800b1da:	6006      	str	r6, [r0, #0]
 800b1dc:	4620      	mov	r0, r4
 800b1de:	bd70      	pop	{r4, r5, r6, pc}

0800b1e0 <xflow>:
 800b1e0:	b513      	push	{r0, r1, r4, lr}
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	4610      	mov	r0, r2
 800b1e8:	b10c      	cbz	r4, 800b1ee <xflow+0xe>
 800b1ea:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b1ee:	e9cd 2300 	strd	r2, r3, [sp]
 800b1f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1f6:	f7f5 f96f 	bl	80004d8 <__aeabi_dmul>
 800b1fa:	2222      	movs	r2, #34	@ 0x22
 800b1fc:	b002      	add	sp, #8
 800b1fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b202:	f7ff bfe3 	b.w	800b1cc <with_errno>

0800b206 <__math_uflow>:
 800b206:	2200      	movs	r2, #0
 800b208:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b20c:	f7ff bfe8 	b.w	800b1e0 <xflow>

0800b210 <__math_oflow>:
 800b210:	2200      	movs	r2, #0
 800b212:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800b216:	f7ff bfe3 	b.w	800b1e0 <xflow>
	...

0800b21c <__ieee754_sqrt>:
 800b21c:	4a67      	ldr	r2, [pc, #412]	@ (800b3bc <__ieee754_sqrt+0x1a0>)
 800b21e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b222:	438a      	bics	r2, r1
 800b224:	4606      	mov	r6, r0
 800b226:	460f      	mov	r7, r1
 800b228:	460b      	mov	r3, r1
 800b22a:	4604      	mov	r4, r0
 800b22c:	d10e      	bne.n	800b24c <__ieee754_sqrt+0x30>
 800b22e:	4602      	mov	r2, r0
 800b230:	f7f5 f952 	bl	80004d8 <__aeabi_dmul>
 800b234:	4602      	mov	r2, r0
 800b236:	460b      	mov	r3, r1
 800b238:	4630      	mov	r0, r6
 800b23a:	4639      	mov	r1, r7
 800b23c:	f7f4 ff96 	bl	800016c <__adddf3>
 800b240:	4606      	mov	r6, r0
 800b242:	460f      	mov	r7, r1
 800b244:	4630      	mov	r0, r6
 800b246:	4639      	mov	r1, r7
 800b248:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b24c:	2900      	cmp	r1, #0
 800b24e:	dc0c      	bgt.n	800b26a <__ieee754_sqrt+0x4e>
 800b250:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800b254:	4302      	orrs	r2, r0
 800b256:	d0f5      	beq.n	800b244 <__ieee754_sqrt+0x28>
 800b258:	b189      	cbz	r1, 800b27e <__ieee754_sqrt+0x62>
 800b25a:	4602      	mov	r2, r0
 800b25c:	f7f4 ff84 	bl	8000168 <__aeabi_dsub>
 800b260:	4602      	mov	r2, r0
 800b262:	460b      	mov	r3, r1
 800b264:	f7f5 fa62 	bl	800072c <__aeabi_ddiv>
 800b268:	e7ea      	b.n	800b240 <__ieee754_sqrt+0x24>
 800b26a:	150a      	asrs	r2, r1, #20
 800b26c:	d115      	bne.n	800b29a <__ieee754_sqrt+0x7e>
 800b26e:	2100      	movs	r1, #0
 800b270:	e009      	b.n	800b286 <__ieee754_sqrt+0x6a>
 800b272:	0ae3      	lsrs	r3, r4, #11
 800b274:	3a15      	subs	r2, #21
 800b276:	0564      	lsls	r4, r4, #21
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d0fa      	beq.n	800b272 <__ieee754_sqrt+0x56>
 800b27c:	e7f7      	b.n	800b26e <__ieee754_sqrt+0x52>
 800b27e:	460a      	mov	r2, r1
 800b280:	e7fa      	b.n	800b278 <__ieee754_sqrt+0x5c>
 800b282:	005b      	lsls	r3, r3, #1
 800b284:	3101      	adds	r1, #1
 800b286:	02d8      	lsls	r0, r3, #11
 800b288:	d5fb      	bpl.n	800b282 <__ieee754_sqrt+0x66>
 800b28a:	1e48      	subs	r0, r1, #1
 800b28c:	1a12      	subs	r2, r2, r0
 800b28e:	f1c1 0020 	rsb	r0, r1, #32
 800b292:	fa24 f000 	lsr.w	r0, r4, r0
 800b296:	4303      	orrs	r3, r0
 800b298:	408c      	lsls	r4, r1
 800b29a:	2600      	movs	r6, #0
 800b29c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800b2a0:	2116      	movs	r1, #22
 800b2a2:	07d2      	lsls	r2, r2, #31
 800b2a4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800b2a8:	4632      	mov	r2, r6
 800b2aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b2b2:	bf5c      	itt	pl
 800b2b4:	005b      	lslpl	r3, r3, #1
 800b2b6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800b2ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b2be:	bf58      	it	pl
 800b2c0:	0064      	lslpl	r4, r4, #1
 800b2c2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b2c6:	107f      	asrs	r7, r7, #1
 800b2c8:	0064      	lsls	r4, r4, #1
 800b2ca:	1815      	adds	r5, r2, r0
 800b2cc:	429d      	cmp	r5, r3
 800b2ce:	bfde      	ittt	le
 800b2d0:	182a      	addle	r2, r5, r0
 800b2d2:	1b5b      	suble	r3, r3, r5
 800b2d4:	1836      	addle	r6, r6, r0
 800b2d6:	0fe5      	lsrs	r5, r4, #31
 800b2d8:	3901      	subs	r1, #1
 800b2da:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800b2de:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b2e2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b2e6:	d1f0      	bne.n	800b2ca <__ieee754_sqrt+0xae>
 800b2e8:	460d      	mov	r5, r1
 800b2ea:	f04f 0a20 	mov.w	sl, #32
 800b2ee:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	eb01 0c00 	add.w	ip, r1, r0
 800b2f8:	db02      	blt.n	800b300 <__ieee754_sqrt+0xe4>
 800b2fa:	d113      	bne.n	800b324 <__ieee754_sqrt+0x108>
 800b2fc:	45a4      	cmp	ip, r4
 800b2fe:	d811      	bhi.n	800b324 <__ieee754_sqrt+0x108>
 800b300:	f1bc 0f00 	cmp.w	ip, #0
 800b304:	eb0c 0100 	add.w	r1, ip, r0
 800b308:	da42      	bge.n	800b390 <__ieee754_sqrt+0x174>
 800b30a:	2900      	cmp	r1, #0
 800b30c:	db40      	blt.n	800b390 <__ieee754_sqrt+0x174>
 800b30e:	f102 0e01 	add.w	lr, r2, #1
 800b312:	1a9b      	subs	r3, r3, r2
 800b314:	4672      	mov	r2, lr
 800b316:	45a4      	cmp	ip, r4
 800b318:	bf88      	it	hi
 800b31a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b31e:	eba4 040c 	sub.w	r4, r4, ip
 800b322:	4405      	add	r5, r0
 800b324:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800b328:	f1ba 0a01 	subs.w	sl, sl, #1
 800b32c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800b330:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b334:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b338:	d1db      	bne.n	800b2f2 <__ieee754_sqrt+0xd6>
 800b33a:	431c      	orrs	r4, r3
 800b33c:	d01a      	beq.n	800b374 <__ieee754_sqrt+0x158>
 800b33e:	4c20      	ldr	r4, [pc, #128]	@ (800b3c0 <__ieee754_sqrt+0x1a4>)
 800b340:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800b3c4 <__ieee754_sqrt+0x1a8>
 800b344:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b348:	e9db 2300 	ldrd	r2, r3, [fp]
 800b34c:	f7f4 ff0c 	bl	8000168 <__aeabi_dsub>
 800b350:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b354:	4602      	mov	r2, r0
 800b356:	460b      	mov	r3, r1
 800b358:	4640      	mov	r0, r8
 800b35a:	4649      	mov	r1, r9
 800b35c:	f7f5 fb38 	bl	80009d0 <__aeabi_dcmple>
 800b360:	b140      	cbz	r0, 800b374 <__ieee754_sqrt+0x158>
 800b362:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b366:	e9db 2300 	ldrd	r2, r3, [fp]
 800b36a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800b36e:	d111      	bne.n	800b394 <__ieee754_sqrt+0x178>
 800b370:	4655      	mov	r5, sl
 800b372:	3601      	adds	r6, #1
 800b374:	1072      	asrs	r2, r6, #1
 800b376:	086b      	lsrs	r3, r5, #1
 800b378:	07f1      	lsls	r1, r6, #31
 800b37a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b37e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b382:	bf48      	it	mi
 800b384:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b388:	4618      	mov	r0, r3
 800b38a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800b38e:	e757      	b.n	800b240 <__ieee754_sqrt+0x24>
 800b390:	4696      	mov	lr, r2
 800b392:	e7be      	b.n	800b312 <__ieee754_sqrt+0xf6>
 800b394:	f7f4 feea 	bl	800016c <__adddf3>
 800b398:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b39c:	4602      	mov	r2, r0
 800b39e:	460b      	mov	r3, r1
 800b3a0:	4640      	mov	r0, r8
 800b3a2:	4649      	mov	r1, r9
 800b3a4:	f7f5 fb0a 	bl	80009bc <__aeabi_dcmplt>
 800b3a8:	b120      	cbz	r0, 800b3b4 <__ieee754_sqrt+0x198>
 800b3aa:	1ca8      	adds	r0, r5, #2
 800b3ac:	bf08      	it	eq
 800b3ae:	3601      	addeq	r6, #1
 800b3b0:	3502      	adds	r5, #2
 800b3b2:	e7df      	b.n	800b374 <__ieee754_sqrt+0x158>
 800b3b4:	1c6b      	adds	r3, r5, #1
 800b3b6:	f023 0501 	bic.w	r5, r3, #1
 800b3ba:	e7db      	b.n	800b374 <__ieee754_sqrt+0x158>
 800b3bc:	7ff00000 	.word	0x7ff00000
 800b3c0:	200001f8 	.word	0x200001f8
 800b3c4:	200001f0 	.word	0x200001f0

0800b3c8 <_init>:
 800b3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ca:	bf00      	nop
 800b3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ce:	bc08      	pop	{r3}
 800b3d0:	469e      	mov	lr, r3
 800b3d2:	4770      	bx	lr

0800b3d4 <_fini>:
 800b3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3d6:	bf00      	nop
 800b3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3da:	bc08      	pop	{r3}
 800b3dc:	469e      	mov	lr, r3
 800b3de:	4770      	bx	lr
